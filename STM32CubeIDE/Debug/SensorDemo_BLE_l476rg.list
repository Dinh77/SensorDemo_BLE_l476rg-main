
SensorDemo_BLE_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800dda8  0800dda8  0000eda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e40c  0800e40c  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e40c  0800e40c  0000f40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e414  0800e414  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e414  0800e414  0000f414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e418  0800e418  0000f418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e41c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  200001ec  0800e608  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000be0  0800e608  00010be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_line   00024c88  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008a  00000000  00000000  00034ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00025772  00000000  00000000  00034f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047a7  00000000  00000000  0005a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f70  00000000  00000000  0005ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe816  00000000  00000000  00060db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001863  00000000  00000000  0015f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c7b1  00000000  00000000  00160e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018d5e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009698  00000000  00000000  0018d628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd90 	.word	0x0800dd90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800dd90 	.word	0x0800dd90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f003 f8be 	bl	80040f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f00b f829 	bl	800bff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f002 fb65 	bl	8003674 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000fb8:	0800e41c 	.word	0x0800e41c
  ldr r2, =_sbss
 8000fbc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000fc0:	20000be0 	.word	0x20000be0

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>

08000fc6 <linear_interpolation>:
  float_t x1;
  float_t y1;
} lin_t;

float_t linear_interpolation(lin_t *lin, int16_t x)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	ed93 6a00 	vldr	s12, [r3]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 7a03 	vldr	s15, [r3, #12]
 800100e:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8001012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001016:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800102a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800102e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8001046:	f000 f829 	bl	800109c <User_Init>
  Sensor_Init();
 800104a:	f001 fb61 	bl	8002710 <Sensor_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800104e:	2000      	movs	r0, #0
 8001050:	f002 ff3c 	bl	8003ecc <BSP_PB_GetState>
 8001054:	4603      	mov	r3, r0
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_BlueNRG_2_Init+0x44>)
 800105a:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 800105c:	2100      	movs	r1, #0
 800105e:	480a      	ldr	r0, [pc, #40]	@ (8001088 <MX_BlueNRG_2_Init+0x48>)
 8001060:	f009 fe8e 	bl	800ad80 <hci_init>

  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8001064:	f000 f828 	bl	80010b8 <Sensor_DeviceInit>
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <MX_BlueNRG_2_Init+0x3c>
  {
    BSP_LED_On(LED2);
 8001072:	2000      	movs	r0, #0
 8001074:	f002 fe8c 	bl	8003d90 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MX_BlueNRG_2_Init+0x38>
  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	08003829 	.word	0x08003829

0800108c <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8001090:	f009 fff0 	bl	800b074 <hci_user_evt_proc>
  User_Process();
 8001094:	f000 f8a8 	bl	80011e8 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010a0:	2101      	movs	r1, #1
 80010a2:	2000      	movs	r0, #0
 80010a4:	f002 febe 	bl	8003e24 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f002 fe5f 	bl	8003d6c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f002 ff36 	bl	8003f20 <BSP_COM_Init>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 80010be:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <Sensor_DeviceInit+0x124>)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c8:	6018      	str	r0, [r3, #0]
 80010ca:	3304      	adds	r3, #4
 80010cc:	8019      	strh	r1, [r3, #0]
 80010ce:	3302      	adds	r3, #2
 80010d0:	0c0a      	lsrs	r2, r1, #16
 80010d2:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 80010d8:	f009 fccd 	bl	800aa76 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80010dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010e0:	f003 f898 	bl	8004214 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fa6c 	bl	80025c8 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 80010f0:	1cf9      	adds	r1, r7, #3
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	4a3a      	ldr	r2, [pc, #232]	@ (80011e0 <Sensor_DeviceInit+0x128>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f008 f8a8 	bl	800924c <aci_hal_read_config_data>
 80010fc:	4603      	mov	r3, r0
 80010fe:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001100:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <Sensor_DeviceInit+0x128>)
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001108:	2bc0      	cmp	r3, #192	@ 0xc0
 800110a:	d001      	beq.n	8001110 <Sensor_DeviceInit+0x58>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <Sensor_DeviceInit+0x54>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8001110:	2104      	movs	r1, #4
 8001112:	2001      	movs	r0, #1
 8001114:	f008 f91e 	bl	8009354 <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <Sensor_DeviceInit+0x6a>
  {
    PRINT_DBG("Error in aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
    return ret;
 800111e:	7dbb      	ldrb	r3, [r7, #22]
 8001120:	e057      	b.n	80011d2 <Sensor_DeviceInit+0x11a>
  {
    PRINT_DBG("aci_hal_set_tx_power_level() --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8001122:	f007 fd7b 	bl	8008c1c <aci_gatt_init>
 8001126:	4603      	mov	r3, r0
 8001128:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 800112a:	7dbb      	ldrb	r3, [r7, #22]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <Sensor_DeviceInit+0x7c>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	e04e      	b.n	80011d2 <Sensor_DeviceInit+0x11a>
  {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, &dev_name_char_handle,
 8001134:	f107 0214 	add.w	r2, r7, #20
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f107 0312 	add.w	r3, r7, #18
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	2207      	movs	r2, #7
 8001148:	2100      	movs	r1, #0
 800114a:	2001      	movs	r0, #1
 800114c:	f007 fc3e 	bl	80089cc <aci_gap_init>
 8001150:	4603      	mov	r3, r0
 8001152:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <Sensor_DeviceInit+0xa6>
  {
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	e039      	b.n	80011d2 <Sensor_DeviceInit+0x11a>
  {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 800115e:	8ab8      	ldrh	r0, [r7, #20]
 8001160:	8a79      	ldrh	r1, [r7, #18]
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2307      	movs	r3, #7
 800116a:	2200      	movs	r2, #0
 800116c:	f007 ff5e 	bl	800902c <aci_gatt_update_char_value>
 8001170:	4603      	mov	r3, r0
 8001172:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if(ret != BLE_STATUS_SUCCESS)
 8001174:	7dbb      	ldrb	r3, [r7, #22]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <Sensor_DeviceInit+0xc6>
  {
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 800117a:	7dbb      	ldrb	r3, [r7, #22]
 800117c:	e029      	b.n	80011d2 <Sensor_DeviceInit+0x11a>
  {
    PRINT_DBG("aci_gatt_update_char_value() --> SUCCESS\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 800117e:	2300      	movs	r3, #0
 8001180:	9304      	str	r3, [sp, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Sensor_DeviceInit+0x12c>)
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	2300      	movs	r3, #0
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2310      	movs	r3, #16
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2307      	movs	r3, #7
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	2201      	movs	r2, #1
 8001196:	2101      	movs	r1, #1
 8001198:	2001      	movs	r0, #1
 800119a:	f007 fb4a 	bl	8008832 <aci_gap_set_authentication_requirement>
 800119e:	4603      	mov	r3, r0
 80011a0:	75bb      	strb	r3, [r7, #22]
                                               7,
                                               16,
                                               USE_FIXED_PIN_FOR_PAIRING,
                                               123456,
                                               0x00);
  if(ret != BLE_STATUS_SUCCESS)
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <Sensor_DeviceInit+0xf4>
  {
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 80011a8:	7dbb      	ldrb	r3, [r7, #22]
 80011aa:	e012      	b.n	80011d2 <Sensor_DeviceInit+0x11a>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 80011ac:	f001 fbf8 	bl	80029a0 <Add_HWServW2ST_Service>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <Sensor_DeviceInit+0x106>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else
  {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <Sensor_DeviceInit+0x102>
  }

  ret = Add_SWServW2ST_Service();
 80011be:	f001 fccf 	bl	8002b60 <Add_SWServW2ST_Service>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <Sensor_DeviceInit+0x118>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else
  {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Sensor_DeviceInit+0x114>
  }

  return BLE_STATUS_SUCCESS;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	0800dda8 	.word	0x0800dda8
 80011e0:	20000208 	.word	0x20000208
 80011e4:	0001e240 	.word	0x0001e240

080011e8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b088      	sub	sp, #32
 80011ee:	af04      	add	r7, sp, #16
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 80011f0:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <User_Process+0x10c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <User_Process+0x1c>
  {
    Set_DeviceConnectable();
 80011fa:	f002 faa1 	bl	8003740 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <User_Process+0x10c>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8001204:	2000      	movs	r0, #0
 8001206:	f002 fdef 	bl	8003de8 <BSP_LED_Toggle>

    if (connected)
 800120a:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <User_Process+0x110>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d06b      	beq.n	80012ea <User_Process+0x102>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001212:	f002 fff3 	bl	80041fc <HAL_GetTick>
 8001216:	4603      	mov	r3, r0
 8001218:	4618      	mov	r0, r3
 800121a:	f00a f8bb 	bl	800b394 <srand>

      /* Update emulated Environmental data */
      float temp = Read_Temperature_LPS22HH();
 800121e:	f001 fb29 	bl	8002874 <Read_Temperature_LPS22HH>
 8001222:	ed87 0a03 	vstr	s0, [r7, #12]
      float press = Read_Pressure_LPS22HH();
 8001226:	f001 fb0d 	bl	8002844 <Read_Pressure_LPS22HH>
 800122a:	ed87 0a02 	vstr	s0, [r7, #8]
      float hum = Read_Humidity_HTS221();
 800122e:	f001 fabd 	bl	80027ac <Read_Humidity_HTS221>
 8001232:	ed87 0a01 	vstr	s0, [r7, #4]
      printf("Température (°C): %.2f | Pression (hPa): %.2f | Humidité (%%): %.2f\r\n", temp, press, hum);
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4680      	mov	r8, r0
 800123e:	4689      	mov	r9, r1
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4604      	mov	r4, r0
 8001248:	460d      	mov	r5, r1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff f97c 	bl	8000548 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001258:	e9cd 4500 	strd	r4, r5, [sp]
 800125c:	4642      	mov	r2, r8
 800125e:	464b      	mov	r3, r9
 8001260:	4826      	ldr	r0, [pc, #152]	@ (80012fc <User_Process+0x114>)
 8001262:	f00a fe1b 	bl	800be9c <iprintf>

      Environmental_Update((int32_t)(press * 100), (int16_t)(temp * 10), (int16_t)(hum * 10));
 8001266:	edd7 7a02 	vldr	s15, [r7, #8]
 800126a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001300 <User_Process+0x118>
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001276:	edd7 7a03 	vldr	s15, [r7, #12]
 800127a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800127e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001286:	ee17 3a90 	vmov	r3, s15
 800128a:	b21b      	sxth	r3, r3
 800128c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001290:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 2a90 	vmov	r2, s15
 80012a0:	b212      	sxth	r2, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	ee16 0a90 	vmov	r0, s13
 80012a8:	f001 fed6 	bl	8003058 <Environmental_Update>



      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <User_Process+0x11c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f831 	bl	8001318 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <User_Process+0x120>)
 80012b8:	4914      	ldr	r1, [pc, #80]	@ (800130c <User_Process+0x124>)
 80012ba:	4815      	ldr	r0, [pc, #84]	@ (8001310 <User_Process+0x128>)
 80012bc:	f001 fce0 	bl	8002c80 <Acc_Update>
      Quat_Update(&q_axes);
 80012c0:	4814      	ldr	r0, [pc, #80]	@ (8001314 <User_Process+0x12c>)
 80012c2:	f001 fd67 	bl	8002d94 <Quat_Update>

      counter ++;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <User_Process+0x11c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <User_Process+0x11c>)
 80012ce:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <User_Process+0x11c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b28      	cmp	r3, #40	@ 0x28
 80012d6:	d104      	bne.n	80012e2 <User_Process+0xfa>
        counter = 0;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <User_Process+0x11c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 80012de:	f001 f889 	bl	80023f4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 80012e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e6:	f002 ff95 	bl	8004214 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012f4:	20000001 	.word	0x20000001
 80012f8:	200003c0 	.word	0x200003c0
 80012fc:	0800ddb0 	.word	0x0800ddb0
 8001300:	42c80000 	.word	0x42c80000
 8001304:	20000230 	.word	0x20000230
 8001308:	200003dc 	.word	0x200003dc
 800130c:	200003d0 	.word	0x200003d0
 8001310:	200003c4 	.word	0x200003c4
 8001314:	200003e8 	.word	0x200003e8

08001318 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800131c:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8001320:	af00      	add	r7, sp, #0
 8001322:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8001326:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800132a:	2b13      	cmp	r3, #19
 800132c:	f200 8426 	bhi.w	8001b7c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001330:	f00a f85e 	bl	800b3f0 <rand>
 8001334:	4603      	mov	r3, r0
 8001336:	17da      	asrs	r2, r3, #31
 8001338:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800133c:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001340:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001344:	2200      	movs	r2, #0
 8001346:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800134a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 800134e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8001352:	462b      	mov	r3, r5
 8001354:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8001358:	4652      	mov	r2, sl
 800135a:	fb02 f203 	mul.w	r2, r2, r3
 800135e:	465b      	mov	r3, fp
 8001360:	4621      	mov	r1, r4
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	4622      	mov	r2, r4
 800136a:	4651      	mov	r1, sl
 800136c:	fba2 8901 	umull	r8, r9, r2, r1
 8001370:	444b      	add	r3, r9
 8001372:	4699      	mov	r9, r3
 8001374:	4642      	mov	r2, r8
 8001376:	464b      	mov	r3, r9
 8001378:	1891      	adds	r1, r2, r2
 800137a:	66b9      	str	r1, [r7, #104]	@ 0x68
 800137c:	415b      	adcs	r3, r3
 800137e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001380:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001384:	eb12 0108 	adds.w	r1, r2, r8
 8001388:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 800138c:	eb43 0309 	adc.w	r3, r3, r9
 8001390:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001394:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 80013a0:	f7ff fc52 	bl	8000c48 <__aeabi_uldivmod>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f112 010a 	adds.w	r1, r2, #10
 80013ac:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80013b0:	f143 0300 	adc.w	r3, r3, #0
 80013b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80013b8:	4bec      	ldr	r3, [pc, #944]	@ (800176c <Set_Random_Motion_Values+0x454>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80013c2:	4413      	add	r3, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4be9      	ldr	r3, [pc, #932]	@ (800176c <Set_Random_Motion_Values+0x454>)
 80013c8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013ca:	f00a f811 	bl	800b3f0 <rand>
 80013ce:	4603      	mov	r3, r0
 80013d0:	17da      	asrs	r2, r3, #31
 80013d2:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80013d6:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 80013da:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80013e4:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80013e8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 80013ec:	462b      	mov	r3, r5
 80013ee:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 80013f2:	4642      	mov	r2, r8
 80013f4:	fb02 f203 	mul.w	r2, r2, r3
 80013f8:	464b      	mov	r3, r9
 80013fa:	4621      	mov	r1, r4
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	4413      	add	r3, r2
 8001402:	4622      	mov	r2, r4
 8001404:	4641      	mov	r1, r8
 8001406:	fba2 1201 	umull	r1, r2, r2, r1
 800140a:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 800140e:	460a      	mov	r2, r1
 8001410:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8001414:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001418:	4413      	add	r3, r2
 800141a:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800141e:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8001422:	4622      	mov	r2, r4
 8001424:	462b      	mov	r3, r5
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	0099      	lsls	r1, r3, #2
 8001430:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001434:	0090      	lsls	r0, r2, #2
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4621      	mov	r1, r4
 800143c:	1851      	adds	r1, r2, r1
 800143e:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8001442:	4629      	mov	r1, r5
 8001444:	eb43 0101 	adc.w	r1, r3, r1
 8001448:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 800144c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001458:	f7ff fbf6 	bl	8000c48 <__aeabi_uldivmod>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f06f 0009 	mvn.w	r0, #9
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	1a80      	subs	r0, r0, r2
 800146a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800146e:	eb61 0303 	sbc.w	r3, r1, r3
 8001472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001476:	4bbd      	ldr	r3, [pc, #756]	@ (800176c <Set_Random_Motion_Values+0x454>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001480:	4413      	add	r3, r2
 8001482:	461a      	mov	r2, r3
 8001484:	4bb9      	ldr	r3, [pc, #740]	@ (800176c <Set_Random_Motion_Values+0x454>)
 8001486:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001488:	f009 ffb2 	bl	800b3f0 <rand>
 800148c:	4603      	mov	r3, r0
 800148e:	17da      	asrs	r2, r3, #31
 8001490:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8001494:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8001498:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800149c:	2200      	movs	r2, #0
 800149e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80014a2:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80014a6:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 80014aa:	462b      	mov	r3, r5
 80014ac:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 80014b0:	4642      	mov	r2, r8
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	464b      	mov	r3, r9
 80014b8:	4621      	mov	r1, r4
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	4622      	mov	r2, r4
 80014c2:	4641      	mov	r1, r8
 80014c4:	fba2 1201 	umull	r1, r2, r2, r1
 80014c8:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 80014cc:	460a      	mov	r2, r1
 80014ce:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 80014d2:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 80014d6:	4413      	add	r3, r2
 80014d8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 80014dc:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 80014e0:	4622      	mov	r2, r4
 80014e2:	462b      	mov	r3, r5
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	00d9      	lsls	r1, r3, #3
 80014ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014f2:	00d0      	lsls	r0, r2, #3
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4621      	mov	r1, r4
 80014fa:	1a51      	subs	r1, r2, r1
 80014fc:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8001500:	4629      	mov	r1, r5
 8001502:	eb63 0301 	sbc.w	r3, r3, r1
 8001506:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800150a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001516:	f7ff fb97 	bl	8000c48 <__aeabi_uldivmod>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	f112 010a 	adds.w	r1, r2, #10
 8001522:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001526:	f143 0300 	adc.w	r3, r3, #0
 800152a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800152e:	4b8f      	ldr	r3, [pc, #572]	@ (800176c <Set_Random_Motion_Values+0x454>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	461a      	mov	r2, r3
 8001534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001538:	4413      	add	r3, r2
 800153a:	461a      	mov	r2, r3
 800153c:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <Set_Random_Motion_Values+0x454>)
 800153e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001540:	f009 ff56 	bl	800b3f0 <rand>
 8001544:	4603      	mov	r3, r0
 8001546:	17da      	asrs	r2, r3, #31
 8001548:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800154c:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001550:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001554:	2200      	movs	r2, #0
 8001556:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800155a:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 800155e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8001562:	462b      	mov	r3, r5
 8001564:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 8001568:	4642      	mov	r2, r8
 800156a:	fb02 f203 	mul.w	r2, r2, r3
 800156e:	464b      	mov	r3, r9
 8001570:	4621      	mov	r1, r4
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	4413      	add	r3, r2
 8001578:	4622      	mov	r2, r4
 800157a:	4641      	mov	r1, r8
 800157c:	fba2 1201 	umull	r1, r2, r2, r1
 8001580:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001584:	460a      	mov	r2, r1
 8001586:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 800158a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 800158e:	4413      	add	r3, r2
 8001590:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001594:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8001598:	460b      	mov	r3, r1
 800159a:	18db      	adds	r3, r3, r3
 800159c:	663b      	str	r3, [r7, #96]	@ 0x60
 800159e:	4613      	mov	r3, r2
 80015a0:	eb42 0303 	adc.w	r3, r2, r3
 80015a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80015a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80015aa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f7ff fb49 	bl	8000c48 <__aeabi_uldivmod>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80015be:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80015c2:	f143 0300 	adc.w	r3, r3, #0
 80015c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015ca:	4b69      	ldr	r3, [pc, #420]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b65      	ldr	r3, [pc, #404]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 80015da:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80015dc:	f009 ff08 	bl	800b3f0 <rand>
 80015e0:	4603      	mov	r3, r0
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80015e8:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80015ec:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015f0:	2200      	movs	r2, #0
 80015f2:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80015f6:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80015fa:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 80015fe:	462b      	mov	r3, r5
 8001600:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001604:	4642      	mov	r2, r8
 8001606:	fb02 f203 	mul.w	r2, r2, r3
 800160a:	464b      	mov	r3, r9
 800160c:	4621      	mov	r1, r4
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	4622      	mov	r2, r4
 8001616:	4641      	mov	r1, r8
 8001618:	fba2 1201 	umull	r1, r2, r2, r1
 800161c:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8001620:	460a      	mov	r2, r1
 8001622:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001626:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800162a:	4413      	add	r3, r2
 800162c:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001630:	f04f 0000 	mov.w	r0, #0
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 800163c:	462b      	mov	r3, r5
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	4623      	mov	r3, r4
 8001642:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001646:	4623      	mov	r3, r4
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f7ff faf9 	bl	8000c48 <__aeabi_uldivmod>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	1a80      	subs	r0, r0, r2
 8001664:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001668:	eb61 0303 	sbc.w	r3, r1, r3
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001670:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	461a      	mov	r2, r3
 8001676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 8001680:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001682:	f009 feb5 	bl	800b3f0 <rand>
 8001686:	4603      	mov	r3, r0
 8001688:	17da      	asrs	r2, r3, #31
 800168a:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800168e:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8001692:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001696:	2200      	movs	r2, #0
 8001698:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800169c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80016a0:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 80016a4:	462b      	mov	r3, r5
 80016a6:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 80016aa:	4642      	mov	r2, r8
 80016ac:	fb02 f203 	mul.w	r2, r2, r3
 80016b0:	464b      	mov	r3, r9
 80016b2:	4621      	mov	r1, r4
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	4622      	mov	r2, r4
 80016bc:	4641      	mov	r1, r8
 80016be:	fba2 1201 	umull	r1, r2, r2, r1
 80016c2:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 80016c6:	460a      	mov	r2, r1
 80016c8:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 80016cc:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80016d0:	4413      	add	r3, r2
 80016d2:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80016d6:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 80016da:	4622      	mov	r2, r4
 80016dc:	462b      	mov	r3, r5
 80016de:	1891      	adds	r1, r2, r2
 80016e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80016e2:	415b      	adcs	r3, r3
 80016e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016ea:	4621      	mov	r1, r4
 80016ec:	1851      	adds	r1, r2, r1
 80016ee:	6539      	str	r1, [r7, #80]	@ 0x50
 80016f0:	4629      	mov	r1, r5
 80016f2:	eb43 0101 	adc.w	r1, r3, r1
 80016f6:	6579      	str	r1, [r7, #84]	@ 0x54
 80016f8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80016fc:	460b      	mov	r3, r1
 80016fe:	18db      	adds	r3, r3, r3
 8001700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001702:	4613      	mov	r3, r2
 8001704:	eb42 0303 	adc.w	r3, r2, r3
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800170a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f7ff fa95 	bl	8000c48 <__aeabi_uldivmod>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001726:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800172a:	f143 0300 	adc.w	r3, r3, #0
 800172e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	461a      	mov	r2, r3
 8001738:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800173c:	4413      	add	r3, r2
 800173e:	461a      	mov	r2, r3
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <Set_Random_Motion_Values+0x458>)
 8001742:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001744:	f009 fe54 	bl	800b3f0 <rand>
 8001748:	4603      	mov	r3, r0
 800174a:	17da      	asrs	r2, r3, #31
 800174c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001750:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001754:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001758:	2200      	movs	r2, #0
 800175a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800175e:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8001762:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001766:	462b      	mov	r3, r5
 8001768:	e004      	b.n	8001774 <Set_Random_Motion_Values+0x45c>
 800176a:	bf00      	nop
 800176c:	200003c4 	.word	0x200003c4
 8001770:	200003d0 	.word	0x200003d0
 8001774:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 8001778:	4642      	mov	r2, r8
 800177a:	fb02 f203 	mul.w	r2, r2, r3
 800177e:	464b      	mov	r3, r9
 8001780:	4621      	mov	r1, r4
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	4622      	mov	r2, r4
 800178a:	4641      	mov	r1, r8
 800178c:	fba2 1201 	umull	r1, r2, r2, r1
 8001790:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8001794:	460a      	mov	r2, r1
 8001796:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 800179a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800179e:	4413      	add	r3, r2
 80017a0:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80017a4:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 80017a8:	4622      	mov	r2, r4
 80017aa:	462b      	mov	r3, r5
 80017ac:	1891      	adds	r1, r2, r2
 80017ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80017b0:	415b      	adcs	r3, r3
 80017b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017b8:	4621      	mov	r1, r4
 80017ba:	1851      	adds	r1, r2, r1
 80017bc:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 80017c0:	4629      	mov	r1, r5
 80017c2:	eb43 0101 	adc.w	r1, r3, r1
 80017c6:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 80017ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 80017d6:	f7ff fa37 	bl	8000c48 <__aeabi_uldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	1cd1      	adds	r1, r2, #3
 80017e0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80017e4:	f143 0300 	adc.w	r3, r3, #0
 80017e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80017ec:	4be1      	ldr	r3, [pc, #900]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017f6:	4413      	add	r3, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4bde      	ldr	r3, [pc, #888]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 80017fc:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80017fe:	f009 fdf7 	bl	800b3f0 <rand>
 8001802:	4603      	mov	r3, r0
 8001804:	17da      	asrs	r2, r3, #31
 8001806:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800180a:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800180e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001818:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 800181c:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8001820:	462b      	mov	r3, r5
 8001822:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8001826:	4642      	mov	r2, r8
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	464b      	mov	r3, r9
 800182e:	4621      	mov	r1, r4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	4622      	mov	r2, r4
 8001838:	4641      	mov	r1, r8
 800183a:	fba2 1201 	umull	r1, r2, r2, r1
 800183e:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 8001842:	460a      	mov	r2, r1
 8001844:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001848:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800185e:	462b      	mov	r3, r5
 8001860:	0099      	lsls	r1, r3, #2
 8001862:	4623      	mov	r3, r4
 8001864:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001868:	4623      	mov	r3, r4
 800186a:	0098      	lsls	r0, r3, #2
 800186c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f7ff f9e8 	bl	8000c48 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	f06f 0002 	mvn.w	r0, #2
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	1a80      	subs	r0, r0, r2
 8001886:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 800188a:	eb61 0303 	sbc.w	r3, r1, r3
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001892:	4bb8      	ldr	r3, [pc, #736]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4bb4      	ldr	r3, [pc, #720]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 80018a2:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80018a4:	f009 fda4 	bl	800b3f0 <rand>
 80018a8:	4603      	mov	r3, r0
 80018aa:	17da      	asrs	r2, r3, #31
 80018ac:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80018b0:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80018b4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018b8:	2200      	movs	r2, #0
 80018ba:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80018be:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 80018c2:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 80018c6:	462b      	mov	r3, r5
 80018c8:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 80018cc:	4642      	mov	r2, r8
 80018ce:	fb02 f203 	mul.w	r2, r2, r3
 80018d2:	464b      	mov	r3, r9
 80018d4:	4621      	mov	r1, r4
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	4622      	mov	r2, r4
 80018de:	4641      	mov	r1, r8
 80018e0:	fba2 1201 	umull	r1, r2, r2, r1
 80018e4:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 80018e8:	460a      	mov	r2, r1
 80018ea:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 80018ee:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80018f2:	4413      	add	r3, r2
 80018f4:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80018f8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 80018fc:	4622      	mov	r2, r4
 80018fe:	462b      	mov	r3, r5
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0099      	lsls	r1, r3, #2
 800190a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800190e:	0090      	lsls	r0, r2, #2
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4621      	mov	r1, r4
 8001916:	1851      	adds	r1, r2, r1
 8001918:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 800191c:	4629      	mov	r1, r5
 800191e:	eb43 0101 	adc.w	r1, r3, r1
 8001922:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001926:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001932:	f7ff f989 	bl	8000c48 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	1cd1      	adds	r1, r2, #3
 800193c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001940:	f143 0300 	adc.w	r3, r3, #0
 8001944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001948:	4b8a      	ldr	r3, [pc, #552]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	461a      	mov	r2, r3
 800194e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4b87      	ldr	r3, [pc, #540]	@ (8001b74 <Set_Random_Motion_Values+0x85c>)
 8001958:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800195a:	f009 fd49 	bl	800b3f0 <rand>
 800195e:	4603      	mov	r3, r0
 8001960:	17da      	asrs	r2, r3, #31
 8001962:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001966:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 800196a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800196e:	2200      	movs	r2, #0
 8001970:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001974:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001978:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 800197c:	462b      	mov	r3, r5
 800197e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 8001982:	4642      	mov	r2, r8
 8001984:	fb02 f203 	mul.w	r2, r2, r3
 8001988:	464b      	mov	r3, r9
 800198a:	4621      	mov	r1, r4
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	4622      	mov	r2, r4
 8001994:	4641      	mov	r1, r8
 8001996:	fba2 1201 	umull	r1, r2, r2, r1
 800199a:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 80019a4:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80019ae:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 80019b2:	4622      	mov	r2, r4
 80019b4:	462b      	mov	r3, r5
 80019b6:	1891      	adds	r1, r2, r2
 80019b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019ba:	415b      	adcs	r3, r3
 80019bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019c2:	4621      	mov	r1, r4
 80019c4:	1851      	adds	r1, r2, r1
 80019c6:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 80019ca:	4629      	mov	r1, r5
 80019cc:	eb43 0101 	adc.w	r1, r3, r1
 80019d0:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 80019d4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 80019e0:	f7ff f932 	bl	8000c48 <__aeabi_uldivmod>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80019ec:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80019f0:	f143 0300 	adc.w	r3, r3, #0
 80019f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80019f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b5c      	ldr	r3, [pc, #368]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 8001a08:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001a0a:	f009 fcf1 	bl	800b3f0 <rand>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	17da      	asrs	r2, r3, #31
 8001a12:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001a16:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001a1a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001a24:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001a28:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001a32:	4642      	mov	r2, r8
 8001a34:	fb02 f203 	mul.w	r2, r2, r3
 8001a38:	464b      	mov	r3, r9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	4622      	mov	r2, r4
 8001a44:	4641      	mov	r1, r8
 8001a46:	fba2 1201 	umull	r1, r2, r2, r1
 8001a4a:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001a54:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001a58:	4413      	add	r3, r2
 8001a5a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001a5e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001a74:	0090      	lsls	r0, r2, #2
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1851      	adds	r1, r2, r1
 8001a7e:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001a82:	4629      	mov	r1, r5
 8001a84:	eb43 0101 	adc.w	r1, r3, r1
 8001a88:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001a8c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001a98:	f7ff f8d6 	bl	8000c48 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001aa4:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001aa6:	f143 0300 	adc.w	r3, r3, #0
 8001aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ab4:	4413      	add	r3, r2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 8001aba:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001abc:	f009 fc98 	bl	800b3f0 <rand>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	17da      	asrs	r2, r3, #31
 8001ac4:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001ac8:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001acc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001ad6:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001ada:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001ade:	462b      	mov	r3, r5
 8001ae0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001ae4:	4642      	mov	r2, r8
 8001ae6:	fb02 f203 	mul.w	r2, r2, r3
 8001aea:	464b      	mov	r3, r9
 8001aec:	4621      	mov	r1, r4
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	4622      	mov	r2, r4
 8001af6:	4641      	mov	r1, r8
 8001af8:	fba2 1201 	umull	r1, r2, r2, r1
 8001afc:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001b00:	460a      	mov	r2, r1
 8001b02:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001b06:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001b10:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001b14:	4622      	mov	r2, r4
 8001b16:	462b      	mov	r3, r5
 8001b18:	f04f 0000 	mov.w	r0, #0
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	00d9      	lsls	r1, r3, #3
 8001b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b26:	00d0      	lsls	r0, r2, #3
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	1a51      	subs	r1, r2, r1
 8001b30:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001b34:	4629      	mov	r1, r5
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001b3e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001b4a:	f7ff f87d 	bl	8000c48 <__aeabi_uldivmod>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001b56:	6739      	str	r1, [r7, #112]	@ 0x70
 8001b58:	f143 0300 	adc.w	r3, r3, #0
 8001b5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <Set_Random_Motion_Values+0x860>)
 8001b6c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8001b6e:	f000 bc37 	b.w	80023e0 <Set_Random_Motion_Values+0x10c8>
 8001b72:	bf00      	nop
 8001b74:	200003dc 	.word	0x200003dc
 8001b78:	200003e8 	.word	0x200003e8
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001b7c:	f009 fc38 	bl	800b3f0 <rand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	17da      	asrs	r2, r3, #31
 8001b84:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001b88:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001b8c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b90:	2200      	movs	r2, #0
 8001b92:	469a      	mov	sl, r3
 8001b94:	4693      	mov	fp, r2
 8001b96:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	fb0a f203 	mul.w	r2, sl, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	fb03 f30b 	mul.w	r3, r3, fp
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4602      	mov	r2, r0
 8001baa:	fba2 450a 	umull	r4, r5, r2, sl
 8001bae:	442b      	add	r3, r5
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	1891      	adds	r1, r2, r2
 8001bb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001bba:	415b      	adcs	r3, r3
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc2:	1911      	adds	r1, r2, r4
 8001bc4:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001bc8:	416b      	adcs	r3, r5
 8001bca:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001bce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001bda:	f7ff f835 	bl	8000c48 <__aeabi_uldivmod>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	f06f 0009 	mvn.w	r0, #9
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	1a80      	subs	r0, r0, r2
 8001bec:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001bf0:	eb61 0303 	sbc.w	r3, r1, r3
 8001bf4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001bf8:	4beb      	ldr	r3, [pc, #940]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4be8      	ldr	r3, [pc, #928]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001c08:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001c0a:	f009 fbf1 	bl	800b3f0 <rand>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	17da      	asrs	r2, r3, #31
 8001c12:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001c16:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001c1a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001c24:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001c28:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001c32:	4642      	mov	r2, r8
 8001c34:	fb02 f203 	mul.w	r2, r2, r3
 8001c38:	464b      	mov	r3, r9
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	4622      	mov	r2, r4
 8001c44:	4641      	mov	r1, r8
 8001c46:	fba2 1201 	umull	r1, r2, r2, r1
 8001c4a:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001c4e:	460a      	mov	r2, r1
 8001c50:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001c54:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001c58:	4413      	add	r3, r2
 8001c5a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001c5e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001c62:	4622      	mov	r2, r4
 8001c64:	462b      	mov	r3, r5
 8001c66:	f04f 0000 	mov.w	r0, #0
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	0099      	lsls	r1, r3, #2
 8001c70:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c74:	0090      	lsls	r0, r2, #2
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	1851      	adds	r1, r2, r1
 8001c7e:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001c82:	4629      	mov	r1, r5
 8001c84:	eb43 0101 	adc.w	r1, r3, r1
 8001c88:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001c8c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001c98:	f7fe ffd6 	bl	8000c48 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	f112 010a 	adds.w	r1, r2, #10
 8001ca4:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001ca8:	f143 0300 	adc.w	r3, r3, #0
 8001cac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cb0:	4bbd      	ldr	r3, [pc, #756]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001cba:	4413      	add	r3, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4bba      	ldr	r3, [pc, #744]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001cc0:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001cc2:	f009 fb95 	bl	800b3f0 <rand>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	17da      	asrs	r2, r3, #31
 8001cca:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001cce:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001cd2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001cdc:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001ce0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001cea:	4642      	mov	r2, r8
 8001cec:	fb02 f203 	mul.w	r2, r2, r3
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	fba2 1201 	umull	r1, r2, r2, r1
 8001d02:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001d06:	460a      	mov	r2, r1
 8001d08:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001d0c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001d10:	4413      	add	r3, r2
 8001d12:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001d16:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	00d9      	lsls	r1, r3, #3
 8001d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d2c:	00d0      	lsls	r0, r2, #3
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d40:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001d44:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001d50:	f7fe ff7a 	bl	8000c48 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	f06f 0009 	mvn.w	r0, #9
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	1a80      	subs	r0, r0, r2
 8001d62:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001d66:	eb61 0303 	sbc.w	r3, r1, r3
 8001d6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d78:	4413      	add	r3, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa8 <Set_Random_Motion_Values+0xc90>)
 8001d7e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001d80:	f009 fb36 	bl	800b3f0 <rand>
 8001d84:	4603      	mov	r3, r0
 8001d86:	17da      	asrs	r2, r3, #31
 8001d88:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001d8c:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001d90:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d94:	2200      	movs	r2, #0
 8001d96:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d9a:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001d9e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001da2:	462b      	mov	r3, r5
 8001da4:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001da8:	4642      	mov	r2, r8
 8001daa:	fb02 f203 	mul.w	r2, r2, r3
 8001dae:	464b      	mov	r3, r9
 8001db0:	4621      	mov	r1, r4
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	4622      	mov	r2, r4
 8001dba:	4641      	mov	r1, r8
 8001dbc:	fba2 1201 	umull	r1, r2, r2, r1
 8001dc0:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001dca:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001dce:	4413      	add	r3, r2
 8001dd0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001dd4:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001dd8:	460b      	mov	r3, r1
 8001dda:	18db      	adds	r3, r3, r3
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dde:	4613      	mov	r3, r2
 8001de0:	eb42 0303 	adc.w	r3, r2, r3
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dea:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f7fe ff29 	bl	8000c48 <__aeabi_uldivmod>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001e02:	1a80      	subs	r0, r0, r2
 8001e04:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001e08:	eb61 0303 	sbc.w	r3, r1, r3
 8001e0c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e1a:	4413      	add	r3, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b63      	ldr	r3, [pc, #396]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001e20:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001e22:	f009 fae5 	bl	800b3f0 <rand>
 8001e26:	4603      	mov	r3, r0
 8001e28:	17da      	asrs	r2, r3, #31
 8001e2a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001e2e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001e32:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001e3c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001e40:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001e44:	462b      	mov	r3, r5
 8001e46:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001e4a:	4642      	mov	r2, r8
 8001e4c:	fb02 f203 	mul.w	r2, r2, r3
 8001e50:	464b      	mov	r3, r9
 8001e52:	4621      	mov	r1, r4
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	fba2 1201 	umull	r1, r2, r2, r1
 8001e62:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001e66:	460a      	mov	r2, r1
 8001e68:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001e6c:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001e70:	4413      	add	r3, r2
 8001e72:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001e82:	462b      	mov	r3, r5
 8001e84:	0099      	lsls	r1, r3, #2
 8001e86:	4623      	mov	r3, r4
 8001e88:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	0098      	lsls	r0, r3, #2
 8001e90:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	f7fe fed6 	bl	8000c48 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001ea4:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001ea8:	f143 0300 	adc.w	r3, r3, #0
 8001eac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001eba:	4413      	add	r3, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001ec0:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001ec2:	f009 fa95 	bl	800b3f0 <rand>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	17da      	asrs	r2, r3, #31
 8001eca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001ece:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001ed2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001edc:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001ee0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001eea:	4642      	mov	r2, r8
 8001eec:	fb02 f203 	mul.w	r2, r2, r3
 8001ef0:	464b      	mov	r3, r9
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	4622      	mov	r2, r4
 8001efc:	4641      	mov	r1, r8
 8001efe:	fba2 1201 	umull	r1, r2, r2, r1
 8001f02:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001f06:	460a      	mov	r2, r1
 8001f08:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001f0c:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001f10:	4413      	add	r3, r2
 8001f12:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001f16:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	1891      	adds	r1, r2, r2
 8001f20:	6239      	str	r1, [r7, #32]
 8001f22:	415b      	adcs	r3, r3
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	1851      	adds	r1, r2, r1
 8001f2e:	61b9      	str	r1, [r7, #24]
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb43 0101 	adc.w	r1, r3, r1
 8001f36:	61f9      	str	r1, [r7, #28]
 8001f38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	18db      	adds	r3, r3, r3
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4613      	mov	r3, r2
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4621      	mov	r1, r4
 8001f52:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f7fe fe75 	bl	8000c48 <__aeabi_uldivmod>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001f66:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6a:	1a80      	subs	r0, r0, r2
 8001f6c:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8001f70:	eb61 0303 	sbc.w	r3, r1, r3
 8001f74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001f82:	4413      	add	r3, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <Set_Random_Motion_Values+0xc94>)
 8001f88:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001f8a:	f009 fa31 	bl	800b3f0 <rand>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	17da      	asrs	r2, r3, #31
 8001f92:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001f96:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001f9a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001fa4:	e004      	b.n	8001fb0 <Set_Random_Motion_Values+0xc98>
 8001fa6:	bf00      	nop
 8001fa8:	200003c4 	.word	0x200003c4
 8001fac:	200003d0 	.word	0x200003d0
 8001fb0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001fb4:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001fb8:	462b      	mov	r3, r5
 8001fba:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001fbe:	4642      	mov	r2, r8
 8001fc0:	fb02 f203 	mul.w	r2, r2, r3
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	4622      	mov	r2, r4
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	fba2 1201 	umull	r1, r2, r2, r1
 8001fd6:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001fda:	460a      	mov	r2, r1
 8001fdc:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001fe0:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001fea:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001fee:	4622      	mov	r2, r4
 8001ff0:	462b      	mov	r3, r5
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	00d9      	lsls	r1, r3, #3
 8001ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002000:	00d0      	lsls	r0, r2, #3
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4621      	mov	r1, r4
 8002008:	1a51      	subs	r1, r2, r1
 800200a:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 800200e:	4629      	mov	r1, r5
 8002010:	eb63 0301 	sbc.w	r3, r3, r1
 8002014:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8002018:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8002024:	f7fe fe10 	bl	8000c48 <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	f06f 0002 	mvn.w	r0, #2
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	1a80      	subs	r0, r0, r2
 8002036:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 800203a:	eb61 0303 	sbc.w	r3, r1, r3
 800203e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002042:	4bea      	ldr	r3, [pc, #936]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800204c:	4413      	add	r3, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4be6      	ldr	r3, [pc, #920]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 8002052:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8002054:	f009 f9cc 	bl	800b3f0 <rand>
 8002058:	4603      	mov	r3, r0
 800205a:	17da      	asrs	r2, r3, #31
 800205c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002060:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8002064:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800206e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002072:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8002076:	462b      	mov	r3, r5
 8002078:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 800207c:	4642      	mov	r2, r8
 800207e:	fb02 f203 	mul.w	r2, r2, r3
 8002082:	464b      	mov	r3, r9
 8002084:	4621      	mov	r1, r4
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	4622      	mov	r2, r4
 800208e:	4641      	mov	r1, r8
 8002090:	fba2 1201 	umull	r1, r2, r2, r1
 8002094:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8002098:	460a      	mov	r2, r1
 800209a:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 800209e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80020a2:	4413      	add	r3, r2
 80020a4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80020a8:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 80020ac:	4622      	mov	r2, r4
 80020ae:	462b      	mov	r3, r5
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	00d9      	lsls	r1, r3, #3
 80020ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020be:	00d0      	lsls	r0, r2, #3
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4621      	mov	r1, r4
 80020c6:	1851      	adds	r1, r2, r1
 80020c8:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb43 0101 	adc.w	r1, r3, r1
 80020d2:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 80020d6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80020e2:	f7fe fdb1 	bl	8000c48 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	1cd1      	adds	r1, r2, #3
 80020ec:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 80020f0:	f143 0300 	adc.w	r3, r3, #0
 80020f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80020f8:	4bbc      	ldr	r3, [pc, #752]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002102:	4413      	add	r3, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4bb9      	ldr	r3, [pc, #740]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 8002108:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800210a:	f009 f971 	bl	800b3f0 <rand>
 800210e:	4603      	mov	r3, r0
 8002110:	17da      	asrs	r2, r3, #31
 8002112:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002116:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800211a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002124:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002128:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 800212c:	462b      	mov	r3, r5
 800212e:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8002132:	4642      	mov	r2, r8
 8002134:	fb02 f203 	mul.w	r2, r2, r3
 8002138:	464b      	mov	r3, r9
 800213a:	4621      	mov	r1, r4
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	4622      	mov	r2, r4
 8002144:	4641      	mov	r1, r8
 8002146:	fba2 1201 	umull	r1, r2, r2, r1
 800214a:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 800214e:	460a      	mov	r2, r1
 8002150:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8002154:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8002158:	4413      	add	r3, r2
 800215a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800215e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	1891      	adds	r1, r2, r2
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	415b      	adcs	r3, r3
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002172:	4621      	mov	r1, r4
 8002174:	1851      	adds	r1, r2, r1
 8002176:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 800217a:	4629      	mov	r1, r5
 800217c:	eb43 0101 	adc.w	r1, r3, r1
 8002180:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8002184:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002190:	f7fe fd5a 	bl	8000c48 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	f06f 0002 	mvn.w	r0, #2
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	1a80      	subs	r0, r0, r2
 80021a2:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 80021a6:	eb61 0303 	sbc.w	r3, r1, r3
 80021aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80021ae:	4b8f      	ldr	r3, [pc, #572]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021b8:	4413      	add	r3, r2
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b8b      	ldr	r3, [pc, #556]	@ (80023ec <Set_Random_Motion_Values+0x10d4>)
 80021be:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80021c0:	f009 f916 	bl	800b3f0 <rand>
 80021c4:	4603      	mov	r3, r0
 80021c6:	17da      	asrs	r2, r3, #31
 80021c8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80021cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80021d0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80021da:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80021de:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 80021e2:	462b      	mov	r3, r5
 80021e4:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 80021e8:	4642      	mov	r2, r8
 80021ea:	fb02 f203 	mul.w	r2, r2, r3
 80021ee:	464b      	mov	r3, r9
 80021f0:	4621      	mov	r1, r4
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	4622      	mov	r2, r4
 80021fa:	4641      	mov	r1, r8
 80021fc:	fba2 1201 	umull	r1, r2, r2, r1
 8002200:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8002204:	460a      	mov	r2, r1
 8002206:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 800220a:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800220e:	4413      	add	r3, r2
 8002210:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8002214:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8002218:	4622      	mov	r2, r4
 800221a:	462b      	mov	r3, r5
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	00d9      	lsls	r1, r3, #3
 8002226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800222a:	00d0      	lsls	r0, r2, #3
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4621      	mov	r1, r4
 8002232:	1a51      	subs	r1, r2, r1
 8002234:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8002238:	4629      	mov	r1, r5
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002242:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800224e:	f7fe fcfb 	bl	8000c48 <__aeabi_uldivmod>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 800225a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 800225e:	f143 0300 	adc.w	r3, r3, #0
 8002262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002266:	4b62      	ldr	r3, [pc, #392]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002270:	4413      	add	r3, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 8002276:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002278:	f009 f8ba 	bl	800b3f0 <rand>
 800227c:	4603      	mov	r3, r0
 800227e:	17da      	asrs	r2, r3, #31
 8002280:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002284:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8002288:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800228c:	2200      	movs	r2, #0
 800228e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002292:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002296:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800229a:	462b      	mov	r3, r5
 800229c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 80022a0:	4642      	mov	r2, r8
 80022a2:	fb02 f203 	mul.w	r2, r2, r3
 80022a6:	464b      	mov	r3, r9
 80022a8:	4621      	mov	r1, r4
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	4622      	mov	r2, r4
 80022b2:	4641      	mov	r1, r8
 80022b4:	fba2 1201 	umull	r1, r2, r2, r1
 80022b8:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 80022bc:	460a      	mov	r2, r1
 80022be:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 80022c2:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 80022c6:	4413      	add	r3, r2
 80022c8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80022cc:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 80022d0:	4622      	mov	r2, r4
 80022d2:	462b      	mov	r3, r5
 80022d4:	1891      	adds	r1, r2, r2
 80022d6:	6039      	str	r1, [r7, #0]
 80022d8:	415b      	adcs	r3, r3
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e0:	4621      	mov	r1, r4
 80022e2:	1851      	adds	r1, r2, r1
 80022e4:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 80022e8:	4629      	mov	r1, r5
 80022ea:	eb43 0101 	adc.w	r1, r3, r1
 80022ee:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 80022f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80022fe:	f7fe fca3 	bl	8000c48 <__aeabi_uldivmod>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 800230a:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800230e:	f143 0300 	adc.w	r3, r3, #0
 8002312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	461a      	mov	r2, r3
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 8002326:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8002328:	f009 f862 	bl	800b3f0 <rand>
 800232c:	4603      	mov	r3, r0
 800232e:	17da      	asrs	r2, r3, #31
 8002330:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002334:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8002338:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800233c:	2200      	movs	r2, #0
 800233e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002342:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002346:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800234a:	462b      	mov	r3, r5
 800234c:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8002350:	4642      	mov	r2, r8
 8002352:	fb02 f203 	mul.w	r2, r2, r3
 8002356:	464b      	mov	r3, r9
 8002358:	4621      	mov	r1, r4
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	4622      	mov	r2, r4
 8002362:	4641      	mov	r1, r8
 8002364:	fba2 1201 	umull	r1, r2, r2, r1
 8002368:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 800236c:	460a      	mov	r2, r1
 800236e:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8002372:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8002376:	4413      	add	r3, r2
 8002378:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800237c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8002380:	4622      	mov	r2, r4
 8002382:	462b      	mov	r3, r5
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	0099      	lsls	r1, r3, #2
 800238e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002392:	0090      	lsls	r0, r2, #2
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4621      	mov	r1, r4
 800239a:	1851      	adds	r1, r2, r1
 800239c:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80023a0:	4629      	mov	r1, r5
 80023a2:	eb43 0101 	adc.w	r1, r3, r1
 80023a6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80023aa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80023b6:	f7fe fc47 	bl	8000c48 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	f112 010a 	adds.w	r1, r2, #10
 80023c2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80023c6:	f143 0300 	adc.w	r3, r3, #0
 80023ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023d8:	4413      	add	r3, r2
 80023da:	461a      	mov	r2, r3
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <Set_Random_Motion_Values+0x10d8>)
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ec:	200003dc 	.word	0x200003dc
 80023f0:	200003e8 	.word	0x200003e8

080023f4 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80023f8:	4b6e      	ldr	r3, [pc, #440]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b6e      	ldr	r3, [pc, #440]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 80023fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002402:	11d9      	asrs	r1, r3, #7
 8002404:	17d3      	asrs	r3, r2, #31
 8002406:	1acb      	subs	r3, r1, r3
 8002408:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <Reset_Motion_Values+0x2a>
 8002416:	4b67      	ldr	r3, [pc, #412]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	425b      	negs	r3, r3
 800241c:	e000      	b.n	8002420 <Reset_Motion_Values+0x2c>
 800241e:	230a      	movs	r3, #10
 8002420:	4a64      	ldr	r2, [pc, #400]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002422:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8002424:	4b63      	ldr	r3, [pc, #396]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4b63      	ldr	r3, [pc, #396]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 800242a:	fb83 1302 	smull	r1, r3, r3, r2
 800242e:	11d9      	asrs	r1, r3, #7
 8002430:	17d3      	asrs	r3, r2, #31
 8002432:	1acb      	subs	r3, r1, r3
 8002434:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <Reset_Motion_Values+0x56>
 8002442:	4b5c      	ldr	r3, [pc, #368]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	425b      	negs	r3, r3
 8002448:	e001      	b.n	800244e <Reset_Motion_Values+0x5a>
 800244a:	f06f 0309 	mvn.w	r3, #9
 800244e:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002450:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8002452:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	4b58      	ldr	r3, [pc, #352]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 8002458:	fb83 1302 	smull	r1, r3, r3, r2
 800245c:	11d9      	asrs	r1, r3, #7
 800245e:	17d3      	asrs	r3, r2, #31
 8002460:	1acb      	subs	r3, r1, r3
 8002462:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <Reset_Motion_Values+0x84>
 8002470:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	425b      	negs	r3, r3
 8002476:	e000      	b.n	800247a <Reset_Motion_Values+0x86>
 8002478:	230a      	movs	r3, #10
 800247a:	4a4e      	ldr	r2, [pc, #312]	@ (80025b4 <Reset_Motion_Values+0x1c0>)
 800247c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800247e:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b4d      	ldr	r3, [pc, #308]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 8002484:	fb83 1302 	smull	r1, r3, r3, r2
 8002488:	11d9      	asrs	r1, r3, #7
 800248a:	17d3      	asrs	r3, r2, #31
 800248c:	1acb      	subs	r3, r1, r3
 800248e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <Reset_Motion_Values+0xb0>
 800249c:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	425b      	negs	r3, r3
 80024a2:	e000      	b.n	80024a6 <Reset_Motion_Values+0xb2>
 80024a4:	2364      	movs	r3, #100	@ 0x64
 80024a6:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024a8:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80024aa:	4b44      	ldr	r3, [pc, #272]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b42      	ldr	r3, [pc, #264]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 80024b0:	fb83 1302 	smull	r1, r3, r3, r2
 80024b4:	11d9      	asrs	r1, r3, #7
 80024b6:	17d3      	asrs	r3, r2, #31
 80024b8:	1acb      	subs	r3, r1, r3
 80024ba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <Reset_Motion_Values+0xdc>
 80024c8:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	425b      	negs	r3, r3
 80024ce:	e001      	b.n	80024d4 <Reset_Motion_Values+0xe0>
 80024d0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80024d4:	4a39      	ldr	r2, [pc, #228]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024d6:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80024d8:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b36      	ldr	r3, [pc, #216]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 80024de:	fb83 1302 	smull	r1, r3, r3, r2
 80024e2:	11d9      	asrs	r1, r3, #7
 80024e4:	17d3      	asrs	r3, r2, #31
 80024e6:	1acb      	subs	r3, r1, r3
 80024e8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <Reset_Motion_Values+0x10a>
 80024f6:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	425b      	negs	r3, r3
 80024fc:	e000      	b.n	8002500 <Reset_Motion_Values+0x10c>
 80024fe:	2364      	movs	r3, #100	@ 0x64
 8002500:	4a2e      	ldr	r2, [pc, #184]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 8002502:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8002504:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 800250a:	fb83 1302 	smull	r1, r3, r3, r2
 800250e:	11d9      	asrs	r1, r3, #7
 8002510:	17d3      	asrs	r3, r2, #31
 8002512:	1acb      	subs	r3, r1, r3
 8002514:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <Reset_Motion_Values+0x136>
 8002522:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	425b      	negs	r3, r3
 8002528:	e000      	b.n	800252c <Reset_Motion_Values+0x138>
 800252a:	2303      	movs	r3, #3
 800252c:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 800252e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 8002536:	fb83 1302 	smull	r1, r3, r3, r2
 800253a:	11d9      	asrs	r1, r3, #7
 800253c:	17d3      	asrs	r3, r2, #31
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <Reset_Motion_Values+0x162>
 800254e:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	425b      	negs	r3, r3
 8002554:	e001      	b.n	800255a <Reset_Motion_Values+0x166>
 8002556:	f06f 0302 	mvn.w	r3, #2
 800255a:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 800255c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <Reset_Motion_Values+0x1c8>)
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <Reset_Motion_Values+0x1c4>)
 8002564:	fb83 1302 	smull	r1, r3, r3, r2
 8002568:	11d9      	asrs	r1, r3, #7
 800256a:	17d3      	asrs	r3, r2, #31
 800256c:	1acb      	subs	r3, r1, r3
 800256e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <Reset_Motion_Values+0x190>
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	425b      	negs	r3, r3
 8002582:	e000      	b.n	8002586 <Reset_Motion_Values+0x192>
 8002584:	2303      	movs	r3, #3
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <Reset_Motion_Values+0x1cc>)
 8002588:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	425b      	negs	r3, r3
 8002590:	4a0c      	ldr	r2, [pc, #48]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 8002592:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	425b      	negs	r3, r3
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 800259c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	425b      	negs	r3, r3
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <Reset_Motion_Values+0x1d0>)
 80025a6:	6093      	str	r3, [r2, #8]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200003c4 	.word	0x200003c4
 80025b8:	10624dd3 	.word	0x10624dd3
 80025bc:	200003d0 	.word	0x200003d0
 80025c0:	200003dc 	.word	0x200003dc
 80025c4:	200003e8 	.word	0x200003e8

080025c8 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80025d2:	f107 0410 	add.w	r4, r7, #16
 80025d6:	f107 0215 	add.w	r2, r7, #21
 80025da:	f107 0112 	add.w	r1, r7, #18
 80025de:	f107 0016 	add.w	r0, r7, #22
 80025e2:	f107 030e 	add.w	r3, r7, #14
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4623      	mov	r3, r4
 80025ea:	f008 fa6d 	bl	800aac8 <hci_read_local_version_information>
 80025ee:	4603      	mov	r3, r0
 80025f0:	75fb      	strb	r3, [r7, #23]
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d124      	bne.n	8002642 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 80025f8:	8a7b      	ldrh	r3, [r7, #18]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8002604:	8a7b      	ldrh	r3, [r7, #18]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b29a      	uxth	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b21a      	sxth	r2, r3
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	b21b      	sxth	r3, r3
 8002618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261c:	b21b      	sxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b21b      	sxth	r3, r3
 8002622:	b29a      	uxth	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b21a      	sxth	r2, r3
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b21b      	sxth	r3, r3
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21b      	sxth	r3, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd90      	pop	{r4, r7, pc}

0800264c <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <BSP_PB_Callback+0x1c>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	2000020e 	.word	0x2000020e

0800266c <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	4603      	mov	r3, r0
 8002680:	80bb      	strh	r3, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	71bb      	strb	r3, [r7, #6]
 8002686:	4613      	mov	r3, r2
 8002688:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <hci_le_connection_complete_event+0x38>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 8002690:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <hci_le_connection_complete_event+0x3c>)
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	8013      	strh	r3, [r2, #0]

  BSP_LED_Off(LED2); //activity led
 8002696:	2000      	movs	r0, #0
 8002698:	f001 fb90 	bl	8003dbc <BSP_LED_Off>
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd90      	pop	{r4, r7, pc}
 80026a4:	200003c0 	.word	0x200003c0
 80026a8:	200003bc 	.word	0x200003bc

080026ac <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	460b      	mov	r3, r1
 80026b8:	80bb      	strh	r3, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <hci_disconnection_complete_event+0x34>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again */
  set_connectable = TRUE;
 80026c4:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <hci_disconnection_complete_event+0x38>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
  connection_handle =0;
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <hci_disconnection_complete_event+0x3c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected\r\n");

  BSP_LED_On(LED2); //activity led
 80026d0:	2000      	movs	r0, #0
 80026d2:	f001 fb5d 	bl	8003d90 <BSP_LED_On>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200003c0 	.word	0x200003c0
 80026e4:	20000001 	.word	0x20000001
 80026e8:	200003bc 	.word	0x200003bc

080026ec <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
 80026f6:	460b      	mov	r3, r1
 80026f8:	80bb      	strh	r3, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fb8d 	bl	8002e20 <Read_Request_CB>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <Sensor_Init>:

void Sensor_Init(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

    hts221_ctx.write_reg = hts221_platform_write;
 8002714:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <Sensor_Init+0x78>)
 8002716:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <Sensor_Init+0x7c>)
 8002718:	601a      	str	r2, [r3, #0]
    hts221_ctx.read_reg = hts221_platform_read;
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <Sensor_Init+0x78>)
 800271c:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <Sensor_Init+0x80>)
 800271e:	605a      	str	r2, [r3, #4]
    hts221_ctx.mdelay = HAL_Delay;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <Sensor_Init+0x78>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <Sensor_Init+0x84>)
 8002724:	609a      	str	r2, [r3, #8]
    hts221_ctx.handle = &hi2c1;
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <Sensor_Init+0x78>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	@ (8002798 <Sensor_Init+0x88>)
 800272a:	60da      	str	r2, [r3, #12]


    lps22hh_ctx.write_reg = lps22hh_platform_write;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <Sensor_Init+0x8c>)
 800272e:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <Sensor_Init+0x90>)
 8002730:	601a      	str	r2, [r3, #0]
    lps22hh_ctx.read_reg = lps22hh_platform_read;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <Sensor_Init+0x8c>)
 8002734:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <Sensor_Init+0x94>)
 8002736:	605a      	str	r2, [r3, #4]
    lps22hh_ctx.mdelay = HAL_Delay;
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <Sensor_Init+0x8c>)
 800273a:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <Sensor_Init+0x84>)
 800273c:	609a      	str	r2, [r3, #8]
    lps22hh_ctx.handle = &hi2c1;
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <Sensor_Init+0x8c>)
 8002740:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <Sensor_Init+0x88>)
 8002742:	60da      	str	r2, [r3, #12]


    hts221_power_on_set(&hts221_ctx, PROPERTY_ENABLE);
 8002744:	2101      	movs	r1, #1
 8002746:	4810      	ldr	r0, [pc, #64]	@ (8002788 <Sensor_Init+0x78>)
 8002748:	f005 fd5d 	bl	8008206 <hts221_power_on_set>
    hts221_block_data_update_set(&hts221_ctx, PROPERTY_ENABLE);
 800274c:	2101      	movs	r1, #1
 800274e:	480e      	ldr	r0, [pc, #56]	@ (8002788 <Sensor_Init+0x78>)
 8002750:	f005 fd11 	bl	8008176 <hts221_block_data_update_set>
    hts221_data_rate_set(&hts221_ctx, HTS221_ODR_1Hz);
 8002754:	2101      	movs	r1, #1
 8002756:	480c      	ldr	r0, [pc, #48]	@ (8002788 <Sensor_Init+0x78>)
 8002758:	f005 fce7 	bl	800812a <hts221_data_rate_set>


    lps22hh_reset_set(&lps22hh_ctx, PROPERTY_ENABLE);
 800275c:	2101      	movs	r1, #1
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <Sensor_Init+0x8c>)
 8002760:	f005 ff25 	bl	80085ae <lps22hh_reset_set>
    do {
        lps22hh_reset_get(&lps22hh_ctx, &lps22hh_rst);
 8002764:	4910      	ldr	r1, [pc, #64]	@ (80027a8 <Sensor_Init+0x98>)
 8002766:	480d      	ldr	r0, [pc, #52]	@ (800279c <Sensor_Init+0x8c>)
 8002768:	f005 ff47 	bl	80085fa <lps22hh_reset_get>
    } while (lps22hh_rst);
 800276c:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <Sensor_Init+0x98>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f7      	bne.n	8002764 <Sensor_Init+0x54>

    lps22hh_block_data_update_set(&lps22hh_ctx, PROPERTY_ENABLE);
 8002774:	2101      	movs	r1, #1
 8002776:	4809      	ldr	r0, [pc, #36]	@ (800279c <Sensor_Init+0x8c>)
 8002778:	f005 fe5a 	bl	8008430 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&lps22hh_ctx, LPS22HH_10_Hz_LOW_NOISE);
 800277c:	2112      	movs	r1, #18
 800277e:	4807      	ldr	r0, [pc, #28]	@ (800279c <Sensor_Init+0x8c>)
 8002780:	f005 fe7c 	bl	800847c <lps22hh_data_rate_set>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000210 	.word	0x20000210
 800278c:	080028a9 	.word	0x080028a9
 8002790:	080028eb 	.word	0x080028eb
 8002794:	08004215 	.word	0x08004215
 8002798:	20000368 	.word	0x20000368
 800279c:	20000220 	.word	0x20000220
 80027a0:	0800292d 	.word	0x0800292d
 80027a4:	08002967 	.word	0x08002967
 80027a8:	2000020f 	.word	0x2000020f

080027ac <Read_Humidity_HTS221>:

float Read_Humidity_HTS221(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
    int16_t raw;
    lin_t lin_hum;
    float hum;

    hts221_hum_adc_point_0_get(&hts221_ctx, &lin_hum.x0);
 80027b2:	463b      	mov	r3, r7
 80027b4:	4619      	mov	r1, r3
 80027b6:	4820      	ldr	r0, [pc, #128]	@ (8002838 <Read_Humidity_HTS221+0x8c>)
 80027b8:	f005 fd87 	bl	80082ca <hts221_hum_adc_point_0_get>
    hts221_hum_rh_point_0_get(&hts221_ctx, &lin_hum.y0);
 80027bc:	463b      	mov	r3, r7
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	481d      	ldr	r0, [pc, #116]	@ (8002838 <Read_Humidity_HTS221+0x8c>)
 80027c4:	f005 fd45 	bl	8008252 <hts221_hum_rh_point_0_get>
    hts221_hum_adc_point_1_get(&hts221_ctx, &lin_hum.x1);
 80027c8:	463b      	mov	r3, r7
 80027ca:	3308      	adds	r3, #8
 80027cc:	4619      	mov	r1, r3
 80027ce:	481a      	ldr	r0, [pc, #104]	@ (8002838 <Read_Humidity_HTS221+0x8c>)
 80027d0:	f005 fd9d 	bl	800830e <hts221_hum_adc_point_1_get>
    hts221_hum_rh_point_1_get(&hts221_ctx, &lin_hum.y1);
 80027d4:	463b      	mov	r3, r7
 80027d6:	330c      	adds	r3, #12
 80027d8:	4619      	mov	r1, r3
 80027da:	4817      	ldr	r0, [pc, #92]	@ (8002838 <Read_Humidity_HTS221+0x8c>)
 80027dc:	f005 fd57 	bl	800828e <hts221_hum_rh_point_1_get>

    hts221_humidity_raw_get(&hts221_ctx, &raw);
 80027e0:	f107 0312 	add.w	r3, r7, #18
 80027e4:	4619      	mov	r1, r3
 80027e6:	4814      	ldr	r0, [pc, #80]	@ (8002838 <Read_Humidity_HTS221+0x8c>)
 80027e8:	f005 fceb 	bl	80081c2 <hts221_humidity_raw_get>
    hum = linear_interpolation(&lin_hum, raw);
 80027ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027f0:	463b      	mov	r3, r7
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fbe6 	bl	8000fc6 <linear_interpolation>
 80027fa:	ed87 0a05 	vstr	s0, [r7, #20]

    if (hum < 0) {
 80027fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	d502      	bpl.n	8002812 <Read_Humidity_HTS221+0x66>
    	hum = 0;
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
    }
    if (hum > 100) {
 8002812:	edd7 7a05 	vldr	s15, [r7, #20]
 8002816:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800283c <Read_Humidity_HTS221+0x90>
 800281a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	dd01      	ble.n	8002828 <Read_Humidity_HTS221+0x7c>
    	hum = 100;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <Read_Humidity_HTS221+0x94>)
 8002826:	617b      	str	r3, [r7, #20]
    }

    return hum;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	ee07 3a90 	vmov	s15, r3
}
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000210 	.word	0x20000210
 800283c:	42c80000 	.word	0x42c80000
 8002840:	42c80000 	.word	0x42c80000

08002844 <Read_Pressure_LPS22HH>:
    temp = ((lin_temp.y1 - lin_temp.y0) * raw + (lin_temp.x1 * lin_temp.y0 - lin_temp.x0 * lin_temp.y1)) / (lin_temp.x1 - lin_temp.x0);

    return temp;
}

float Read_Pressure_LPS22HH(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
    uint32_t raw;
    float pressure;

    lps22hh_pressure_raw_get(&lps22hh_ctx, &raw);
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4808      	ldr	r0, [pc, #32]	@ (8002870 <Read_Pressure_LPS22HH+0x2c>)
 8002850:	f005 fe62 	bl	8008518 <lps22hh_pressure_raw_get>
    pressure = lps22hh_from_lsb_to_hpa(raw);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f005 fdb8 	bl	80083cc <lps22hh_from_lsb_to_hpa>
 800285c:	ed87 0a01 	vstr	s0, [r7, #4]
    return pressure;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	ee07 3a90 	vmov	s15, r3
}
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000220 	.word	0x20000220

08002874 <Read_Temperature_LPS22HH>:

float Read_Temperature_LPS22HH(void) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
    int16_t raw;
    float temp;

    lps22hh_temperature_raw_get(&lps22hh_ctx, &raw);
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	4619      	mov	r1, r3
 800287e:	4809      	ldr	r0, [pc, #36]	@ (80028a4 <Read_Temperature_LPS22HH+0x30>)
 8002880:	f005 fe73 	bl	800856a <lps22hh_temperature_raw_get>
    temp = lps22hh_from_lsb_to_celsius(raw);
 8002884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fdb7 	bl	80083fc <lps22hh_from_lsb_to_celsius>
 800288e:	ed87 0a01 	vstr	s0, [r7, #4]
    return temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	ee07 3a90 	vmov	s15, r3
}
 8002898:	eeb0 0a67 	vmov.f32	s0, s15
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000220 	.word	0x20000220

080028a8 <hts221_platform_write>:
static int32_t hts221_platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	72fb      	strb	r3, [r7, #11]
 80028b8:	4613      	mov	r3, r2
 80028ba:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028c2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	893b      	ldrh	r3, [r7, #8]
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2301      	movs	r3, #1
 80028d8:	21bf      	movs	r1, #191	@ 0xbf
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f002 f9d8 	bl	8004c90 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

  return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <hts221_platform_read>:
static int32_t hts221_platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b088      	sub	sp, #32
 80028ee:	af04      	add	r7, sp, #16
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	461a      	mov	r2, r3
 80028f6:	460b      	mov	r3, r1
 80028f8:	72fb      	strb	r3, [r7, #11]
 80028fa:	4613      	mov	r3, r2
 80028fc:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002904:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	b29a      	uxth	r2, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2301      	movs	r3, #1
 800291a:	21bf      	movs	r1, #191	@ 0xbf
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f002 facb 	bl	8004eb8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <lps22hh_platform_write>:


static int32_t lps22hh_platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	460b      	mov	r3, r1
 800293a:	72fb      	strb	r3, [r7, #11]
 800293c:	4613      	mov	r3, r2
 800293e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	b29a      	uxth	r2, r3
 8002944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	21bb      	movs	r1, #187	@ 0xbb
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f002 f99a 	bl	8004c90 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <lps22hh_platform_read>:

static int32_t lps22hh_platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b088      	sub	sp, #32
 800296a:	af04      	add	r7, sp, #16
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	461a      	mov	r2, r3
 8002972:	460b      	mov	r3, r1
 8002974:	72fb      	strb	r3, [r7, #11]
 8002976:	4613      	mov	r3, r2
 8002978:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	b29a      	uxth	r2, r3
 800297e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	21bb      	movs	r1, #187	@ 0xbb
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f002 fa91 	bl	8004eb8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b08d      	sub	sp, #52	@ 0x34
 80029a4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 80029a6:	2305      	movs	r3, #5
 80029a8:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	461a      	mov	r2, r3
 80029ae:	0052      	lsls	r2, r2, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80029b8:	231b      	movs	r3, #27
 80029ba:	713b      	strb	r3, [r7, #4]
 80029bc:	23c5      	movs	r3, #197	@ 0xc5
 80029be:	717b      	strb	r3, [r7, #5]
 80029c0:	23d5      	movs	r3, #213	@ 0xd5
 80029c2:	71bb      	strb	r3, [r7, #6]
 80029c4:	23a5      	movs	r3, #165	@ 0xa5
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	2302      	movs	r3, #2
 80029ca:	723b      	strb	r3, [r7, #8]
 80029cc:	2300      	movs	r3, #0
 80029ce:	727b      	strb	r3, [r7, #9]
 80029d0:	23b4      	movs	r3, #180	@ 0xb4
 80029d2:	72bb      	strb	r3, [r7, #10]
 80029d4:	239a      	movs	r3, #154	@ 0x9a
 80029d6:	72fb      	strb	r3, [r7, #11]
 80029d8:	23e1      	movs	r3, #225	@ 0xe1
 80029da:	733b      	strb	r3, [r7, #12]
 80029dc:	2311      	movs	r3, #17
 80029de:	737b      	strb	r3, [r7, #13]
 80029e0:	2301      	movs	r3, #1
 80029e2:	73bb      	strb	r3, [r7, #14]
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	2300      	movs	r3, #0
 80029ea:	743b      	strb	r3, [r7, #16]
 80029ec:	2300      	movs	r3, #0
 80029ee:	747b      	strb	r3, [r7, #17]
 80029f0:	2300      	movs	r3, #0
 80029f2:	74bb      	strb	r3, [r7, #18]
 80029f4:	2300      	movs	r3, #0
 80029f6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80029f8:	4b54      	ldr	r3, [pc, #336]	@ (8002b4c <Add_HWServW2ST_Service+0x1ac>)
 80029fa:	461c      	mov	r4, r3
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	4a52      	ldr	r2, [pc, #328]	@ (8002b50 <Add_HWServW2ST_Service+0x1b0>)
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	494f      	ldr	r1, [pc, #316]	@ (8002b4c <Add_HWServW2ST_Service+0x1ac>)
 8002a0e:	2002      	movs	r0, #2
 8002a10:	f006 f92e 	bl	8008c70 <aci_gatt_add_service>
 8002a14:	4603      	mov	r3, r0
 8002a16:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002a18:	7d7b      	ldrb	r3, [r7, #21]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8002a1e:	2347      	movs	r3, #71	@ 0x47
 8002a20:	e08f      	b.n	8002b42 <Add_HWServW2ST_Service+0x1a2>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002a22:	231b      	movs	r3, #27
 8002a24:	713b      	strb	r3, [r7, #4]
 8002a26:	23c5      	movs	r3, #197	@ 0xc5
 8002a28:	717b      	strb	r3, [r7, #5]
 8002a2a:	23d5      	movs	r3, #213	@ 0xd5
 8002a2c:	71bb      	strb	r3, [r7, #6]
 8002a2e:	23a5      	movs	r3, #165	@ 0xa5
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	2302      	movs	r3, #2
 8002a34:	723b      	strb	r3, [r7, #8]
 8002a36:	2300      	movs	r3, #0
 8002a38:	727b      	strb	r3, [r7, #9]
 8002a3a:	2336      	movs	r3, #54	@ 0x36
 8002a3c:	72bb      	strb	r3, [r7, #10]
 8002a3e:	23ac      	movs	r3, #172	@ 0xac
 8002a40:	72fb      	strb	r3, [r7, #11]
 8002a42:	23e1      	movs	r3, #225	@ 0xe1
 8002a44:	733b      	strb	r3, [r7, #12]
 8002a46:	2311      	movs	r3, #17
 8002a48:	737b      	strb	r3, [r7, #13]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73bb      	strb	r3, [r7, #14]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	2300      	movs	r3, #0
 8002a54:	743b      	strb	r3, [r7, #16]
 8002a56:	2300      	movs	r3, #0
 8002a58:	747b      	strb	r3, [r7, #17]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	74bb      	strb	r3, [r7, #18]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002a62:	7cbb      	ldrb	r3, [r7, #18]
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x08; /* Humidity value */
 8002a6c:	7cbb      	ldrb	r3, [r7, #18]
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002a76:	7cbb      	ldrb	r3, [r7, #18]
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002a80:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <Add_HWServW2ST_Service+0x1b4>)
 8002a82:	461c      	mov	r4, r3
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002a8c:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <Add_HWServW2ST_Service+0x1b0>)
 8002a8e:	8818      	ldrh	r0, [r3, #0]
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <Add_HWServW2ST_Service+0x1b8>)
 8002a92:	9305      	str	r3, [sp, #20]
 8002a94:	2300      	movs	r3, #0
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	2310      	movs	r3, #16
 8002a9a:	9303      	str	r3, [sp, #12]
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2312      	movs	r3, #18
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <Add_HWServW2ST_Service+0x1b4>)
 8002aac:	2102      	movs	r1, #2
 8002aae:	f006 f9b5 	bl	8008e1c <aci_gatt_add_char>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	757b      	strb	r3, [r7, #21]
                           2+2+4+2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002ab6:	7d7b      	ldrb	r3, [r7, #21]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <Add_HWServW2ST_Service+0x120>
    return BLE_STATUS_ERROR;
 8002abc:	2347      	movs	r3, #71	@ 0x47
 8002abe:	e040      	b.n	8002b42 <Add_HWServW2ST_Service+0x1a2>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002ac0:	231b      	movs	r3, #27
 8002ac2:	713b      	strb	r3, [r7, #4]
 8002ac4:	23c5      	movs	r3, #197	@ 0xc5
 8002ac6:	717b      	strb	r3, [r7, #5]
 8002ac8:	23d5      	movs	r3, #213	@ 0xd5
 8002aca:	71bb      	strb	r3, [r7, #6]
 8002acc:	23a5      	movs	r3, #165	@ 0xa5
 8002ace:	71fb      	strb	r3, [r7, #7]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	723b      	strb	r3, [r7, #8]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	727b      	strb	r3, [r7, #9]
 8002ad8:	2336      	movs	r3, #54	@ 0x36
 8002ada:	72bb      	strb	r3, [r7, #10]
 8002adc:	23ac      	movs	r3, #172	@ 0xac
 8002ade:	72fb      	strb	r3, [r7, #11]
 8002ae0:	23e1      	movs	r3, #225	@ 0xe1
 8002ae2:	733b      	strb	r3, [r7, #12]
 8002ae4:	2311      	movs	r3, #17
 8002ae6:	737b      	strb	r3, [r7, #13]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	2300      	movs	r3, #0
 8002af2:	743b      	strb	r3, [r7, #16]
 8002af4:	2300      	movs	r3, #0
 8002af6:	747b      	strb	r3, [r7, #17]
 8002af8:	23e0      	movs	r3, #224	@ 0xe0
 8002afa:	74bb      	strb	r3, [r7, #18]
 8002afc:	2300      	movs	r3, #0
 8002afe:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <Add_HWServW2ST_Service+0x1b4>)
 8002b02:	461c      	mov	r4, r3
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <Add_HWServW2ST_Service+0x1b0>)
 8002b0e:	8818      	ldrh	r0, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <Add_HWServW2ST_Service+0x1bc>)
 8002b12:	9305      	str	r3, [sp, #20]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9304      	str	r3, [sp, #16]
 8002b18:	2310      	movs	r3, #16
 8002b1a:	9303      	str	r3, [sp, #12]
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2310      	movs	r3, #16
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2314      	movs	r3, #20
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <Add_HWServW2ST_Service+0x1b4>)
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	f006 f975 	bl	8008e1c <aci_gatt_add_char>
 8002b32:	4603      	mov	r3, r0
 8002b34:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002b36:	7d7b      	ldrb	r3, [r7, #21]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <Add_HWServW2ST_Service+0x1a0>
    return BLE_STATUS_ERROR;
 8002b3c:	2347      	movs	r3, #71	@ 0x47
 8002b3e:	e000      	b.n	8002b42 <Add_HWServW2ST_Service+0x1a2>

  return BLE_STATUS_SUCCESS;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000240 	.word	0x20000240
 8002b50:	20000234 	.word	0x20000234
 8002b54:	20000250 	.word	0x20000250
 8002b58:	20000236 	.word	0x20000236
 8002b5c:	20000238 	.word	0x20000238

08002b60 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b08d      	sub	sp, #52	@ 0x34
 8002b64:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002b78:	231b      	movs	r3, #27
 8002b7a:	713b      	strb	r3, [r7, #4]
 8002b7c:	23c5      	movs	r3, #197	@ 0xc5
 8002b7e:	717b      	strb	r3, [r7, #5]
 8002b80:	23d5      	movs	r3, #213	@ 0xd5
 8002b82:	71bb      	strb	r3, [r7, #6]
 8002b84:	23a5      	movs	r3, #165	@ 0xa5
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	723b      	strb	r3, [r7, #8]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	727b      	strb	r3, [r7, #9]
 8002b90:	23b4      	movs	r3, #180	@ 0xb4
 8002b92:	72bb      	strb	r3, [r7, #10]
 8002b94:	239a      	movs	r3, #154	@ 0x9a
 8002b96:	72fb      	strb	r3, [r7, #11]
 8002b98:	23e1      	movs	r3, #225	@ 0xe1
 8002b9a:	733b      	strb	r3, [r7, #12]
 8002b9c:	2311      	movs	r3, #17
 8002b9e:	737b      	strb	r3, [r7, #13]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	73bb      	strb	r3, [r7, #14]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	743b      	strb	r3, [r7, #16]
 8002bac:	2300      	movs	r3, #0
 8002bae:	747b      	strb	r3, [r7, #17]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	74bb      	strb	r3, [r7, #18]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <Add_SWServW2ST_Service+0x110>)
 8002bba:	461c      	mov	r4, r3
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002bc4:	7dbb      	ldrb	r3, [r7, #22]
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c74 <Add_SWServW2ST_Service+0x114>)
 8002bc8:	9200      	str	r2, [sp, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4928      	ldr	r1, [pc, #160]	@ (8002c70 <Add_SWServW2ST_Service+0x110>)
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f006 f84e 	bl	8008c70 <aci_gatt_add_service>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002bd8:	7d7b      	ldrb	r3, [r7, #21]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d13f      	bne.n	8002c5e <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002bde:	231b      	movs	r3, #27
 8002be0:	713b      	strb	r3, [r7, #4]
 8002be2:	23c5      	movs	r3, #197	@ 0xc5
 8002be4:	717b      	strb	r3, [r7, #5]
 8002be6:	23d5      	movs	r3, #213	@ 0xd5
 8002be8:	71bb      	strb	r3, [r7, #6]
 8002bea:	23a5      	movs	r3, #165	@ 0xa5
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	2302      	movs	r3, #2
 8002bf0:	723b      	strb	r3, [r7, #8]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	727b      	strb	r3, [r7, #9]
 8002bf6:	2336      	movs	r3, #54	@ 0x36
 8002bf8:	72bb      	strb	r3, [r7, #10]
 8002bfa:	23ac      	movs	r3, #172	@ 0xac
 8002bfc:	72fb      	strb	r3, [r7, #11]
 8002bfe:	23e1      	movs	r3, #225	@ 0xe1
 8002c00:	733b      	strb	r3, [r7, #12]
 8002c02:	2311      	movs	r3, #17
 8002c04:	737b      	strb	r3, [r7, #13]
 8002c06:	2301      	movs	r3, #1
 8002c08:	73bb      	strb	r3, [r7, #14]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	743b      	strb	r3, [r7, #16]
 8002c12:	2301      	movs	r3, #1
 8002c14:	747b      	strb	r3, [r7, #17]
 8002c16:	2300      	movs	r3, #0
 8002c18:	74bb      	strb	r3, [r7, #18]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <Add_SWServW2ST_Service+0x118>)
 8002c20:	461c      	mov	r4, r3
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <Add_SWServW2ST_Service+0x114>)
 8002c2c:	8818      	ldrh	r0, [r3, #0]
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <Add_SWServW2ST_Service+0x11c>)
 8002c30:	9305      	str	r3, [sp, #20]
 8002c32:	2300      	movs	r3, #0
 8002c34:	9304      	str	r3, [sp, #16]
 8002c36:	2310      	movs	r3, #16
 8002c38:	9303      	str	r3, [sp, #12]
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2310      	movs	r3, #16
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2308      	movs	r3, #8
 8002c48:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <Add_SWServW2ST_Service+0x118>)
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	f006 f8e6 	bl	8008e1c <aci_gatt_add_char>
 8002c50:	4603      	mov	r3, r0
 8002c52:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002c54:	7d7b      	ldrb	r3, [r7, #21]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e003      	b.n	8002c66 <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002c62:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002c64:	2347      	movs	r3, #71	@ 0x47
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000240 	.word	0x20000240
 8002c74:	2000023a 	.word	0x2000023a
 8002c78:	20000250 	.word	0x20000250
 8002c7c:	2000023c 	.word	0x2000023c

08002c80 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	@ 0x30
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002c8c:	f001 fab6 	bl	80041fc <HAL_GetTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	743b      	strb	r3, [r7, #16]
 8002c98:	f001 fab0 	bl	80041fc <HAL_GetTick>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0adb      	lsrs	r3, r3, #11
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	425b      	negs	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	74bb      	strb	r3, [r7, #18]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	121b      	asrs	r3, r3, #8
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	753b      	strb	r3, [r7, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	121b      	asrs	r3, r3, #8
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	75bb      	strb	r3, [r7, #22]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	425b      	negs	r3, r3
 8002ce0:	121b      	asrs	r3, r3, #8
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	763b      	strb	r3, [r7, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	121b      	asrs	r3, r3, #8
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	76bb      	strb	r3, [r7, #26]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	121b      	asrs	r3, r3, #8
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	773b      	strb	r3, [r7, #28]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	121b      	asrs	r3, r3, #8
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	77bb      	strb	r3, [r7, #30]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	121b      	asrs	r3, r3, #8
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f887 3020 	strb.w	r3, [r7, #32]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	121b      	asrs	r3, r3, #8
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	121b      	asrs	r3, r3, #8
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <Acc_Update+0x10c>)
 8002d5c:	8818      	ldrh	r0, [r3, #0]
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <Acc_Update+0x110>)
 8002d60:	8819      	ldrh	r1, [r3, #0]
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2314      	movs	r3, #20
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f006 f95e 	bl	800902c <aci_gatt_update_char_value>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002d7e:	2347      	movs	r3, #71	@ 0x47
 8002d80:	e000      	b.n	8002d84 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000234 	.word	0x20000234
 8002d90:	20000238 	.word	0x20000238

08002d94 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002d9c:	f001 fa2e 	bl	80041fc <HAL_GetTick>
 8002da0:	4603      	mov	r3, r0
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	733b      	strb	r3, [r7, #12]
 8002da8:	f001 fa28 	bl	80041fc <HAL_GetTick>
 8002dac:	4603      	mov	r3, r0
 8002dae:	0adb      	lsrs	r3, r3, #11
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	73bb      	strb	r3, [r7, #14]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	121b      	asrs	r3, r3, #8
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	743b      	strb	r3, [r7, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	121b      	asrs	r3, r3, #8
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	74bb      	strb	r3, [r7, #18]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	121b      	asrs	r3, r3, #8
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <Quat_Update+0x84>)
 8002dec:	8818      	ldrh	r0, [r3, #0]
 8002dee:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <Quat_Update+0x88>)
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2308      	movs	r3, #8
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f006 f916 	bl	800902c <aci_gatt_update_char_value>
 8002e00:	4603      	mov	r3, r0
 8002e02:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <Quat_Update+0x7a>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002e0a:	2347      	movs	r3, #71	@ 0x47
 8002e0c:	e000      	b.n	8002e10 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000023a 	.word	0x2000023a
 8002e1c:	2000023c 	.word	0x2000023c

08002e20 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b092      	sub	sp, #72	@ 0x48
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002e2c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002e2e:	4b80      	ldr	r3, [pc, #512]	@ (8003030 <Read_Request_CB+0x210>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d105      	bne.n	8002e44 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002e38:	4a7e      	ldr	r2, [pc, #504]	@ (8003034 <Read_Request_CB+0x214>)
 8002e3a:	497f      	ldr	r1, [pc, #508]	@ (8003038 <Read_Request_CB+0x218>)
 8002e3c:	487f      	ldr	r0, [pc, #508]	@ (800303c <Read_Request_CB+0x21c>)
 8002e3e:	f7ff ff1f 	bl	8002c80 <Acc_Update>
 8002e42:	e0e2      	b.n	800300a <Read_Request_CB+0x1ea>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002e44:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002e46:	4b7e      	ldr	r3, [pc, #504]	@ (8003040 <Read_Request_CB+0x220>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 80dc 	bne.w	800300a <Read_Request_CB+0x1ea>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002e52:	f008 facd 	bl	800b3f0 <rand>
 8002e56:	4603      	mov	r3, r0
 8002e58:	17da      	asrs	r2, r3, #31
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e70:	0090      	lsls	r0, r2, #2
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e78:	1851      	adds	r1, r2, r1
 8002e7a:	6239      	str	r1, [r7, #32]
 8002e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e7e:	eb43 0101 	adc.w	r1, r3, r1
 8002e82:	6279      	str	r1, [r7, #36]	@ 0x24
 8002e84:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e90:	f7fd feda 	bl	8000c48 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fd fb76 	bl	800058c <__aeabi_ul2d>
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	4b67      	ldr	r3, [pc, #412]	@ (8003044 <Read_Request_CB+0x224>)
 8002ea6:	f7fd f9f1 	bl	800028c <__adddf3>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fe79 	bl	8000ba8 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002eba:	f008 fa99 	bl	800b3f0 <rand>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	17da      	asrs	r2, r3, #31
 8002ec2:	4698      	mov	r8, r3
 8002ec4:	4691      	mov	r9, r2
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	464b      	mov	r3, r9
 8002eca:	1891      	adds	r1, r2, r2
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	415b      	adcs	r3, r3
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed6:	eb12 0408 	adds.w	r4, r2, r8
 8002eda:	eb43 0509 	adc.w	r5, r3, r9
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	016b      	lsls	r3, r5, #5
 8002ee8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002eec:	0162      	lsls	r2, r4, #5
 8002eee:	18a1      	adds	r1, r4, r2
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	eb45 0303 	adc.w	r3, r5, r3
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002efc:	460b      	mov	r3, r1
 8002efe:	eb13 0308 	adds.w	r3, r3, r8
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	4613      	mov	r3, r2
 8002f06:	eb43 0309 	adc.w	r3, r3, r9
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f18:	f7fd fe96 	bl	8000c48 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7fd fb32 	bl	800058c <__aeabi_ul2d>
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b46      	ldr	r3, [pc, #280]	@ (8003048 <Read_Request_CB+0x228>)
 8002f2e:	f7fd f9ad 	bl	800028c <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fe35 	bl	8000ba8 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	643b      	str	r3, [r7, #64]	@ 0x40
    float data_h;
    data_h = 50.0 + ((uint64_t)rand()*20)/RAND_MAX;
 8002f42:	f008 fa55 	bl	800b3f0 <rand>
 8002f46:	4603      	mov	r3, r0
 8002f48:	17da      	asrs	r2, r3, #31
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	617a      	str	r2, [r7, #20]
 8002f4e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f64:	0090      	lsls	r0, r2, #2
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	eb12 0a01 	adds.w	sl, r2, r1
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb43 0b01 	adc.w	fp, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002f82:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8002f86:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8002f8a:	4692      	mov	sl, r2
 8002f8c:	469b      	mov	fp, r3
 8002f8e:	4650      	mov	r0, sl
 8002f90:	4659      	mov	r1, fp
 8002f92:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f7fd fe55 	bl	8000c48 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd faf1 	bl	800058c <__aeabi_ul2d>
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	4b27      	ldr	r3, [pc, #156]	@ (800304c <Read_Request_CB+0x22c>)
 8002fb0:	f7fd f96c 	bl	800028c <__adddf3>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7fd fdf4 	bl	8000ba8 <__aeabi_d2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10), (int16_t)(data_h * 10));
 8002fc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002fc8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003050 <Read_Request_CB+0x230>
 8002fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002fd4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002fd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe4:	ee17 3a90 	vmov	r3, s15
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002fee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffa:	ee17 2a90 	vmov	r2, s15
 8002ffe:	b212      	sxth	r2, r2
 8003000:	4619      	mov	r1, r3
 8003002:	ee16 0a90 	vmov	r0, s13
 8003006:	f000 f827 	bl	8003058 <Environmental_Update>

  }

  if(connection_handle !=0)
 800300a:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <Read_Request_CB+0x234>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <Read_Request_CB+0x206>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <Read_Request_CB+0x234>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f006 f8b8 	bl	8009190 <aci_gatt_allow_read>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8003026:	bf00      	nop
 8003028:	3748      	adds	r7, #72	@ 0x48
 800302a:	46bd      	mov	sp, r7
 800302c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003030:	20000238 	.word	0x20000238
 8003034:	200003dc 	.word	0x200003dc
 8003038:	200003d0 	.word	0x200003d0
 800303c:	200003c4 	.word	0x200003c4
 8003040:	20000236 	.word	0x20000236
 8003044:	403b0000 	.word	0x403b0000
 8003048:	408f4000 	.word	0x408f4000
 800304c:	40490000 	.word	0x40490000
 8003050:	42c80000 	.word	0x42c80000
 8003054:	200003bc 	.word	0x200003bc

08003058 <Environmental_Update>:

tBleStatus Environmental_Update(int32_t press, int16_t temp, int16_t hum)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	803b      	strh	r3, [r7, #0]
  tBleStatus ret;
  uint8_t buff[10];
  //HOST_TO_LE_16(buff, HAL_GetTick()>>3);
  HOST_TO_LE_16(buff, 0);
 8003068:	2300      	movs	r3, #0
 800306a:	733b      	strb	r3, [r7, #12]
 800306c:	2300      	movs	r3, #0
 800306e:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2, press);   // pression
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	73bb      	strb	r3, [r7, #14]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	121b      	asrs	r3, r3, #8
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	141b      	asrs	r3, r3, #16
 8003082:	b2db      	uxtb	r3, r3
 8003084:	743b      	strb	r3, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	161b      	asrs	r3, r3, #24
 800308a:	b2db      	uxtb	r3, r3
 800308c:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6, hum);     // humidité
 800308e:	883b      	ldrh	r3, [r7, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	74bb      	strb	r3, [r7, #18]
 8003094:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003098:	121b      	asrs	r3, r3, #8
 800309a:	b21b      	sxth	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+8, temp);    // température
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	753b      	strb	r3, [r7, #20]
 80030a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030aa:	121b      	asrs	r3, r3, #8
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	757b      	strb	r3, [r7, #21]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <Environmental_Update+0x88>)
 80030b4:	8818      	ldrh	r0, [r3, #0]
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <Environmental_Update+0x8c>)
 80030b8:	8819      	ldrh	r1, [r3, #0]
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	230a      	movs	r3, #10
 80030c2:	2200      	movs	r2, #0
 80030c4:	f005 ffb2 	bl	800902c <aci_gatt_update_char_value>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]
                                   0, 10, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <Environmental_Update+0x7e>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 80030d2:	2347      	movs	r3, #71	@ 0x47
 80030d4:	e000      	b.n	80030d8 <Environmental_Update+0x80>
  }

  return BLE_STATUS_SUCCESS;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000234 	.word	0x20000234
 80030e4:	20000236 	.word	0x20000236

080030e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003116:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 800311c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003122:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800313a:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314a:	4a21      	ldr	r2, [pc, #132]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <MX_GPIO_Init+0xe8>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
 8003160:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003164:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003168:	f001 fcd0 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003170:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003184:	f001 fa0c 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003188:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800318c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a4:	f001 f9fc 	bl	80045a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	2006      	movs	r0, #6
 80031ae:	f001 f954 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031b2:	2006      	movs	r0, #6
 80031b4:	f001 f96d 	bl	8004492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	2028      	movs	r0, #40	@ 0x28
 80031be:	f001 f94c 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031c2:	2028      	movs	r0, #40	@ 0x28
 80031c4:	f001 f965 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	@ 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000

080031d4 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80031d8:	2006      	movs	r0, #6
 80031da:	f001 f95a 	bl	8004492 <HAL_NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80031e6:	2006      	movs	r0, #6
 80031e8:	f001 f961 	bl	80044ae <HAL_NVIC_DisableIRQ>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <HCI_TL_SPI_Init+0x94>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <HCI_TL_SPI_Init+0x94>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003204:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HCI_TL_SPI_Init+0x94>)
 8003206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003228:	f001 f9ba 	bl	80045a0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800322c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003232:	2301      	movs	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003248:	f001 f9aa 	bl	80045a0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800324c:	2302      	movs	r3, #2
 800324e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003250:	2301      	movs	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	4619      	mov	r1, r3
 8003262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003266:	f001 f99b 	bl	80045a0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	2102      	movs	r1, #2
 800326e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003272:	f001 fc4b 	bl	8004b0c <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8003276:	f000 fbb7 	bl	80039e8 <BSP_SPI1_Init>
 800327a:	4603      	mov	r3, r0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000

08003288 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800328c:	2101      	movs	r1, #1
 800328e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003292:	f001 fb2f 	bl	80048f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8003296:	2102      	movs	r1, #2
 8003298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800329c:	f001 fb2a 	bl	80048f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80032a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a8:	f001 fb24 	bl	80048f4 <HAL_GPIO_DeInit>
  return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80032b6:	2201      	movs	r2, #1
 80032b8:	2102      	movs	r1, #2
 80032ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032be:	f001 fc25 	bl	8004b0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032cc:	f001 fc1e 	bl	8004b0c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80032d0:	2005      	movs	r0, #5
 80032d2:	f000 ff9f 	bl	8004214 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80032d6:	2201      	movs	r2, #1
 80032d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032e0:	f001 fc14 	bl	8004b0c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80032e4:	2005      	movs	r0, #5
 80032e6:	f000 ff95 	bl	8004214 <HAL_Delay>
  return 0;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8003300:	2300      	movs	r3, #0
 8003302:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003304:	230b      	movs	r3, #11
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	2300      	movs	r3, #0
 800330a:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 800330c:	f7ff ff69 	bl	80031e2 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003310:	2200      	movs	r2, #0
 8003312:	2102      	movs	r1, #2
 8003314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003318:	f001 fbf8 	bl	8004b0c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800331c:	f107 010c 	add.w	r1, r7, #12
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	2205      	movs	r2, #5
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb8e 	bl	8003a48 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800332c:	7c3b      	ldrb	r3, [r7, #16]
 800332e:	b21b      	sxth	r3, r3
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	b21a      	sxth	r2, r3
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	b21b      	sxth	r3, r3
 8003338:	4313      	orrs	r3, r2
 800333a:	b21b      	sxth	r3, r3
 800333c:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800333e:	8bfb      	ldrh	r3, [r7, #30]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01e      	beq.n	8003382 <HCI_TL_SPI_Receive+0x92>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8003344:	8bfa      	ldrh	r2, [r7, #30]
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	429a      	cmp	r2, r3
 800334a:	d901      	bls.n	8003350 <HCI_TL_SPI_Receive+0x60>
    {
      byte_count = size;
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8003350:	2300      	movs	r3, #0
 8003352:	777b      	strb	r3, [r7, #29]
 8003354:	e010      	b.n	8003378 <HCI_TL_SPI_Receive+0x88>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8003356:	f107 011b 	add.w	r1, r7, #27
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	2201      	movs	r2, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fb71 	bl	8003a48 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8003366:	7f7b      	ldrb	r3, [r7, #29]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	7efa      	ldrb	r2, [r7, #27]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8003372:	7f7b      	ldrb	r3, [r7, #29]
 8003374:	3301      	adds	r3, #1
 8003376:	777b      	strb	r3, [r7, #29]
 8003378:	7f7b      	ldrb	r3, [r7, #29]
 800337a:	b29b      	uxth	r3, r3
 800337c:	8bfa      	ldrh	r2, [r7, #30]
 800337e:	429a      	cmp	r2, r3
 8003380:	d8e9      	bhi.n	8003356 <HCI_TL_SPI_Receive+0x66>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003382:	2201      	movs	r2, #1
 8003384:	2102      	movs	r1, #2
 8003386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800338a:	f001 fbbf 	bl	8004b0c <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 800338e:	f7ff ff21 	bl	80031d4 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8003392:	7f7b      	ldrb	r3, [r7, #29]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80033a8:	230a      	movs	r3, #10
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f000 ff24 	bl	80041fc <HAL_GetTick>
 80033b4:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80033b6:	f7ff ff14 	bl	80031e2 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80033ba:	f000 ff1f 	bl	80041fc <HAL_GetTick>
 80033be:	61f8      	str	r0, [r7, #28]

    result = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2102      	movs	r1, #2
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033cc:	f001 fb9e 	bl	8004b0c <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80033d0:	e00a      	b.n	80033e8 <HCI_TL_SPI_Send+0x4c>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80033d2:	f000 ff13 	bl	80041fc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d903      	bls.n	80033e8 <HCI_TL_SPI_Send+0x4c>
      {
        result = -3;
 80033e0:	f06f 0302 	mvn.w	r3, #2
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e6:	e004      	b.n	80033f2 <HCI_TL_SPI_Send+0x56>
    while(!IsDataAvailable())
 80033e8:	f000 f84a 	bl	8003480 <IsDataAvailable>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <HCI_TL_SPI_Send+0x36>
      }
    }
    if(result == -3)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	f113 0f03 	cmn.w	r3, #3
 80033f8:	d106      	bne.n	8003408 <HCI_TL_SPI_Send+0x6c>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80033fa:	2201      	movs	r2, #1
 80033fc:	2102      	movs	r1, #2
 80033fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003402:	f001 fb83 	bl	8004b0c <HAL_GPIO_WritePin>
      break;
 8003406:	e032      	b.n	800346e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003408:	f107 010c 	add.w	r1, r7, #12
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2205      	movs	r2, #5
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb18 	bl	8003a48 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	b21b      	sxth	r3, r3
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	b21a      	sxth	r2, r3
 8003420:	7b7b      	ldrb	r3, [r7, #13]
 8003422:	b21b      	sxth	r3, r3
 8003424:	4313      	orrs	r3, r2
 8003426:	b21b      	sxth	r3, r3
 8003428:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800342a:	8b7a      	ldrh	r2, [r7, #26]
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	429a      	cmp	r2, r3
 8003430:	d306      	bcc.n	8003440 <HCI_TL_SPI_Send+0xa4>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	461a      	mov	r2, r3
 8003436:	4911      	ldr	r1, [pc, #68]	@ (800347c <HCI_TL_SPI_Send+0xe0>)
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb05 	bl	8003a48 <BSP_SPI1_SendRecv>
 800343e:	e002      	b.n	8003446 <HCI_TL_SPI_Send+0xaa>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8003440:	f06f 0301 	mvn.w	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003446:	2201      	movs	r2, #1
 8003448:	2102      	movs	r1, #2
 800344a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344e:	f001 fb5d 	bl	8004b0c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003452:	f000 fed3 	bl	80041fc <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d903      	bls.n	8003468 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8003460:	f06f 0302 	mvn.w	r3, #2
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8003466:	e002      	b.n	800346e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	dba5      	blt.n	80033ba <HCI_TL_SPI_Send+0x1e>

  HCI_TL_SPI_Enable_IRQ();
 800346e:	f7ff feb1 	bl	80031d4 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	@ 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000268 	.word	0x20000268

08003480 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003484:	2101      	movs	r1, #1
 8003486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800348a:	f001 fb27 	bl	8004adc <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
}
 800349a:	4618      	mov	r0, r3
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80034a6:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <hci_tl_lowlevel_init+0x54>)
 80034a8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <hci_tl_lowlevel_init+0x58>)
 80034ac:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80034ae:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <hci_tl_lowlevel_init+0x5c>)
 80034b0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80034b2:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <hci_tl_lowlevel_init+0x60>)
 80034b4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80034b6:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <hci_tl_lowlevel_init+0x64>)
 80034b8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <hci_tl_lowlevel_init+0x68>)
 80034bc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f007 fc9f 	bl	800ae04 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80034c6:	f04f 51b0 	mov.w	r1, #369098752	@ 0x16000000
 80034ca:	4810      	ldr	r0, [pc, #64]	@ (800350c <hci_tl_lowlevel_init+0x6c>)
 80034cc:	f001 f823 	bl	8004516 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80034d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <hci_tl_lowlevel_init+0x70>)
 80034d2:	2100      	movs	r1, #0
 80034d4:	480d      	ldr	r0, [pc, #52]	@ (800350c <hci_tl_lowlevel_init+0x6c>)
 80034d6:	f001 f804 	bl	80044e2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2006      	movs	r0, #6
 80034e0:	f000 ffbb 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034e4:	2006      	movs	r0, #6
 80034e6:	f000 ffd4 	bl	8004492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80034ea:	bf00      	nop
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	080031f1 	.word	0x080031f1
 80034f8:	08003289 	.word	0x08003289
 80034fc:	0800339d 	.word	0x0800339d
 8003500:	080032f1 	.word	0x080032f1
 8003504:	080032b3 	.word	0x080032b3
 8003508:	08003a89 	.word	0x08003a89
 800350c:	20000260 	.word	0x20000260
 8003510:	08003515 	.word	0x08003515

08003514 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8003518:	e005      	b.n	8003526 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800351a:	2000      	movs	r0, #0
 800351c:	f007 fdd6 	bl	800b0cc <hci_notify_asynch_evt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8003526:	f7ff ffab 	bl	8003480 <IsDataAvailable>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f4      	bne.n	800351a <hci_tl_lowlevel_isr+0x6>
 8003530:	e000      	b.n	8003534 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8003532:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <MX_I2C1_Init+0x74>)
 800353e:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <MX_I2C1_Init+0x78>)
 8003540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <MX_I2C1_Init+0x7c>)
 8003546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003548:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <MX_I2C1_Init+0x74>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003550:	2201      	movs	r2, #1
 8003552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003554:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <MX_I2C1_Init+0x74>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003562:	2200      	movs	r2, #0
 8003564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003568:	2200      	movs	r2, #0
 800356a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <MX_I2C1_Init+0x74>)
 800356e:	2200      	movs	r2, #0
 8003570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003572:	480e      	ldr	r0, [pc, #56]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003574:	f001 fafc 	bl	8004b70 <HAL_I2C_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800357e:	f000 f8d9 	bl	8003734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003582:	2100      	movs	r1, #0
 8003584:	4809      	ldr	r0, [pc, #36]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003586:	f002 f857 	bl	8005638 <HAL_I2CEx_ConfigAnalogFilter>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003590:	f000 f8d0 	bl	8003734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003594:	2100      	movs	r1, #0
 8003596:	4805      	ldr	r0, [pc, #20]	@ (80035ac <MX_I2C1_Init+0x74>)
 8003598:	f002 f899 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80035a2:	f000 f8c7 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000368 	.word	0x20000368
 80035b0:	40005400 	.word	0x40005400
 80035b4:	10707dbc 	.word	0x10707dbc

080035b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b0ac      	sub	sp, #176	@ 0xb0
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	2288      	movs	r2, #136	@ 0x88
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f008 fcb4 	bl	800bf46 <memset>
  if(i2cHandle->Instance==I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <HAL_I2C_MspInit+0xb0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d13b      	bne.n	8003660 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035e8:	2340      	movs	r3, #64	@ 0x40
 80035ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 ff1b 	bl	8006430 <HAL_RCCEx_PeriphCLKConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003600:	f000 f898 	bl	8003734 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 8003606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003608:	4a18      	ldr	r2, [pc, #96]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 8003612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800361c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003624:	2312      	movs	r3, #18
 8003626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003636:	2304      	movs	r3, #4
 8003638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003640:	4619      	mov	r1, r3
 8003642:	480b      	ldr	r0, [pc, #44]	@ (8003670 <HAL_I2C_MspInit+0xb8>)
 8003644:	f000 ffac 	bl	80045a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 800364e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003652:	6593      	str	r3, [r2, #88]	@ 0x58
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_I2C_MspInit+0xb4>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003660:	bf00      	nop
 8003662:	37b0      	adds	r7, #176	@ 0xb0
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40005400 	.word	0x40005400
 800366c:	40021000 	.word	0x40021000
 8003670:	48000400 	.word	0x48000400

08003674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003678:	f000 fd50 	bl	800411c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800367c:	f000 f809 	bl	8003692 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003680:	f7ff fd32 	bl	80030e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003684:	f7ff ff58 	bl	8003538 <MX_I2C1_Init>
  MX_BlueNRG_2_Init();
 8003688:	f7fd fcda 	bl	8001040 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 800368c:	f7fd fcfe 	bl	800108c <MX_BlueNRG_2_Process>
 8003690:	e7fc      	b.n	800368c <main+0x18>

08003692 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b096      	sub	sp, #88	@ 0x58
 8003696:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2244      	movs	r2, #68	@ 0x44
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f008 fc50 	bl	800bf46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036a6:	463b      	mov	r3, r7
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80036b8:	f002 f864 	bl	8005784 <HAL_PWREx_ControlVoltageScaling>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80036c2:	f000 f837 	bl	8003734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036c6:	2302      	movs	r3, #2
 80036c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036d0:	2310      	movs	r3, #16
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d4:	2302      	movs	r3, #2
 80036d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036d8:	2302      	movs	r3, #2
 80036da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036dc:	2301      	movs	r3, #1
 80036de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80036e0:	2308      	movs	r3, #8
 80036e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036e4:	2307      	movs	r3, #7
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036e8:	2302      	movs	r3, #2
 80036ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 f89b 	bl	8005830 <HAL_RCC_OscConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003700:	f000 f818 	bl	8003734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003704:	230f      	movs	r3, #15
 8003706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003708:	2303      	movs	r3, #3
 800370a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003718:	463b      	mov	r3, r7
 800371a:	2103      	movs	r1, #3
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fc63 	bl	8005fe8 <HAL_RCC_ClockConfig>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003728:	f000 f804 	bl	8003734 <Error_Handler>
  }
}
 800372c:	bf00      	nop
 800372e:	3758      	adds	r7, #88	@ 0x58
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <Error_Handler+0x8>

08003740 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b092      	sub	sp, #72	@ 0x48
 8003744:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8003746:	4a36      	ldr	r2, [pc, #216]	@ (8003820 <Set_DeviceConnectable+0xe0>)
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003750:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8003754:	2302      	movs	r3, #2
 8003756:	703b      	strb	r3, [r7, #0]
 8003758:	230a      	movs	r3, #10
 800375a:	707b      	strb	r3, [r7, #1]
 800375c:	2300      	movs	r3, #0
 800375e:	70bb      	strb	r3, [r7, #2]
 8003760:	2308      	movs	r3, #8
 8003762:	70fb      	strb	r3, [r7, #3]
 8003764:	2309      	movs	r3, #9
 8003766:	713b      	strb	r3, [r7, #4]
 8003768:	2344      	movs	r3, #68	@ 0x44
 800376a:	717b      	strb	r3, [r7, #5]
 800376c:	2369      	movs	r3, #105	@ 0x69
 800376e:	71bb      	strb	r3, [r7, #6]
 8003770:	236e      	movs	r3, #110	@ 0x6e
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	2368      	movs	r3, #104	@ 0x68
 8003776:	723b      	strb	r3, [r7, #8]
 8003778:	234e      	movs	r3, #78	@ 0x4e
 800377a:	727b      	strb	r3, [r7, #9]
 800377c:	2352      	movs	r3, #82	@ 0x52
 800377e:	72bb      	strb	r3, [r7, #10]
 8003780:	2347      	movs	r3, #71	@ 0x47
 8003782:	72fb      	strb	r3, [r7, #11]
 8003784:	230d      	movs	r3, #13
 8003786:	733b      	strb	r3, [r7, #12]
 8003788:	23ff      	movs	r3, #255	@ 0xff
 800378a:	737b      	strb	r3, [r7, #13]
 800378c:	2301      	movs	r3, #1
 800378e:	73bb      	strb	r3, [r7, #14]
 8003790:	2302      	movs	r3, #2
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	2300      	movs	r3, #0
 8003796:	743b      	strb	r3, [r7, #16]
 8003798:	23fc      	movs	r3, #252	@ 0xfc
 800379a:	747b      	strb	r3, [r7, #17]
 800379c:	2300      	movs	r3, #0
 800379e:	74bb      	strb	r3, [r7, #18]
 80037a0:	2300      	movs	r3, #0
 80037a2:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
	0xFC, /* ACC+Gyro+Mag 0xE0 | 0x04 (Temp) | 0x08 (Humidity) | 0x10 (Pressure) = 0xFC */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80037a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037a6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80037a8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80037aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037ac:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80037ae:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80037b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037b2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80037b4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80037b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037b8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80037ba:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80037bc:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037be:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80037c0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <Set_DeviceConnectable+0xe4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80037c6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80037c8:	7cbb      	ldrb	r3, [r7, #18]
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 80037d2:	2100      	movs	r1, #0
 80037d4:	2000      	movs	r0, #0
 80037d6:	f007 f9bd 	bl	800ab54 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80037da:	2300      	movs	r3, #0
 80037dc:	9306      	str	r3, [sp, #24]
 80037de:	2300      	movs	r3, #0
 80037e0:	9305      	str	r3, [sp, #20]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9304      	str	r3, [sp, #16]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	f107 031c 	add.w	r3, r7, #28
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	2308      	movs	r3, #8
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2301      	movs	r3, #1
 80037fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003802:	2000      	movs	r0, #0
 8003804:	f004 ff12 	bl	800862c <aci_gap_set_discoverable>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800380e:	463b      	mov	r3, r7
 8003810:	4619      	mov	r1, r3
 8003812:	201a      	movs	r0, #26
 8003814:	f005 f987 	bl	8008b26 <aci_gap_update_adv_data>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8003818:	bf00      	nop
 800381a:	3728      	adds	r7, #40	@ 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	0800ddfc 	.word	0x0800ddfc
 8003824:	20000208 	.word	0x20000208

08003828 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d163      	bne.n	8003904 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3301      	adds	r3, #1
 8003840:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b3e      	cmp	r3, #62	@ 0x3e
 8003848:	d11e      	bne.n	8003888 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3302      	adds	r3, #2
 800384e:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e014      	b.n	8003880 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	4619      	mov	r1, r3
 800385c:	4a2b      	ldr	r2, [pc, #172]	@ (800390c <APP_UserEvtRx+0xe4>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003864:	4299      	cmp	r1, r3
 8003866:	d108      	bne.n	800387a <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8003868:	4a28      	ldr	r2, [pc, #160]	@ (800390c <APP_UserEvtRx+0xe4>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	3201      	adds	r2, #1
 8003876:	4610      	mov	r0, r2
 8003878:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b09      	cmp	r3, #9
 8003884:	d9e7      	bls.n	8003856 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8003886:	e03d      	b.n	8003904 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2bff      	cmp	r3, #255	@ 0xff
 800388e:	d11e      	bne.n	80038ce <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3302      	adds	r3, #2
 8003894:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e014      	b.n	80038c6 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	491b      	ldr	r1, [pc, #108]	@ (8003910 <APP_UserEvtRx+0xe8>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d108      	bne.n	80038c0 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80038ae:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <APP_UserEvtRx+0xe8>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	3202      	adds	r2, #2
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3301      	adds	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ca:	d9e7      	bls.n	800389c <APP_UserEvtRx+0x74>
}
 80038cc:	e01a      	b.n	8003904 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e014      	b.n	80038fe <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	4a0e      	ldr	r2, [pc, #56]	@ (8003914 <APP_UserEvtRx+0xec>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80038e2:	4299      	cmp	r1, r3
 80038e4:	d108      	bne.n	80038f8 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80038e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003914 <APP_UserEvtRx+0xec>)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	3202      	adds	r2, #2
 80038f4:	4610      	mov	r0, r2
 80038f6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d9e7      	bls.n	80038d4 <APP_UserEvtRx+0xac>
}
 8003904:	bf00      	nop
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0800de98 	.word	0x0800de98
 8003910:	0800dee8 	.word	0x0800dee8
 8003914:	0800de60 	.word	0x0800de60

08003918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <HAL_MspInit+0x44>)
 8003920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003922:	4a0e      	ldr	r2, [pc, #56]	@ (800395c <HAL_MspInit+0x44>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6613      	str	r3, [r2, #96]	@ 0x60
 800392a:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <HAL_MspInit+0x44>)
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_MspInit+0x44>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	4a08      	ldr	r2, [pc, #32]	@ (800395c <HAL_MspInit+0x44>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	@ 0x58
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_MspInit+0x44>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <NMI_Handler+0x4>

08003968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <MemManage_Handler+0x4>

08003978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <BusFault_Handler+0x4>

08003980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <UsageFault_Handler+0x4>

08003988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b6:	f000 fc0d 	bl	80041d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <EXTI0_IRQHandler+0x10>)
 80039c6:	f000 fdbb 	bl	8004540 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000260 	.word	0x20000260

080039d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <EXTI15_10_IRQHandler+0x10>)
 80039da:	f000 fdb1 	bl	8004540 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <BSP_SPI1_Init+0x54>)
 80039f4:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <BSP_SPI1_Init+0x58>)
 80039f6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <BSP_SPI1_Init+0x5c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	4911      	ldr	r1, [pc, #68]	@ (8003a44 <BSP_SPI1_Init+0x5c>)
 8003a00:	600a      	str	r2, [r1, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d114      	bne.n	8003a30 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003a06:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <BSP_SPI1_Init+0x54>)
 8003a08:	f003 fc8e 	bl	8007328 <HAL_SPI_GetState>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8003a12:	480a      	ldr	r0, [pc, #40]	@ (8003a3c <BSP_SPI1_Init+0x54>)
 8003a14:	f000 f882 	bl	8003b1c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003a1e:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <BSP_SPI1_Init+0x54>)
 8003a20:	f000 f83a 	bl	8003a98 <MX_SPI1_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003a2a:	f06f 0307 	mvn.w	r3, #7
 8003a2e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200003f4 	.word	0x200003f4
 8003a40:	40013000 	.word	0x40013000
 8003a44:	20000458 	.word	0x20000458

08003a48 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a60:	9200      	str	r2, [sp, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	4807      	ldr	r0, [pc, #28]	@ (8003a84 <BSP_SPI1_SendRecv+0x3c>)
 8003a68:	f003 fa4b 	bl	8006f02 <HAL_SPI_TransmitReceive>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003a72:	f06f 0305 	mvn.w	r3, #5
 8003a76:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003a78:	697b      	ldr	r3, [r7, #20]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200003f4 	.word	0x200003f4

08003a88 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003a8c:	f000 fbb6 	bl	80041fc <HAL_GetTick>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <MX_SPI1_Init+0x80>)
 8003aa8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ab0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003abe:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2228      	movs	r2, #40	@ 0x28
 8003ad8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2207      	movs	r2, #7
 8003af0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f003 f952 	bl	8006da8 <HAL_SPI_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40013000 	.word	0x40013000

08003b1c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b24:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b30:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3c:	4b26      	ldr	r3, [pc, #152]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b48:	4b23      	ldr	r3, [pc, #140]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b58:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b60:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <SPI1_MspInit+0xbc>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003b6c:	2340      	movs	r3, #64	@ 0x40
 8003b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003b7c:	2305      	movs	r3, #5
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b8a:	f000 fd09 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bac:	f000 fcf8 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003bc0:	2305      	movs	r3, #5
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4804      	ldr	r0, [pc, #16]	@ (8003bdc <SPI1_MspInit+0xc0>)
 8003bcc:	f000 fce8 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	3728      	adds	r7, #40	@ 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	48000400 	.word	0x48000400

08003be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return 1;
 8003be4:	2301      	movs	r3, #1
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_kill>:

int _kill(int pid, int sig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bfa:	f008 f9f7 	bl	800bfec <__errno>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2216      	movs	r2, #22
 8003c02:	601a      	str	r2, [r3, #0]
  return -1;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <_exit>:

void _exit (int status)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ffe7 	bl	8003bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <_exit+0x12>

08003c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e00a      	b.n	8003c4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c38:	f3af 8000 	nop.w
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	60ba      	str	r2, [r7, #8]
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dbf0      	blt.n	8003c38 <_read+0x12>
  }

  return len;
 8003c56:	687b      	ldr	r3, [r7, #4]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e009      	b.n	8003c86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f9c2 	bl	8004004 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dbf1      	blt.n	8003c72 <_write+0x12>
  }
  return len;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_close>:

int _close(int file)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_isatty>:

int _isatty(int file)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cd8:	2301      	movs	r3, #1
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d08:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <_sbrk+0x5c>)
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <_sbrk+0x60>)
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d14:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <_sbrk+0x64>)
 8003d1e:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <_sbrk+0x68>)
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d30:	f008 f95c 	bl	800bfec <__errno>
 8003d34:	4603      	mov	r3, r0
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e009      	b.n	8003d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <_sbrk+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a05      	ldr	r2, [pc, #20]	@ (8003d64 <_sbrk+0x64>)
 8003d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20018000 	.word	0x20018000
 8003d60:	00000800 	.word	0x00000800
 8003d64:	2000045c 	.word	0x2000045c
 8003d68:	20000be0 	.word	0x20000be0

08003d6c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	4a04      	ldr	r2, [pc, #16]	@ (8003d8c <BSP_LED_Init+0x20>)
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	0800de04 	.word	0x0800de04

08003d90 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	4a06      	ldr	r2, [pc, #24]	@ (8003db8 <BSP_LED_On+0x28>)
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	2120      	movs	r1, #32
 8003da4:	2201      	movs	r2, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 feb0 	bl	8004b0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000004 	.word	0x20000004

08003dbc <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	@ (8003de4 <BSP_LED_Off+0x28>)
 8003dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dce:	2120      	movs	r1, #32
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fe9a 	bl	8004b0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000004 	.word	0x20000004

08003de8 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	4a06      	ldr	r2, [pc, #24]	@ (8003e10 <BSP_LED_Toggle+0x28>)
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fe9c 	bl	8004b3c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000004 	.word	0x20000004

08003e14 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	71fb      	strb	r3, [r7, #7]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <BSP_PB_Init+0x94>)
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003e42:	79bb      	ldrb	r3, [r7, #6]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d132      	bne.n	8003eae <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <BSP_PB_Init+0x98>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	491b      	ldr	r1, [pc, #108]	@ (8003ec0 <BSP_PB_Init+0x9c>)
 8003e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fb5b 	bl	8004516 <HAL_EXTI_GetHandle>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e66:	f06f 0303 	mvn.w	r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e01f      	b.n	8003eae <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <BSP_PB_Init+0x98>)
 8003e74:	1898      	adds	r0, r3, r2
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <BSP_PB_Init+0xa0>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2100      	movs	r1, #0
 8003e82:	f000 fb2e 	bl	80044e2 <HAL_EXTI_RegisterCallback>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e8c:	f06f 0303 	mvn.w	r3, #3
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e00c      	b.n	8003eae <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003e94:	2028      	movs	r0, #40	@ 0x28
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec8 <BSP_PB_Init+0xa4>)
 8003e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f000 fada 	bl	800445a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003ea6:	2328      	movs	r3, #40	@ 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 faf2 	bl	8004492 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	0800de08 	.word	0x0800de08
 8003ebc:	2000000c 	.word	0x2000000c
 8003ec0:	0800de0c 	.word	0x0800de0c
 8003ec4:	0800de10 	.word	0x0800de10
 8003ec8:	0800de14 	.word	0x0800de14

08003ecc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	4a09      	ldr	r2, [pc, #36]	@ (8003f00 <BSP_PB_GetState+0x34>)
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fdf9 	bl	8004adc <HAL_GPIO_ReadPin>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000008 	.word	0x20000008

08003f04 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fe fb9f 	bl	800264c <BSP_PB_Callback>
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d903      	bls.n	8003f3c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f34:	f06f 0301 	mvn.w	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e025      	b.n	8003f88 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	79fa      	ldrb	r2, [r7, #7]
 8003f40:	4914      	ldr	r1, [pc, #80]	@ (8003f94 <BSP_COM_Init+0x74>)
 8003f42:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f46:	4814      	ldr	r0, [pc, #80]	@ (8003f98 <BSP_COM_Init+0x78>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	015b      	lsls	r3, r3, #5
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4403      	add	r3, r0
 8003f52:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	4613      	mov	r3, r2
 8003f58:	015b      	lsls	r3, r3, #5
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f98 <BSP_COM_Init+0x78>)
 8003f60:	4413      	add	r3, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f86a 	bl	800403c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003f68:	79fa      	ldrb	r2, [r7, #7]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	015b      	lsls	r3, r3, #5
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <BSP_COM_Init+0x78>)
 8003f74:	4413      	add	r3, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f810 	bl	8003f9c <MX_USART2_UART_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003f82:	f06f 0303 	mvn.w	r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000014 	.word	0x20000014
 8003f98:	20000460 	.word	0x20000460

08003f9c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <MX_USART2_UART_Init+0x64>)
 8003fac:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fb4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	220c      	movs	r2, #12
 8003fcc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f003 fb10 	bl	800760c <HAL_UART_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40004400 	.word	0x40004400

08004004 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <__io_putchar+0x30>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4613      	mov	r3, r2
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4a07      	ldr	r2, [pc, #28]	@ (8004038 <__io_putchar+0x34>)
 800401c:	1898      	adds	r0, r3, r2
 800401e:	1d39      	adds	r1, r7, #4
 8004020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004024:	2201      	movs	r2, #1
 8004026:	f003 fb49 	bl	80076bc <HAL_UART_Transmit>
  return ch;
 800402a:	687b      	ldr	r3, [r7, #4]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200004e4 	.word	0x200004e4
 8004038:	20000460 	.word	0x20000460

0800403c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b0ac      	sub	sp, #176	@ 0xb0
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	2288      	movs	r2, #136	@ 0x88
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f007 ff7a 	bl	800bf46 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004052:	2302      	movs	r3, #2
 8004054:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004056:	2300      	movs	r3, #0
 8004058:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	4618      	mov	r0, r3
 8004060:	f002 f9e6 	bl	8006430 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004064:	4b23      	ldr	r3, [pc, #140]	@ (80040f4 <USART2_MspInit+0xb8>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	4a22      	ldr	r2, [pc, #136]	@ (80040f4 <USART2_MspInit+0xb8>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004070:	4b20      	ldr	r3, [pc, #128]	@ (80040f4 <USART2_MspInit+0xb8>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <USART2_MspInit+0xb8>)
 800407e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004080:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <USART2_MspInit+0xb8>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <USART2_MspInit+0xb8>)
 800408a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004094:	2304      	movs	r3, #4
 8004096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80040ac:	2307      	movs	r3, #7
 80040ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80040b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040b6:	4619      	mov	r1, r3
 80040b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040bc:	f000 fa70 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80040c0:	2308      	movs	r3, #8
 80040c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80040d8:	2307      	movs	r3, #7
 80040da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80040de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040e8:	f000 fa5a 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80040ec:	bf00      	nop
 80040ee:	37b0      	adds	r7, #176	@ 0xb0
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000

080040f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <SystemInit+0x20>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <SystemInit+0x20>)
 8004104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004126:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <HAL_Init+0x3c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <HAL_Init+0x3c>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004130:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004132:	2003      	movs	r0, #3
 8004134:	f000 f986 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004138:	2000      	movs	r0, #0
 800413a:	f000 f80f 	bl	800415c <HAL_InitTick>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	71fb      	strb	r3, [r7, #7]
 8004148:	e001      	b.n	800414e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800414a:	f7ff fbe5 	bl	8003918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800414e:	79fb      	ldrb	r3, [r7, #7]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004168:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <HAL_InitTick+0x6c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004170:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <HAL_InitTick+0x70>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <HAL_InitTick+0x6c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800417e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f99f 	bl	80044ca <HAL_SYSTICK_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d809      	bhi.n	80041ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004198:	2200      	movs	r2, #0
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f000 f95b 	bl	800445a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041a4:	4a0a      	ldr	r2, [pc, #40]	@ (80041d0 <HAL_InitTick+0x74>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e007      	b.n	80041bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e004      	b.n	80041bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e001      	b.n	80041bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000020 	.word	0x20000020
 80041cc:	20000018 	.word	0x20000018
 80041d0:	2000001c 	.word	0x2000001c

080041d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_IncTick+0x20>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_IncTick+0x24>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <HAL_IncTick+0x24>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000020 	.word	0x20000020
 80041f8:	200004e8 	.word	0x200004e8

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_GetTick+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200004e8 	.word	0x200004e8

08004214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7ff ffee 	bl	80041fc <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d005      	beq.n	800423a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <HAL_Delay+0x44>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800423a:	bf00      	nop
 800423c:	f7ff ffde 	bl	80041fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d8f7      	bhi.n	800423c <HAL_Delay+0x28>
  {
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000020 	.word	0x20000020

0800425c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004278:	4013      	ands	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800428c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428e:	4a04      	ldr	r2, [pc, #16]	@ (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	60d3      	str	r3, [r2, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <__NVIC_GetPriorityGrouping+0x18>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 0307 	and.w	r3, r3, #7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db0b      	blt.n	80042ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4907      	ldr	r1, [pc, #28]	@ (80042f8 <__NVIC_EnableIRQ+0x38>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2001      	movs	r0, #1
 80042e2:	fa00 f202 	lsl.w	r2, r0, r2
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000e100 	.word	0xe000e100

080042fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db12      	blt.n	8004334 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	490a      	ldr	r1, [pc, #40]	@ (8004340 <__NVIC_DisableIRQ+0x44>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	3320      	adds	r3, #32
 8004324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004328:	f3bf 8f4f 	dsb	sy
}
 800432c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800432e:	f3bf 8f6f 	isb	sy
}
 8004332:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000e100 	.word	0xe000e100

08004344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	@ (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	@ (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	@ 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
         );
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	@ 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff05 	bl	800425c <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff1a 	bl	80042a4 <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff0d 	bl	80042c0 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff1d 	bl	80042fc <__NVIC_DisableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff94 	bl	8004400 <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80044e2:	b480      	push	{r7}
 80044e4:	b087      	sub	sp, #28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	460b      	mov	r3, r1
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]
      break;
 8004500:	e002      	b.n	8004508 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
      break;
 8004506:	bf00      	nop
  }

  return status;
 8004508:	7dfb      	ldrb	r3, [r7, #23]
}
 800450a:	4618      	mov	r0, r3
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e003      	b.n	8004532 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2201      	movs	r2, #1
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <HAL_EXTI_IRQHandler+0x5c>)
 800456a:	4413      	add	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4798      	blx	r3
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40010414 	.word	0x40010414

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ae:	e17f      	b.n	80048b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8171 	beq.w	80048aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d005      	beq.n	80045e0 <HAL_GPIO_Init+0x40>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d130      	bne.n	8004642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004616:	2201      	movs	r2, #1
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0201 	and.w	r2, r3, #1
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d118      	bne.n	8004680 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004654:	2201      	movs	r2, #1
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	f003 0201 	and.w	r2, r3, #1
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d017      	beq.n	80046bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d123      	bne.n	8004710 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80ac 	beq.w	80048aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004752:	4b5f      	ldr	r3, [pc, #380]	@ (80048d0 <HAL_GPIO_Init+0x330>)
 8004754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004756:	4a5e      	ldr	r2, [pc, #376]	@ (80048d0 <HAL_GPIO_Init+0x330>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6613      	str	r3, [r2, #96]	@ 0x60
 800475e:	4b5c      	ldr	r3, [pc, #368]	@ (80048d0 <HAL_GPIO_Init+0x330>)
 8004760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800476a:	4a5a      	ldr	r2, [pc, #360]	@ (80048d4 <HAL_GPIO_Init+0x334>)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004794:	d025      	beq.n	80047e2 <HAL_GPIO_Init+0x242>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4f      	ldr	r2, [pc, #316]	@ (80048d8 <HAL_GPIO_Init+0x338>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <HAL_GPIO_Init+0x23e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4e      	ldr	r2, [pc, #312]	@ (80048dc <HAL_GPIO_Init+0x33c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d019      	beq.n	80047da <HAL_GPIO_Init+0x23a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4d      	ldr	r2, [pc, #308]	@ (80048e0 <HAL_GPIO_Init+0x340>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_GPIO_Init+0x236>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4c      	ldr	r2, [pc, #304]	@ (80048e4 <HAL_GPIO_Init+0x344>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00d      	beq.n	80047d2 <HAL_GPIO_Init+0x232>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4b      	ldr	r2, [pc, #300]	@ (80048e8 <HAL_GPIO_Init+0x348>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x22e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4a      	ldr	r2, [pc, #296]	@ (80048ec <HAL_GPIO_Init+0x34c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_GPIO_Init+0x22a>
 80047c6:	2306      	movs	r3, #6
 80047c8:	e00c      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047ca:	2307      	movs	r3, #7
 80047cc:	e00a      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e008      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047d2:	2304      	movs	r3, #4
 80047d4:	e006      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e004      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047da:	2302      	movs	r3, #2
 80047dc:	e002      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_GPIO_Init+0x244>
 80047e2:	2300      	movs	r3, #0
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	f002 0203 	and.w	r2, r2, #3
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	4093      	lsls	r3, r2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047f4:	4937      	ldr	r1, [pc, #220]	@ (80048d4 <HAL_GPIO_Init+0x334>)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004826:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800482c:	4b30      	ldr	r3, [pc, #192]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004850:	4a27      	ldr	r2, [pc, #156]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004856:	4b26      	ldr	r3, [pc, #152]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800487a:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004880:	4b1b      	ldr	r3, [pc, #108]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	43db      	mvns	r3, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048a4:	4a12      	ldr	r2, [pc, #72]	@ (80048f0 <HAL_GPIO_Init+0x350>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	3301      	adds	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f ae78 	bne.w	80045b0 <HAL_GPIO_Init+0x10>
  }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010000 	.word	0x40010000
 80048d8:	48000400 	.word	0x48000400
 80048dc:	48000800 	.word	0x48000800
 80048e0:	48000c00 	.word	0x48000c00
 80048e4:	48001000 	.word	0x48001000
 80048e8:	48001400 	.word	0x48001400
 80048ec:	48001800 	.word	0x48001800
 80048f0:	40010400 	.word	0x40010400

080048f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004902:	e0cd      	b.n	8004aa0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004904:	2201      	movs	r2, #1
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80c0 	beq.w	8004a9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800491a:	4a68      	ldr	r2, [pc, #416]	@ (8004abc <HAL_GPIO_DeInit+0x1c8>)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	3302      	adds	r3, #2
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	220f      	movs	r2, #15
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004942:	d025      	beq.n	8004990 <HAL_GPIO_DeInit+0x9c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a5e      	ldr	r2, [pc, #376]	@ (8004ac0 <HAL_GPIO_DeInit+0x1cc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01f      	beq.n	800498c <HAL_GPIO_DeInit+0x98>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac4 <HAL_GPIO_DeInit+0x1d0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d019      	beq.n	8004988 <HAL_GPIO_DeInit+0x94>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a5c      	ldr	r2, [pc, #368]	@ (8004ac8 <HAL_GPIO_DeInit+0x1d4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_GPIO_DeInit+0x90>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a5b      	ldr	r2, [pc, #364]	@ (8004acc <HAL_GPIO_DeInit+0x1d8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00d      	beq.n	8004980 <HAL_GPIO_DeInit+0x8c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_GPIO_DeInit+0x1dc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <HAL_GPIO_DeInit+0x88>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a59      	ldr	r2, [pc, #356]	@ (8004ad4 <HAL_GPIO_DeInit+0x1e0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_GPIO_DeInit+0x84>
 8004974:	2306      	movs	r3, #6
 8004976:	e00c      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 8004978:	2307      	movs	r3, #7
 800497a:	e00a      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 800497c:	2305      	movs	r3, #5
 800497e:	e008      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 8004980:	2304      	movs	r3, #4
 8004982:	e006      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 8004984:	2303      	movs	r3, #3
 8004986:	e004      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 8004988:	2302      	movs	r3, #2
 800498a:	e002      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_GPIO_DeInit+0x9e>
 8004990:	2300      	movs	r3, #0
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f002 0203 	and.w	r2, r2, #3
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	4093      	lsls	r3, r2
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d132      	bne.n	8004a08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80049a2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	494b      	ldr	r1, [pc, #300]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80049b0:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	4947      	ldr	r1, [pc, #284]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80049be:	4b46      	ldr	r3, [pc, #280]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	4944      	ldr	r1, [pc, #272]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80049cc:	4b42      	ldr	r3, [pc, #264]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	4940      	ldr	r1, [pc, #256]	@ (8004ad8 <HAL_GPIO_DeInit+0x1e4>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80049ea:	4a34      	ldr	r2, [pc, #208]	@ (8004abc <HAL_GPIO_DeInit+0x1c8>)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	3302      	adds	r3, #2
 80049f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	43da      	mvns	r2, r3
 80049fa:	4830      	ldr	r0, [pc, #192]	@ (8004abc <HAL_GPIO_DeInit+0x1c8>)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	400a      	ands	r2, r1
 8004a02:	3302      	adds	r3, #2
 8004a04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	2103      	movs	r1, #3
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	08da      	lsrs	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3208      	adds	r2, #8
 8004a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	220f      	movs	r2, #15
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	08d2      	lsrs	r2, r2, #3
 8004a3c:	4019      	ands	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3208      	adds	r2, #8
 8004a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2103      	movs	r1, #3
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	401a      	ands	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	2101      	movs	r1, #1
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	2103      	movs	r1, #3
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	401a      	ands	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	401a      	ands	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af2b 	bne.w	8004904 <HAL_GPIO_DeInit+0x10>
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	48000400 	.word	0x48000400
 8004ac4:	48000800 	.word	0x48000800
 8004ac8:	48000c00 	.word	0x48000c00
 8004acc:	48001000 	.word	0x48001000
 8004ad0:	48001400 	.word	0x48001400
 8004ad4:	48001800 	.word	0x48001800
 8004ad8:	40010400 	.word	0x40010400

08004adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e001      	b.n	8004afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b1c:	787b      	ldrb	r3, [r7, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b28:	e002      	b.n	8004b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	43d9      	mvns	r1, r3
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e081      	b.n	8004c86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fe fd0e 	bl	80035b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	@ 0x24
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	e006      	b.n	8004bf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d104      	bne.n	8004c0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69d9      	ldr	r1, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	813b      	strh	r3, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	f040 80f9 	bne.w	8004eaa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_I2C_Mem_Write+0x34>
 8004cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0ed      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Mem_Write+0x4e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0e6      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ce6:	f7ff fa89 	bl	80041fc <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2319      	movs	r3, #25
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fac3 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0d1      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2221      	movs	r2, #33	@ 0x21
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2240      	movs	r2, #64	@ 0x40
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d30:	88f8      	ldrh	r0, [r7, #6]
 8004d32:	893a      	ldrh	r2, [r7, #8]
 8004d34:	8979      	ldrh	r1, [r7, #10]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4603      	mov	r3, r0
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f9d3 	bl	80050ec <I2C_RequestMemoryWrite>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0a9      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2bff      	cmp	r3, #255	@ 0xff
 8004d60:	d90e      	bls.n	8004d80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	@ 0xff
 8004d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	8979      	ldrh	r1, [r7, #10]
 8004d70:	2300      	movs	r3, #0
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fc2b 	bl	80055d4 <I2C_TransferConfig>
 8004d7e:	e00f      	b.n	8004da0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	8979      	ldrh	r1, [r7, #10]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fc1a 	bl	80055d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 faad 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e07b      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d034      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x1c8>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d130      	bne.n	8004e58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa3f 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e04d      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2bff      	cmp	r3, #255	@ 0xff
 8004e18:	d90e      	bls.n	8004e38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	22ff      	movs	r2, #255	@ 0xff
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	8979      	ldrh	r1, [r7, #10]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fbcf 	bl	80055d4 <I2C_TransferConfig>
 8004e36:	e00f      	b.n	8004e58 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	8979      	ldrh	r1, [r7, #10]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fbbe 	bl	80055d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d19e      	bne.n	8004da0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa8c 	bl	8005384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e01a      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <HAL_I2C_Mem_Write+0x224>)
 8004e8a:	400b      	ands	r3, r1
 8004e8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	f040 80fd 	bne.w	80050da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_I2C_Mem_Read+0x34>
 8004ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0f1      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Mem_Read+0x4e>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0ea      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f0e:	f7ff f975 	bl	80041fc <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9af 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0d5      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2222      	movs	r2, #34	@ 0x22
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f58:	88f8      	ldrh	r0, [r7, #6]
 8004f5a:	893a      	ldrh	r2, [r7, #8]
 8004f5c:	8979      	ldrh	r1, [r7, #10]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4603      	mov	r3, r0
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f913 	bl	8005194 <I2C_RequestMemoryRead>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0ad      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2bff      	cmp	r3, #255	@ 0xff
 8004f88:	d90e      	bls.n	8004fa8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	22ff      	movs	r2, #255	@ 0xff
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	8979      	ldrh	r1, [r7, #10]
 8004f98:	4b52      	ldr	r3, [pc, #328]	@ (80050e4 <HAL_I2C_Mem_Read+0x22c>)
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fb17 	bl	80055d4 <I2C_TransferConfig>
 8004fa6:	e00f      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	8979      	ldrh	r1, [r7, #10]
 8004fba:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_I2C_Mem_Read+0x22c>)
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fb06 	bl	80055d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f956 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07c      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d034      	beq.n	8005088 <HAL_I2C_Mem_Read+0x1d0>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d130      	bne.n	8005088 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	2200      	movs	r2, #0
 800502e:	2180      	movs	r1, #128	@ 0x80
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f927 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e04d      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2bff      	cmp	r3, #255	@ 0xff
 8005048:	d90e      	bls.n	8005068 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	8979      	ldrh	r1, [r7, #10]
 8005058:	2300      	movs	r3, #0
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fab7 	bl	80055d4 <I2C_TransferConfig>
 8005066:	e00f      	b.n	8005088 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005076:	b2da      	uxtb	r2, r3
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	2300      	movs	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 faa6 	bl	80055d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d19a      	bne.n	8004fc8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f974 	bl	8005384 <I2C_WaitOnSTOPFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e01a      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2220      	movs	r2, #32
 80050ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_I2C_Mem_Read+0x230>)
 80050ba:	400b      	ands	r3, r1
 80050bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	80002400 	.word	0x80002400
 80050e8:	fe00e800 	.word	0xfe00e800

080050ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	817b      	strh	r3, [r7, #10]
 80050fe:	460b      	mov	r3, r1
 8005100:	813b      	strh	r3, [r7, #8]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	8979      	ldrh	r1, [r7, #10]
 800510c:	4b20      	ldr	r3, [pc, #128]	@ (8005190 <I2C_RequestMemoryWrite+0xa4>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fa5d 	bl	80055d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f8f0 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e02c      	b.n	8005188 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	629a      	str	r2, [r3, #40]	@ 0x28
 800513e:	e015      	b.n	800516c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b29b      	uxth	r3, r3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f8d6 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e012      	b.n	8005188 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005162:	893b      	ldrh	r3, [r7, #8]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2200      	movs	r2, #0
 8005174:	2180      	movs	r1, #128	@ 0x80
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f884 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	80002000 	.word	0x80002000

08005194 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	817b      	strh	r3, [r7, #10]
 80051a6:	460b      	mov	r3, r1
 80051a8:	813b      	strh	r3, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	4b20      	ldr	r3, [pc, #128]	@ (8005238 <I2C_RequestMemoryRead+0xa4>)
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fa0a 	bl	80055d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f89d 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e02c      	b.n	800522e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051da:	893b      	ldrh	r3, [r7, #8]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80051e4:	e015      	b.n	8005212 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051e6:	893b      	ldrh	r3, [r7, #8]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	69b9      	ldr	r1, [r7, #24]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f883 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e012      	b.n	800522e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005208:	893b      	ldrh	r3, [r7, #8]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2200      	movs	r2, #0
 800521a:	2140      	movs	r1, #64	@ 0x40
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f831 	bl	8005284 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	80002000 	.word	0x80002000

0800523c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d103      	bne.n	800525a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d007      	beq.n	8005278 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	619a      	str	r2, [r3, #24]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005294:	e022      	b.n	80052dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d01e      	beq.n	80052dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fe ffad 	bl	80041fc <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d113      	bne.n	80052dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e00f      	b.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d0cd      	beq.n	8005296 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005310:	e02c      	b.n	800536c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f870 	bl	80053fc <I2C_IsErrorOccurred>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e02a      	b.n	800537c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d01e      	beq.n	800536c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fe ff65 	bl	80041fc <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d113      	bne.n	800536c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e007      	b.n	800537c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d1cb      	bne.n	8005312 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005390:	e028      	b.n	80053e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f830 	bl	80053fc <I2C_IsErrorOccurred>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e026      	b.n	80053f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe ff29 	bl	80041fc <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d113      	bne.n	80053e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e007      	b.n	80053f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d1cf      	bne.n	8005392 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	@ 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d075      	beq.n	8005514 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2210      	movs	r2, #16
 800542e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005430:	e056      	b.n	80054e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d052      	beq.n	80054e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fe fedf 	bl	80041fc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <I2C_IsErrorOccurred+0x54>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d147      	bne.n	80054e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800545a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005472:	d12e      	bne.n	80054d2 <I2C_IsErrorOccurred+0xd6>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800547a:	d02a      	beq.n	80054d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	2b20      	cmp	r3, #32
 8005480:	d027      	beq.n	80054d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005492:	f7fe feb3 	bl	80041fc <HAL_GetTick>
 8005496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005498:	e01b      	b.n	80054d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800549a:	f7fe feaf 	bl	80041fc <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b19      	cmp	r3, #25
 80054a6:	d914      	bls.n	80054d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d1dc      	bne.n	800549a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d003      	beq.n	80054f6 <I2C_IsErrorOccurred+0xfa>
 80054ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d09d      	beq.n	8005432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2220      	movs	r2, #32
 8005504:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f043 0308 	orr.w	r3, r3, #8
 800554e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800557a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01c      	beq.n	80055c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff fe56 	bl	800523c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <I2C_IsErrorOccurred+0x1d4>)
 800559c:	400b      	ands	r3, r1
 800559e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80055c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3728      	adds	r7, #40	@ 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	fe00e800 	.word	0xfe00e800

080055d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	817b      	strh	r3, [r7, #10]
 80055e2:	4613      	mov	r3, r2
 80055e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ec:	7a7b      	ldrb	r3, [r7, #9]
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005602:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	0d5b      	lsrs	r3, r3, #21
 800560e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <I2C_TransferConfig+0x60>)
 8005614:	430b      	orrs	r3, r1
 8005616:	43db      	mvns	r3, r3
 8005618:	ea02 0103 	and.w	r1, r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	03ff63ff 	.word	0x03ff63ff

08005638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b20      	cmp	r3, #32
 800564c:	d138      	bne.n	80056c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e032      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800568a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d139      	bne.n	8005758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e033      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	@ 0x24
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800576c:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <HAL_PWREx_GetVoltageRange+0x18>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005774:	4618      	mov	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40007000 	.word	0x40007000

08005784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005792:	d130      	bne.n	80057f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005794:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800579c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a0:	d038      	beq.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057a2:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2232      	movs	r2, #50	@ 0x32
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	0c9b      	lsrs	r3, r3, #18
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057c8:	e002      	b.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057dc:	d102      	bne.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f2      	bne.n	80057ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d110      	bne.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e00f      	b.n	8005816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005802:	d007      	beq.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005804:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800580c:	4a05      	ldr	r2, [pc, #20]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800580e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40007000 	.word	0x40007000
 8005828:	20000018 	.word	0x20000018
 800582c:	431bde83 	.word	0x431bde83

08005830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e3ca      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005842:	4b97      	ldr	r3, [pc, #604]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800584c:	4b94      	ldr	r3, [pc, #592]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80e4 	beq.w	8005a2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_RCC_OscConfig+0x4a>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	f040 808b 	bne.w	8005988 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 8087 	bne.w	8005988 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800587a:	4b89      	ldr	r3, [pc, #548]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x62>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e3a2      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1a      	ldr	r2, [r3, #32]
 8005896:	4b82      	ldr	r3, [pc, #520]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_RCC_OscConfig+0x7c>
 80058a2:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058aa:	e005      	b.n	80058b8 <HAL_RCC_OscConfig+0x88>
 80058ac:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d223      	bcs.n	8005904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd55 	bl	8006370 <RCC_SetFlashLatencyFromMSIRange>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e383      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d0:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a72      	ldr	r2, [pc, #456]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058d6:	f043 0308 	orr.w	r3, r3, #8
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b70      	ldr	r3, [pc, #448]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	496d      	ldr	r1, [pc, #436]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ee:	4b6c      	ldr	r3, [pc, #432]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	4968      	ldr	r1, [pc, #416]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	604b      	str	r3, [r1, #4]
 8005902:	e025      	b.n	8005950 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005904:	4b66      	ldr	r3, [pc, #408]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a65      	ldr	r2, [pc, #404]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 800590a:	f043 0308 	orr.w	r3, r3, #8
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b63      	ldr	r3, [pc, #396]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	4960      	ldr	r1, [pc, #384]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005922:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	495b      	ldr	r1, [pc, #364]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fd15 	bl	8006370 <RCC_SetFlashLatencyFromMSIRange>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e343      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005950:	f000 fc4a 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b52      	ldr	r3, [pc, #328]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	4950      	ldr	r1, [pc, #320]	@ (8005aa4 <HAL_RCC_OscConfig+0x274>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	4a4e      	ldr	r2, [pc, #312]	@ (8005aa8 <HAL_RCC_OscConfig+0x278>)
 800596e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005970:	4b4e      	ldr	r3, [pc, #312]	@ (8005aac <HAL_RCC_OscConfig+0x27c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fbf1 	bl	800415c <HAL_InitTick>
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d052      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	e327      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d032      	beq.n	80059f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005990:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a42      	ldr	r2, [pc, #264]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800599c:	f7fe fc2e 	bl	80041fc <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059a4:	f7fe fc2a 	bl	80041fc <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e310      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059b6:	4b3a      	ldr	r3, [pc, #232]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059c2:	4b37      	ldr	r3, [pc, #220]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a36      	ldr	r2, [pc, #216]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059c8:	f043 0308 	orr.w	r3, r3, #8
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b34      	ldr	r3, [pc, #208]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4931      	ldr	r1, [pc, #196]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059e0:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	492c      	ldr	r1, [pc, #176]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
 80059f4:	e01a      	b.n	8005a2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059f6:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a02:	f7fe fbfb 	bl	80041fc <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a0a:	f7fe fbf7 	bl	80041fc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e2dd      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a1c:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0x1da>
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d074      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d005      	beq.n	8005a4a <HAL_RCC_OscConfig+0x21a>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d10e      	bne.n	8005a62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d10b      	bne.n	8005a62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4a:	4b15      	ldr	r3, [pc, #84]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d064      	beq.n	8005b20 <HAL_RCC_OscConfig+0x2f0>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d160      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e2ba      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x24a>
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e026      	b.n	8005ac8 <HAL_RCC_OscConfig+0x298>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a82:	d115      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x280>
 8005a84:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a05      	ldr	r2, [pc, #20]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b03      	ldr	r3, [pc, #12]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a02      	ldr	r2, [pc, #8]	@ (8005aa0 <HAL_RCC_OscConfig+0x270>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCC_OscConfig+0x298>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	0800de18 	.word	0x0800de18
 8005aa8:	20000018 	.word	0x20000018
 8005aac:	2000001c 	.word	0x2000001c
 8005ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b9d      	ldr	r3, [pc, #628]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fe fb94 	bl	80041fc <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fe fb90 	bl	80041fc <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	@ 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e276      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aea:	4b92      	ldr	r3, [pc, #584]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2a8>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fe fb80 	bl	80041fc <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fe fb7c 	bl	80041fc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	@ 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e262      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b12:	4b88      	ldr	r3, [pc, #544]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x2d0>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d060      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_OscConfig+0x310>
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d119      	bne.n	8005b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d116      	bne.n	8005b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b40:	4b7c      	ldr	r3, [pc, #496]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_OscConfig+0x328>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e23f      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b58:	4b76      	ldr	r3, [pc, #472]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	4973      	ldr	r1, [pc, #460]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b6c:	e040      	b.n	8005bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d023      	beq.n	8005bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b76:	4b6f      	ldr	r3, [pc, #444]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b82:	f7fe fb3b 	bl	80041fc <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8a:	f7fe fb37 	bl	80041fc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e21d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b9c:	4b65      	ldr	r3, [pc, #404]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba8:	4b62      	ldr	r3, [pc, #392]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	495f      	ldr	r1, [pc, #380]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
 8005bbc:	e018      	b.n	8005bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fe fb17 	bl	80041fc <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd2:	f7fe fb13 	bl	80041fc <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e1f9      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005be4:	4b53      	ldr	r3, [pc, #332]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f0      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d03c      	beq.n	8005c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01c      	beq.n	8005c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c04:	4b4b      	ldr	r3, [pc, #300]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fe faf2 	bl	80041fc <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c1c:	f7fe faee 	bl	80041fc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e1d4      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c2e:	4b41      	ldr	r3, [pc, #260]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ef      	beq.n	8005c1c <HAL_RCC_OscConfig+0x3ec>
 8005c3c:	e01b      	b.n	8005c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c44:	4a3b      	ldr	r2, [pc, #236]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c46:	f023 0301 	bic.w	r3, r3, #1
 8005c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fe fad5 	bl	80041fc <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c56:	f7fe fad1 	bl	80041fc <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e1b7      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c68:	4b32      	ldr	r3, [pc, #200]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1ef      	bne.n	8005c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80a6 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c84:	2300      	movs	r3, #0
 8005c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c88:	4b2a      	ldr	r3, [pc, #168]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10d      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c94:	4b27      	ldr	r3, [pc, #156]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c98:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ca0:	4b24      	ldr	r3, [pc, #144]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb0:	4b21      	ldr	r3, [pc, #132]	@ (8005d38 <HAL_RCC_OscConfig+0x508>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d118      	bne.n	8005cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <HAL_RCC_OscConfig+0x508>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <HAL_RCC_OscConfig+0x508>)
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc8:	f7fe fa98 	bl	80041fc <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd0:	f7fe fa94 	bl	80041fc <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e17a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce2:	4b15      	ldr	r3, [pc, #84]	@ (8005d38 <HAL_RCC_OscConfig+0x508>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d108      	bne.n	8005d08 <HAL_RCC_OscConfig+0x4d8>
 8005cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d06:	e029      	b.n	8005d5c <HAL_RCC_OscConfig+0x52c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b05      	cmp	r3, #5
 8005d0e:	d115      	bne.n	8005d3c <HAL_RCC_OscConfig+0x50c>
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	4a07      	ldr	r2, [pc, #28]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d20:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d26:	4a03      	ldr	r2, [pc, #12]	@ (8005d34 <HAL_RCC_OscConfig+0x504>)
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d30:	e014      	b.n	8005d5c <HAL_RCC_OscConfig+0x52c>
 8005d32:	bf00      	nop
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d42:	4a9b      	ldr	r2, [pc, #620]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d4c:	4b98      	ldr	r3, [pc, #608]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	4a97      	ldr	r2, [pc, #604]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005d54:	f023 0304 	bic.w	r3, r3, #4
 8005d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fe fa4a 	bl	80041fc <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6c:	f7fe fa46 	bl	80041fc <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e12a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d82:	4b8b      	ldr	r3, [pc, #556]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ed      	beq.n	8005d6c <HAL_RCC_OscConfig+0x53c>
 8005d90:	e015      	b.n	8005dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fe fa33 	bl	80041fc <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fe fa2f 	bl	80041fc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e113      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005db0:	4b7f      	ldr	r3, [pc, #508]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ed      	bne.n	8005d9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dbe:	7ffb      	ldrb	r3, [r7, #31]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc8:	4a79      	ldr	r2, [pc, #484]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80fe 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	f040 80d0 	bne.w	8005f84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005de4:	4b72      	ldr	r3, [pc, #456]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f003 0203 	and.w	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d130      	bne.n	8005e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	3b01      	subs	r3, #1
 8005e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d127      	bne.n	8005e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d11f      	bne.n	8005e5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e24:	2a07      	cmp	r2, #7
 8005e26:	bf14      	ite	ne
 8005e28:	2201      	movne	r2, #1
 8005e2a:	2200      	moveq	r2, #0
 8005e2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d113      	bne.n	8005e5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d109      	bne.n	8005e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	3b01      	subs	r3, #1
 8005e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d06e      	beq.n	8005f38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d069      	beq.n	8005f34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e60:	4b53      	ldr	r3, [pc, #332]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e6c:	4b50      	ldr	r3, [pc, #320]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0ad      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a4b      	ldr	r2, [pc, #300]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e88:	f7fe f9b8 	bl	80041fc <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fe f9b4 	bl	80041fc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e09a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eae:	4b40      	ldr	r3, [pc, #256]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <HAL_RCC_OscConfig+0x784>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	0112      	lsls	r2, r2, #4
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ec8:	0212      	lsls	r2, r2, #8
 8005eca:	4311      	orrs	r1, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ed0:	0852      	lsrs	r2, r2, #1
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	0552      	lsls	r2, r2, #21
 8005ed6:	4311      	orrs	r1, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005edc:	0852      	lsrs	r2, r2, #1
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0652      	lsls	r2, r2, #25
 8005ee2:	4311      	orrs	r1, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ee8:	0912      	lsrs	r2, r2, #4
 8005eea:	0452      	lsls	r2, r2, #17
 8005eec:	430a      	orrs	r2, r1
 8005eee:	4930      	ldr	r1, [pc, #192]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f00:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f0c:	f7fe f976 	bl	80041fc <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fe f972 	bl	80041fc <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e058      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f26:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f32:	e050      	b.n	8005fd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e04f      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f38:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d148      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f44:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a19      	ldr	r2, [pc, #100]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f50:	4b17      	ldr	r3, [pc, #92]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a16      	ldr	r2, [pc, #88]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f5c:	f7fe f94e 	bl	80041fc <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f64:	f7fe f94a 	bl	80041fc <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e030      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f76:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x734>
 8005f82:	e028      	b.n	8005fd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b0c      	cmp	r3, #12
 8005f88:	d023      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <HAL_RCC_OscConfig+0x780>)
 8005f90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fe f931 	bl	80041fc <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f9c:	e00c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7fe f92d 	bl	80041fc <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d905      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e013      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <HAL_RCC_OscConfig+0x7b0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ec      	bne.n	8005f9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_RCC_OscConfig+0x7b0>)
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	4905      	ldr	r1, [pc, #20]	@ (8005fe0 <HAL_RCC_OscConfig+0x7b0>)
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <HAL_RCC_OscConfig+0x7b4>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60cb      	str	r3, [r1, #12]
 8005fd0:	e001      	b.n	8005fd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	feeefffc 	.word	0xfeeefffc

08005fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0e7      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b75      	ldr	r3, [pc, #468]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d910      	bls.n	800602c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b72      	ldr	r3, [pc, #456]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 0207 	bic.w	r2, r3, #7
 8006012:	4970      	ldr	r1, [pc, #448]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b6e      	ldr	r3, [pc, #440]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0cf      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	4b66      	ldr	r3, [pc, #408]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006044:	429a      	cmp	r2, r3
 8006046:	d908      	bls.n	800605a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006048:	4b63      	ldr	r3, [pc, #396]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4960      	ldr	r1, [pc, #384]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04c      	beq.n	8006100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800606e:	4b5a      	ldr	r3, [pc, #360]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d121      	bne.n	80060be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0a6      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006086:	4b54      	ldr	r3, [pc, #336]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d115      	bne.n	80060be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e09a      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800609e:	4b4e      	ldr	r3, [pc, #312]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e08e      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ae:	4b4a      	ldr	r3, [pc, #296]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e086      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060be:	4b46      	ldr	r3, [pc, #280]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 0203 	bic.w	r2, r3, #3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4943      	ldr	r1, [pc, #268]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d0:	f7fe f894 	bl	80041fc <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d8:	f7fe f890 	bl	80041fc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e06e      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	4b3a      	ldr	r3, [pc, #232]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 020c 	and.w	r2, r3, #12
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d1eb      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d010      	beq.n	800612e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	4b31      	ldr	r3, [pc, #196]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006118:	429a      	cmp	r2, r3
 800611a:	d208      	bcs.n	800612e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800611c:	4b2e      	ldr	r3, [pc, #184]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	492b      	ldr	r1, [pc, #172]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800612e:	4b29      	ldr	r3, [pc, #164]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d210      	bcs.n	800615e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613c:	4b25      	ldr	r3, [pc, #148]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 0207 	bic.w	r2, r3, #7
 8006144:	4923      	ldr	r1, [pc, #140]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800614c:	4b21      	ldr	r3, [pc, #132]	@ (80061d4 <HAL_RCC_ClockConfig+0x1ec>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d001      	beq.n	800615e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e036      	b.n	80061cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800616a:	4b1b      	ldr	r3, [pc, #108]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	4918      	ldr	r1, [pc, #96]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006178:	4313      	orrs	r3, r2
 800617a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006188:	4b13      	ldr	r3, [pc, #76]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4910      	ldr	r1, [pc, #64]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800619c:	f000 f824 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f0>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	490b      	ldr	r1, [pc, #44]	@ (80061dc <HAL_RCC_ClockConfig+0x1f4>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <HAL_RCC_ClockConfig+0x1f8>)
 80061ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061bc:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <HAL_RCC_ClockConfig+0x1fc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd ffcb 	bl	800415c <HAL_InitTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40022000 	.word	0x40022000
 80061d8:	40021000 	.word	0x40021000
 80061dc:	0800de18 	.word	0x0800de18
 80061e0:	20000018 	.word	0x20000018
 80061e4:	2000001c 	.word	0x2000001c

080061e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	@ 0x24
 80061ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f6:	4b3e      	ldr	r3, [pc, #248]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006200:	4b3b      	ldr	r3, [pc, #236]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x34>
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0c      	cmp	r3, #12
 8006214:	d121      	bne.n	800625a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d11e      	bne.n	800625a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800621c:	4b34      	ldr	r3, [pc, #208]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006228:	4b31      	ldr	r3, [pc, #196]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e005      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006238:	4b2d      	ldr	r3, [pc, #180]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006244:	4a2b      	ldr	r2, [pc, #172]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10d      	bne.n	8006270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006258:	e00a      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d102      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006260:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e004      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d101      	bne.n	8006270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800626c:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x114>)
 800626e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d134      	bne.n	80062e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006276:	4b1e      	ldr	r3, [pc, #120]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d003      	beq.n	800628e <HAL_RCC_GetSysClockFreq+0xa6>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d003      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0xac>
 800628c:	e005      	b.n	800629a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800628e:	4b1a      	ldr	r3, [pc, #104]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006290:	617b      	str	r3, [r7, #20]
      break;
 8006292:	e005      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006294:	4b19      	ldr	r3, [pc, #100]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x114>)
 8006296:	617b      	str	r3, [r7, #20]
      break;
 8006298:	e002      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	617b      	str	r3, [r7, #20]
      break;
 800629e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062a0:	4b13      	ldr	r3, [pc, #76]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	3301      	adds	r3, #1
 80062ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062ae:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	fb03 f202 	mul.w	r2, r3, r2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062c6:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	0e5b      	lsrs	r3, r3, #25
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	3301      	adds	r3, #1
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062e0:	69bb      	ldr	r3, [r7, #24]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3724      	adds	r7, #36	@ 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800de30 	.word	0x0800de30
 80062f8:	00f42400 	.word	0x00f42400
 80062fc:	007a1200 	.word	0x007a1200

08006300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <HAL_RCC_GetHCLKFreq+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000018 	.word	0x20000018

08006318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800631c:	f7ff fff0 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006320:	4602      	mov	r2, r0
 8006322:	4b06      	ldr	r3, [pc, #24]	@ (800633c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	4904      	ldr	r1, [pc, #16]	@ (8006340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800632e:	5ccb      	ldrb	r3, [r1, r3]
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006338:	4618      	mov	r0, r3
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40021000 	.word	0x40021000
 8006340:	0800de28 	.word	0x0800de28

08006344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006348:	f7ff ffda 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 800634c:	4602      	mov	r2, r0
 800634e:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	0adb      	lsrs	r3, r3, #11
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	4904      	ldr	r1, [pc, #16]	@ (800636c <HAL_RCC_GetPCLK2Freq+0x28>)
 800635a:	5ccb      	ldrb	r3, [r1, r3]
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006364:	4618      	mov	r0, r3
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40021000 	.word	0x40021000
 800636c:	0800de28 	.word	0x0800de28

08006370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800637c:	4b2a      	ldr	r3, [pc, #168]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006388:	f7ff f9ee 	bl	8005768 <HAL_PWREx_GetVoltageRange>
 800638c:	6178      	str	r0, [r7, #20]
 800638e:	e014      	b.n	80063ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006390:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006394:	4a24      	ldr	r2, [pc, #144]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800639a:	6593      	str	r3, [r2, #88]	@ 0x58
 800639c:	4b22      	ldr	r3, [pc, #136]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800639e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063a8:	f7ff f9de 	bl	8005768 <HAL_PWREx_GetVoltageRange>
 80063ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c0:	d10b      	bne.n	80063da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b80      	cmp	r3, #128	@ 0x80
 80063c6:	d919      	bls.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80063cc:	d902      	bls.n	80063d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ce:	2302      	movs	r3, #2
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	e013      	b.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063d4:	2301      	movs	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e010      	b.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b80      	cmp	r3, #128	@ 0x80
 80063de:	d902      	bls.n	80063e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063e0:	2303      	movs	r3, #3
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e00a      	b.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b80      	cmp	r3, #128	@ 0x80
 80063ea:	d102      	bne.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ec:	2302      	movs	r3, #2
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e004      	b.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b70      	cmp	r3, #112	@ 0x70
 80063f6:	d101      	bne.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063f8:	2301      	movs	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063fc:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 0207 	bic.w	r2, r3, #7
 8006404:	4909      	ldr	r1, [pc, #36]	@ (800642c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800640c:	4b07      	ldr	r3, [pc, #28]	@ (800642c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d001      	beq.n	800641e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40021000 	.word	0x40021000
 800642c:	40022000 	.word	0x40022000

08006430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006438:	2300      	movs	r3, #0
 800643a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800643c:	2300      	movs	r3, #0
 800643e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006448:	2b00      	cmp	r3, #0
 800644a:	d041      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006454:	d02a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800645a:	d824      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800645c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006460:	d008      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006466:	d81e      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006470:	d010      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006472:	e018      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006474:	4b86      	ldr	r3, [pc, #536]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4a85      	ldr	r2, [pc, #532]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800647a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800647e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006480:	e015      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fabb 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006492:	e00c      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3320      	adds	r3, #32
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fba6 	bl	8006bec <RCCEx_PLLSAI2_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	74fb      	strb	r3, [r7, #19]
      break;
 80064aa:	e000      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064b4:	4b76      	ldr	r3, [pc, #472]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064c2:	4973      	ldr	r1, [pc, #460]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80064ca:	e001      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d041      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e4:	d02a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064ea:	d824      	bhi.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f0:	d008      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f6:	d81e      	bhi.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006500:	d010      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006502:	e018      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006504:	4b62      	ldr	r3, [pc, #392]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a61      	ldr	r2, [pc, #388]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006510:	e015      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3304      	adds	r3, #4
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fa73 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 800651e:	4603      	mov	r3, r0
 8006520:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006522:	e00c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3320      	adds	r3, #32
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fb5e 	bl	8006bec <RCCEx_PLLSAI2_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	74fb      	strb	r3, [r7, #19]
      break;
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800653c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006544:	4b52      	ldr	r3, [pc, #328]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006552:	494f      	ldr	r1, [pc, #316]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800655a:	e001      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a0 	beq.w	80066ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656e:	2300      	movs	r3, #0
 8006570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006572:	4b47      	ldr	r3, [pc, #284]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006588:	4b41      	ldr	r3, [pc, #260]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658c:	4a40      	ldr	r2, [pc, #256]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006592:	6593      	str	r3, [r2, #88]	@ 0x58
 8006594:	4b3e      	ldr	r3, [pc, #248]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065a0:	2301      	movs	r3, #1
 80065a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3a      	ldr	r2, [pc, #232]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065b0:	f7fd fe24 	bl	80041fc <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b8:	f7fd fe20 	bl	80041fc <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d902      	bls.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	74fb      	strb	r3, [r7, #19]
        break;
 80065ca:	e005      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065cc:	4b31      	ldr	r3, [pc, #196]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0ef      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d15c      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065de:	4b2c      	ldr	r3, [pc, #176]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01f      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d019      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065fc:	4b24      	ldr	r3, [pc, #144]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006606:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006608:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	4a20      	ldr	r2, [pc, #128]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006618:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	4a1c      	ldr	r2, [pc, #112]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006628:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fd fddf 	bl	80041fc <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006640:	e00b      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006642:	f7fd fddb 	bl	80041fc <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006650:	4293      	cmp	r3, r2
 8006652:	d902      	bls.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	74fb      	strb	r3, [r7, #19]
            break;
 8006658:	e006      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ec      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666e:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800667e:	4904      	ldr	r1, [pc, #16]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006686:	e009      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006688:	7cfb      	ldrb	r3, [r7, #19]
 800668a:	74bb      	strb	r3, [r7, #18]
 800668c:	e006      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
 8006694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	7cfb      	ldrb	r3, [r7, #19]
 800669a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800669c:	7c7b      	ldrb	r3, [r7, #17]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d105      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a2:	4b9e      	ldr	r3, [pc, #632]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a6:	4a9d      	ldr	r2, [pc, #628]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066ba:	4b98      	ldr	r3, [pc, #608]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c0:	f023 0203 	bic.w	r2, r3, #3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c8:	4994      	ldr	r1, [pc, #592]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066dc:	4b8f      	ldr	r3, [pc, #572]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	f023 020c 	bic.w	r2, r3, #12
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	498c      	ldr	r1, [pc, #560]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066fe:	4b87      	ldr	r3, [pc, #540]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	4983      	ldr	r1, [pc, #524]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006720:	4b7e      	ldr	r3, [pc, #504]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	497b      	ldr	r1, [pc, #492]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006742:	4b76      	ldr	r3, [pc, #472]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006750:	4972      	ldr	r1, [pc, #456]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006764:	4b6d      	ldr	r3, [pc, #436]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006772:	496a      	ldr	r1, [pc, #424]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006786:	4b65      	ldr	r3, [pc, #404]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006794:	4961      	ldr	r1, [pc, #388]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067a8:	4b5c      	ldr	r3, [pc, #368]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b6:	4959      	ldr	r1, [pc, #356]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ca:	4b54      	ldr	r3, [pc, #336]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d8:	4950      	ldr	r1, [pc, #320]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ec:	4b4b      	ldr	r3, [pc, #300]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fa:	4948      	ldr	r1, [pc, #288]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800680e:	4b43      	ldr	r3, [pc, #268]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681c:	493f      	ldr	r1, [pc, #252]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d028      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006830:	4b3a      	ldr	r3, [pc, #232]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683e:	4937      	ldr	r1, [pc, #220]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800684e:	d106      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006850:	4b32      	ldr	r3, [pc, #200]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4a31      	ldr	r2, [pc, #196]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800685a:	60d3      	str	r3, [r2, #12]
 800685c:	e011      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006862:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006866:	d10c      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f8c8 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800687e:	7cfb      	ldrb	r3, [r7, #19]
 8006880:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d028      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800688e:	4b23      	ldr	r3, [pc, #140]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689c:	491f      	ldr	r1, [pc, #124]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ac:	d106      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ae:	4b1b      	ldr	r3, [pc, #108]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068b8:	60d3      	str	r3, [r2, #12]
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f899 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068d6:	7cfb      	ldrb	r3, [r7, #19]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80068dc:	7cfb      	ldrb	r3, [r7, #19]
 80068de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fa:	4908      	ldr	r1, [pc, #32]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800690a:	d109      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800690c:	4b03      	ldr	r3, [pc, #12]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4a02      	ldr	r2, [pc, #8]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006916:	60d3      	str	r3, [r2, #12]
 8006918:	e014      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800691a:	bf00      	nop
 800691c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006928:	d10c      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3304      	adds	r3, #4
 800692e:	2101      	movs	r1, #1
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f867 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800693a:	7cfb      	ldrb	r3, [r7, #19]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02f      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006950:	4b2b      	ldr	r3, [pc, #172]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006956:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800695e:	4928      	ldr	r1, [pc, #160]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800696a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800696e:	d10d      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	2102      	movs	r1, #2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f844 	bl	8006a04 <RCCEx_PLLSAI1_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006980:	7cfb      	ldrb	r3, [r7, #19]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d014      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	74bb      	strb	r3, [r7, #18]
 800698a:	e011      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006994:	d10c      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3320      	adds	r3, #32
 800699a:	2102      	movs	r1, #2
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f925 	bl	8006bec <RCCEx_PLLSAI2_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069ac:	7cfb      	ldrb	r3, [r7, #19]
 80069ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069bc:	4b10      	ldr	r3, [pc, #64]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ca:	490d      	ldr	r1, [pc, #52]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069de:	4b08      	ldr	r3, [pc, #32]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ee:	4904      	ldr	r1, [pc, #16]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40021000 	.word	0x40021000

08006a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a12:	4b75      	ldr	r3, [pc, #468]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d018      	beq.n	8006a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a1e:	4b72      	ldr	r3, [pc, #456]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0203 	and.w	r2, r3, #3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d10d      	bne.n	8006a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
       ||
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a36:	4b6c      	ldr	r3, [pc, #432]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
       ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d047      	beq.n	8006ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	e044      	b.n	8006ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d018      	beq.n	8006a8a <RCCEx_PLLSAI1_Config+0x86>
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d825      	bhi.n	8006aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d002      	beq.n	8006a66 <RCCEx_PLLSAI1_Config+0x62>
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d009      	beq.n	8006a78 <RCCEx_PLLSAI1_Config+0x74>
 8006a64:	e020      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a66:	4b60      	ldr	r3, [pc, #384]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d11d      	bne.n	8006aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a76:	e01a      	b.n	8006aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a78:	4b5b      	ldr	r3, [pc, #364]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d116      	bne.n	8006ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a88:	e013      	b.n	8006ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a8a:	4b57      	ldr	r3, [pc, #348]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10f      	bne.n	8006ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a96:	4b54      	ldr	r3, [pc, #336]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aa6:	e006      	b.n	8006ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006aac:	e004      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10d      	bne.n	8006ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006abe:	4b4a      	ldr	r3, [pc, #296]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	4944      	ldr	r1, [pc, #272]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d17d      	bne.n	8006bdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ae0:	4b41      	ldr	r3, [pc, #260]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a40      	ldr	r2, [pc, #256]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aec:	f7fd fb86 	bl	80041fc <HAL_GetTick>
 8006af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006af2:	e009      	b.n	8006b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006af4:	f7fd fb82 	bl	80041fc <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d902      	bls.n	8006b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	73fb      	strb	r3, [r7, #15]
        break;
 8006b06:	e005      	b.n	8006b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b08:	4b37      	ldr	r3, [pc, #220]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ef      	bne.n	8006af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d160      	bne.n	8006bdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d111      	bne.n	8006b44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b20:	4b31      	ldr	r3, [pc, #196]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6892      	ldr	r2, [r2, #8]
 8006b30:	0211      	lsls	r1, r2, #8
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68d2      	ldr	r2, [r2, #12]
 8006b36:	0912      	lsrs	r2, r2, #4
 8006b38:	0452      	lsls	r2, r2, #17
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	492a      	ldr	r1, [pc, #168]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
 8006b42:	e027      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d112      	bne.n	8006b70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b4a:	4b27      	ldr	r3, [pc, #156]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006b52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	0211      	lsls	r1, r2, #8
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6912      	ldr	r2, [r2, #16]
 8006b60:	0852      	lsrs	r2, r2, #1
 8006b62:	3a01      	subs	r2, #1
 8006b64:	0552      	lsls	r2, r2, #21
 8006b66:	430a      	orrs	r2, r1
 8006b68:	491f      	ldr	r1, [pc, #124]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	610b      	str	r3, [r1, #16]
 8006b6e:	e011      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b70:	4b1d      	ldr	r3, [pc, #116]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6892      	ldr	r2, [r2, #8]
 8006b80:	0211      	lsls	r1, r2, #8
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6952      	ldr	r2, [r2, #20]
 8006b86:	0852      	lsrs	r2, r2, #1
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	0652      	lsls	r2, r2, #25
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	4916      	ldr	r1, [pc, #88]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b94:	4b14      	ldr	r3, [pc, #80]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a13      	ldr	r2, [pc, #76]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fd fb2c 	bl	80041fc <HAL_GetTick>
 8006ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ba6:	e009      	b.n	8006bbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ba8:	f7fd fb28 	bl	80041fc <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d902      	bls.n	8006bbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8006bba:	e005      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bce:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	4904      	ldr	r1, [pc, #16]	@ (8006be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000

08006bec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c06:	4b67      	ldr	r3, [pc, #412]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0203 	and.w	r2, r3, #3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d10d      	bne.n	8006c32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
       ||
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006c1e:	4b61      	ldr	r3, [pc, #388]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d047      	beq.n	8006cc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e044      	b.n	8006cc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d018      	beq.n	8006c72 <RCCEx_PLLSAI2_Config+0x86>
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d825      	bhi.n	8006c90 <RCCEx_PLLSAI2_Config+0xa4>
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d002      	beq.n	8006c4e <RCCEx_PLLSAI2_Config+0x62>
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d009      	beq.n	8006c60 <RCCEx_PLLSAI2_Config+0x74>
 8006c4c:	e020      	b.n	8006c90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c4e:	4b55      	ldr	r3, [pc, #340]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d11d      	bne.n	8006c96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c5e:	e01a      	b.n	8006c96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c60:	4b50      	ldr	r3, [pc, #320]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d116      	bne.n	8006c9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c70:	e013      	b.n	8006c9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c72:	4b4c      	ldr	r3, [pc, #304]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c7e:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c8e:	e006      	b.n	8006c9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
      break;
 8006c94:	e004      	b.n	8006ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	4939      	ldr	r1, [pc, #228]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d167      	bne.n	8006d98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006cc8:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a35      	ldr	r2, [pc, #212]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd4:	f7fd fa92 	bl	80041fc <HAL_GetTick>
 8006cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cda:	e009      	b.n	8006cf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cdc:	f7fd fa8e 	bl	80041fc <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d902      	bls.n	8006cf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
        break;
 8006cee:	e005      	b.n	8006cfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ef      	bne.n	8006cdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14a      	bne.n	8006d98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d111      	bne.n	8006d2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d08:	4b26      	ldr	r3, [pc, #152]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6892      	ldr	r2, [r2, #8]
 8006d18:	0211      	lsls	r1, r2, #8
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	68d2      	ldr	r2, [r2, #12]
 8006d1e:	0912      	lsrs	r2, r2, #4
 8006d20:	0452      	lsls	r2, r2, #17
 8006d22:	430a      	orrs	r2, r1
 8006d24:	491f      	ldr	r1, [pc, #124]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	614b      	str	r3, [r1, #20]
 8006d2a:	e011      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6892      	ldr	r2, [r2, #8]
 8006d3c:	0211      	lsls	r1, r2, #8
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6912      	ldr	r2, [r2, #16]
 8006d42:	0852      	lsrs	r2, r2, #1
 8006d44:	3a01      	subs	r2, #1
 8006d46:	0652      	lsls	r2, r2, #25
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	4916      	ldr	r1, [pc, #88]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d50:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7fd fa4e 	bl	80041fc <HAL_GetTick>
 8006d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d62:	e009      	b.n	8006d78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d64:	f7fd fa4a 	bl	80041fc <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d902      	bls.n	8006d78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	73fb      	strb	r3, [r7, #15]
          break;
 8006d76:	e005      	b.n	8006d84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ef      	beq.n	8006d64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d8a:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d8c:	695a      	ldr	r2, [r3, #20]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4904      	ldr	r1, [pc, #16]	@ (8006da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000

08006da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e095      	b.n	8006ee6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d108      	bne.n	8006dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dca:	d009      	beq.n	8006de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	61da      	str	r2, [r3, #28]
 8006dd2:	e005      	b.n	8006de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f877 	bl	8006eee <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e20:	d902      	bls.n	8006e28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	e002      	b.n	8006e2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e36:	d007      	beq.n	8006e48 <HAL_SPI_Init+0xa0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8a:	ea42 0103 	orr.w	r1, r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	f003 0204 	and.w	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ec4:	ea42 0103 	orr.w	r1, r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b08a      	sub	sp, #40	@ 0x28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f10:	2301      	movs	r3, #1
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x26>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e1fb      	b.n	8007320 <HAL_SPI_TransmitReceive+0x41e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f30:	f7fd f964 	bl	80041fc <HAL_GetTick>
 8006f34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f44:	887b      	ldrh	r3, [r7, #2]
 8006f46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f48:	887b      	ldrh	r3, [r7, #2]
 8006f4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f4c:	7efb      	ldrb	r3, [r7, #27]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d00e      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x6e>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f58:	d106      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d102      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x66>
 8006f62:	7efb      	ldrb	r3, [r7, #27]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d003      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006f6e:	e1cd      	b.n	800730c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_SPI_TransmitReceive+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SPI_TransmitReceive+0x80>
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006f88:	e1c0      	b.n	800730c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d003      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2205      	movs	r2, #5
 8006f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	887a      	ldrh	r2, [r7, #2]
 8006fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	887a      	ldrh	r2, [r7, #2]
 8006fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	887a      	ldrh	r2, [r7, #2]
 8006fca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fe0:	d802      	bhi.n	8006fe8 <HAL_SPI_TransmitReceive+0xe6>
 8006fe2:	8a3b      	ldrh	r3, [r7, #16]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d908      	bls.n	8006ffa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ff6:	605a      	str	r2, [r3, #4]
 8006ff8:	e007      	b.n	800700a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	d007      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007030:	d97c      	bls.n	800712c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x13e>
 800703a:	8a7b      	ldrh	r3, [r7, #18]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d169      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	1c9a      	adds	r2, r3, #2
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007064:	e056      	b.n	8007114 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d11b      	bne.n	80070ac <HAL_SPI_TransmitReceive+0x1aa>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d016      	beq.n	80070ac <HAL_SPI_TransmitReceive+0x1aa>
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	2b01      	cmp	r3, #1
 8007082:	d113      	bne.n	80070ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007094:	1c9a      	adds	r2, r3, #2
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d11c      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x1f2>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	b292      	uxth	r2, r2
 80070d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	1c9a      	adds	r2, r3, #2
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070f0:	2301      	movs	r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070f4:	f7fd f882 	bl	80041fc <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007100:	429a      	cmp	r2, r3
 8007102:	d807      	bhi.n	8007114 <HAL_SPI_TransmitReceive+0x212>
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d003      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8007112:	e0fb      	b.n	800730c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1a3      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x164>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d19d      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x164>
 800712a:	e0df      	b.n	80072ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_SPI_TransmitReceive+0x23a>
 8007134:	8a7b      	ldrh	r3, [r7, #18]
 8007136:	2b01      	cmp	r3, #1
 8007138:	f040 80cb 	bne.w	80072d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d912      	bls.n	800716c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b02      	subs	r3, #2
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800716a:	e0b2      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007192:	e09e      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d134      	bne.n	800720c <HAL_SPI_TransmitReceive+0x30a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02f      	beq.n	800720c <HAL_SPI_TransmitReceive+0x30a>
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d12c      	bne.n	800720c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d912      	bls.n	80071e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	1c9a      	adds	r2, r3, #2
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b02      	subs	r3, #2
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071e0:	e012      	b.n	8007208 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	7812      	ldrb	r2, [r2, #0]
 80071ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	3b01      	subs	r3, #1
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b01      	cmp	r3, #1
 8007218:	d148      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x3aa>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d042      	beq.n	80072ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d923      	bls.n	800727a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	b292      	uxth	r2, r2
 800723e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b02      	subs	r3, #2
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d81f      	bhi.n	80072a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007276:	605a      	str	r2, [r3, #4]
 8007278:	e016      	b.n	80072a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f103 020c 	add.w	r2, r3, #12
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072a8:	2301      	movs	r3, #1
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072ac:	f7fc ffa6 	bl	80041fc <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d803      	bhi.n	80072c4 <HAL_SPI_TransmitReceive+0x3c2>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d102      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x3c8>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80072d0:	e01c      	b.n	800730c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f47f af5b 	bne.w	8007194 <HAL_SPI_TransmitReceive+0x292>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f47f af54 	bne.w	8007194 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f945 	bl	8007580 <SPI_EndRxTxTransaction>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d006      	beq.n	800730a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	661a      	str	r2, [r3, #96]	@ 0x60
 8007308:	e000      	b.n	800730c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800730a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800731c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	@ 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007354:	f7fc ff52 	bl	80041fc <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4413      	add	r3, r2
 8007362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007364:	f7fc ff4a 	bl	80041fc <HAL_GetTick>
 8007368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800736a:	4b39      	ldr	r3, [pc, #228]	@ (8007450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	015b      	lsls	r3, r3, #5
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800737a:	e054      	b.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d050      	beq.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007384:	f7fc ff3a 	bl	80041fc <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d902      	bls.n	800739a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13d      	bne.n	8007416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b2:	d111      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073bc:	d004      	beq.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c6:	d107      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e0:	d10f      	bne.n	8007402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e017      	b.n	8007446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3b01      	subs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d19b      	bne.n	800737c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000018 	.word	0x20000018

08007454 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	@ 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007466:	f7fc fec9 	bl	80041fc <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	4413      	add	r3, r2
 8007474:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007476:	f7fc fec1 	bl	80041fc <HAL_GetTick>
 800747a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007484:	4b3d      	ldr	r3, [pc, #244]	@ (800757c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00da      	lsls	r2, r3, #3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	0d1b      	lsrs	r3, r3, #20
 8007494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800749c:	e060      	b.n	8007560 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074a4:	d107      	bne.n	80074b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d050      	beq.n	8007560 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074be:	f7fc fe9d 	bl	80041fc <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d902      	bls.n	80074d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d13d      	bne.n	8007550 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074ec:	d111      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074f6:	d004      	beq.n	8007502 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007500:	d107      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007510:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800751a:	d10f      	bne.n	800753c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800753a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e010      	b.n	8007572 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	3b01      	subs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d196      	bne.n	800749e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3728      	adds	r7, #40	@ 0x28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000018 	.word	0x20000018

08007580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff ff5b 	bl	8007454 <SPI_WaitFifoStateUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a8:	f043 0220 	orr.w	r2, r3, #32
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e027      	b.n	8007604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff fec0 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e014      	b.n	8007604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff ff34 	bl	8007454 <SPI_WaitFifoStateUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f6:	f043 0220 	orr.w	r2, r3, #32
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e000      	b.n	8007604 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e040      	b.n	80076a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f83a 	bl	80076a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	@ 0x24
 8007638:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0201 	bic.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8ca 	bl	80077e4 <UART_SetConfig>
 8007650:	4603      	mov	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e022      	b.n	80076a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb76 	bl	8007d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fbfd 	bl	8007e98 <UART_CheckIdleState>
 800769e:	4603      	mov	r3, r0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	@ 0x28
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	f040 8081 	bne.w	80077d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_UART_Transmit+0x26>
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e079      	b.n	80077da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_UART_Transmit+0x38>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e072      	b.n	80077da <HAL_UART_Transmit+0x11e>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2221      	movs	r2, #33	@ 0x21
 8007708:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770a:	f7fc fd77 	bl	80041fc <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007728:	d108      	bne.n	800773c <HAL_UART_Transmit+0x80>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e003      	b.n	8007744 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 800774c:	e02c      	b.n	80077a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fbe6 	bl	8007f2a <UART_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e038      	b.n	80077da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777a:	b292      	uxth	r2, r2
 800777c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3302      	adds	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e007      	b.n	8007796 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1cc      	bne.n	800774e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2140      	movs	r1, #64	@ 0x40
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fbb3 	bl	8007f2a <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e005      	b.n	80077da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80077d8:	2302      	movs	r3, #2
  }
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e8:	b08a      	sub	sp, #40	@ 0x28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	431a      	orrs	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	4313      	orrs	r3, r2
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4ba4      	ldr	r3, [pc, #656]	@ (8007aa4 <UART_SetConfig+0x2c0>)
 8007814:	4013      	ands	r3, r2
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800781c:	430b      	orrs	r3, r1
 800781e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a99      	ldr	r2, [pc, #612]	@ (8007aa8 <UART_SetConfig+0x2c4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784c:	4313      	orrs	r3, r2
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a90      	ldr	r2, [pc, #576]	@ (8007aac <UART_SetConfig+0x2c8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d126      	bne.n	80078bc <UART_SetConfig+0xd8>
 800786e:	4b90      	ldr	r3, [pc, #576]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	2b03      	cmp	r3, #3
 800787a:	d81b      	bhi.n	80078b4 <UART_SetConfig+0xd0>
 800787c:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0xa0>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007895 	.word	0x08007895
 8007888:	080078a5 	.word	0x080078a5
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078ad 	.word	0x080078ad
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789a:	e116      	b.n	8007aca <UART_SetConfig+0x2e6>
 800789c:	2302      	movs	r3, #2
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a2:	e112      	b.n	8007aca <UART_SetConfig+0x2e6>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078aa:	e10e      	b.n	8007aca <UART_SetConfig+0x2e6>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b2:	e10a      	b.n	8007aca <UART_SetConfig+0x2e6>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ba:	e106      	b.n	8007aca <UART_SetConfig+0x2e6>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7c      	ldr	r2, [pc, #496]	@ (8007ab4 <UART_SetConfig+0x2d0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d138      	bne.n	8007938 <UART_SetConfig+0x154>
 80078c6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078cc:	f003 030c 	and.w	r3, r3, #12
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d82d      	bhi.n	8007930 <UART_SetConfig+0x14c>
 80078d4:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <UART_SetConfig+0xf8>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007931 	.word	0x08007931
 80078e4:	08007931 	.word	0x08007931
 80078e8:	08007931 	.word	0x08007931
 80078ec:	08007921 	.word	0x08007921
 80078f0:	08007931 	.word	0x08007931
 80078f4:	08007931 	.word	0x08007931
 80078f8:	08007931 	.word	0x08007931
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007931 	.word	0x08007931
 8007904:	08007931 	.word	0x08007931
 8007908:	08007931 	.word	0x08007931
 800790c:	08007929 	.word	0x08007929
 8007910:	2300      	movs	r3, #0
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e0d8      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007918:	2302      	movs	r3, #2
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791e:	e0d4      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e0d0      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792e:	e0cc      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007936:	e0c8      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab8 <UART_SetConfig+0x2d4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d125      	bne.n	800798e <UART_SetConfig+0x1aa>
 8007942:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007948:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800794c:	2b30      	cmp	r3, #48	@ 0x30
 800794e:	d016      	beq.n	800797e <UART_SetConfig+0x19a>
 8007950:	2b30      	cmp	r3, #48	@ 0x30
 8007952:	d818      	bhi.n	8007986 <UART_SetConfig+0x1a2>
 8007954:	2b20      	cmp	r3, #32
 8007956:	d00a      	beq.n	800796e <UART_SetConfig+0x18a>
 8007958:	2b20      	cmp	r3, #32
 800795a:	d814      	bhi.n	8007986 <UART_SetConfig+0x1a2>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <UART_SetConfig+0x182>
 8007960:	2b10      	cmp	r3, #16
 8007962:	d008      	beq.n	8007976 <UART_SetConfig+0x192>
 8007964:	e00f      	b.n	8007986 <UART_SetConfig+0x1a2>
 8007966:	2300      	movs	r3, #0
 8007968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796c:	e0ad      	b.n	8007aca <UART_SetConfig+0x2e6>
 800796e:	2302      	movs	r3, #2
 8007970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007974:	e0a9      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007976:	2304      	movs	r3, #4
 8007978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797c:	e0a5      	b.n	8007aca <UART_SetConfig+0x2e6>
 800797e:	2308      	movs	r3, #8
 8007980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007984:	e0a1      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007986:	2310      	movs	r3, #16
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798c:	e09d      	b.n	8007aca <UART_SetConfig+0x2e6>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a4a      	ldr	r2, [pc, #296]	@ (8007abc <UART_SetConfig+0x2d8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d125      	bne.n	80079e4 <UART_SetConfig+0x200>
 8007998:	4b45      	ldr	r3, [pc, #276]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a4:	d016      	beq.n	80079d4 <UART_SetConfig+0x1f0>
 80079a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a8:	d818      	bhi.n	80079dc <UART_SetConfig+0x1f8>
 80079aa:	2b80      	cmp	r3, #128	@ 0x80
 80079ac:	d00a      	beq.n	80079c4 <UART_SetConfig+0x1e0>
 80079ae:	2b80      	cmp	r3, #128	@ 0x80
 80079b0:	d814      	bhi.n	80079dc <UART_SetConfig+0x1f8>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <UART_SetConfig+0x1d8>
 80079b6:	2b40      	cmp	r3, #64	@ 0x40
 80079b8:	d008      	beq.n	80079cc <UART_SetConfig+0x1e8>
 80079ba:	e00f      	b.n	80079dc <UART_SetConfig+0x1f8>
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e082      	b.n	8007aca <UART_SetConfig+0x2e6>
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ca:	e07e      	b.n	8007aca <UART_SetConfig+0x2e6>
 80079cc:	2304      	movs	r3, #4
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d2:	e07a      	b.n	8007aca <UART_SetConfig+0x2e6>
 80079d4:	2308      	movs	r3, #8
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079da:	e076      	b.n	8007aca <UART_SetConfig+0x2e6>
 80079dc:	2310      	movs	r3, #16
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e072      	b.n	8007aca <UART_SetConfig+0x2e6>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <UART_SetConfig+0x2dc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d12a      	bne.n	8007a44 <UART_SetConfig+0x260>
 80079ee:	4b30      	ldr	r3, [pc, #192]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079fc:	d01a      	beq.n	8007a34 <UART_SetConfig+0x250>
 80079fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a02:	d81b      	bhi.n	8007a3c <UART_SetConfig+0x258>
 8007a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a08:	d00c      	beq.n	8007a24 <UART_SetConfig+0x240>
 8007a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0e:	d815      	bhi.n	8007a3c <UART_SetConfig+0x258>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <UART_SetConfig+0x238>
 8007a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a18:	d008      	beq.n	8007a2c <UART_SetConfig+0x248>
 8007a1a:	e00f      	b.n	8007a3c <UART_SetConfig+0x258>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a22:	e052      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2a:	e04e      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a32:	e04a      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3a:	e046      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a42:	e042      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a17      	ldr	r2, [pc, #92]	@ (8007aa8 <UART_SetConfig+0x2c4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d13a      	bne.n	8007ac4 <UART_SetConfig+0x2e0>
 8007a4e:	4b18      	ldr	r3, [pc, #96]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a5c:	d01a      	beq.n	8007a94 <UART_SetConfig+0x2b0>
 8007a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a62:	d81b      	bhi.n	8007a9c <UART_SetConfig+0x2b8>
 8007a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a68:	d00c      	beq.n	8007a84 <UART_SetConfig+0x2a0>
 8007a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a6e:	d815      	bhi.n	8007a9c <UART_SetConfig+0x2b8>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <UART_SetConfig+0x298>
 8007a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a78:	d008      	beq.n	8007a8c <UART_SetConfig+0x2a8>
 8007a7a:	e00f      	b.n	8007a9c <UART_SetConfig+0x2b8>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a82:	e022      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a84:	2302      	movs	r3, #2
 8007a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a8a:	e01e      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a92:	e01a      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a9a:	e016      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa2:	e012      	b.n	8007aca <UART_SetConfig+0x2e6>
 8007aa4:	efff69f3 	.word	0xefff69f3
 8007aa8:	40008000 	.word	0x40008000
 8007aac:	40013800 	.word	0x40013800
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	40004400 	.word	0x40004400
 8007ab8:	40004800 	.word	0x40004800
 8007abc:	40004c00 	.word	0x40004c00
 8007ac0:	40005000 	.word	0x40005000
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a9f      	ldr	r2, [pc, #636]	@ (8007d4c <UART_SetConfig+0x568>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d17a      	bne.n	8007bca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d824      	bhi.n	8007b26 <UART_SetConfig+0x342>
 8007adc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x300>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b17 	.word	0x08007b17
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b27 	.word	0x08007b27
 8007b04:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fe fc06 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b8f      	ldr	r3, [pc, #572]	@ (8007d50 <UART_SetConfig+0x56c>)
 8007b12:	61fb      	str	r3, [r7, #28]
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fe fb67 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8007b1a:	61f8      	str	r0, [r7, #28]
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b22:	61fb      	str	r3, [r7, #28]
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80fb 	beq.w	8007d30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d305      	bcc.n	8007b56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d903      	bls.n	8007b5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b5c:	e0e8      	b.n	8007d30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2200      	movs	r2, #0
 8007b62:	461c      	mov	r4, r3
 8007b64:	4615      	mov	r5, r2
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	022b      	lsls	r3, r5, #8
 8007b70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b74:	0222      	lsls	r2, r4, #8
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	6849      	ldr	r1, [r1, #4]
 8007b7a:	0849      	lsrs	r1, r1, #1
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	4688      	mov	r8, r1
 8007b80:	4681      	mov	r9, r0
 8007b82:	eb12 0a08 	adds.w	sl, r2, r8
 8007b86:	eb43 0b09 	adc.w	fp, r3, r9
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	f7f9 f854 	bl	8000c48 <__aeabi_uldivmod>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bae:	d308      	bcc.n	8007bc2 <UART_SetConfig+0x3de>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb6:	d204      	bcs.n	8007bc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e0b6      	b.n	8007d30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bc8:	e0b2      	b.n	8007d30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd2:	d15e      	bne.n	8007c92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d828      	bhi.n	8007c2e <UART_SetConfig+0x44a>
 8007bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x400>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c19 	.word	0x08007c19
 8007bf0:	08007c2f 	.word	0x08007c2f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c2f 	.word	0x08007c2f
 8007bfc:	08007c2f 	.word	0x08007c2f
 8007c00:	08007c2f 	.word	0x08007c2f
 8007c04:	08007c27 	.word	0x08007c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fe fb86 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	61f8      	str	r0, [r7, #28]
        break;
 8007c0e:	e014      	b.n	8007c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fe fb98 	bl	8006344 <HAL_RCC_GetPCLK2Freq>
 8007c14:	61f8      	str	r0, [r7, #28]
        break;
 8007c16:	e010      	b.n	8007c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b4d      	ldr	r3, [pc, #308]	@ (8007d50 <UART_SetConfig+0x56c>)
 8007c1a:	61fb      	str	r3, [r7, #28]
        break;
 8007c1c:	e00d      	b.n	8007c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1e:	f7fe fae3 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8007c22:	61f8      	str	r0, [r7, #28]
        break;
 8007c24:	e009      	b.n	8007c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c2a:	61fb      	str	r3, [r7, #28]
        break;
 8007c2c:	e005      	b.n	8007c3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d077      	beq.n	8007d30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	005a      	lsls	r2, r3, #1
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b0f      	cmp	r3, #15
 8007c5a:	d916      	bls.n	8007c8a <UART_SetConfig+0x4a6>
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c62:	d212      	bcs.n	8007c8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f023 030f 	bic.w	r3, r3, #15
 8007c6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	8afa      	ldrh	r2, [r7, #22]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e052      	b.n	8007d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c90:	e04e      	b.n	8007d30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d827      	bhi.n	8007cea <UART_SetConfig+0x506>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <UART_SetConfig+0x4bc>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	08007ceb 	.word	0x08007ceb
 8007cb0:	08007cdb 	.word	0x08007cdb
 8007cb4:	08007ceb 	.word	0x08007ceb
 8007cb8:	08007ceb 	.word	0x08007ceb
 8007cbc:	08007ceb 	.word	0x08007ceb
 8007cc0:	08007ce3 	.word	0x08007ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f7fe fb28 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	61f8      	str	r0, [r7, #28]
        break;
 8007cca:	e014      	b.n	8007cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ccc:	f7fe fb3a 	bl	8006344 <HAL_RCC_GetPCLK2Freq>
 8007cd0:	61f8      	str	r0, [r7, #28]
        break;
 8007cd2:	e010      	b.n	8007cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8007d50 <UART_SetConfig+0x56c>)
 8007cd6:	61fb      	str	r3, [r7, #28]
        break;
 8007cd8:	e00d      	b.n	8007cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cda:	f7fe fa85 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8007cde:	61f8      	str	r0, [r7, #28]
        break;
 8007ce0:	e009      	b.n	8007cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce6:	61fb      	str	r3, [r7, #28]
        break;
 8007ce8:	e005      	b.n	8007cf6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	085a      	lsrs	r2, r3, #1
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	441a      	add	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d909      	bls.n	8007d2a <UART_SetConfig+0x546>
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d1c:	d205      	bcs.n	8007d2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60da      	str	r2, [r3, #12]
 8007d28:	e002      	b.n	8007d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8007d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d4a:	bf00      	nop
 8007d4c:	40008000 	.word	0x40008000
 8007d50:	00f42400 	.word	0x00f42400

08007d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc6:	f003 0308 	and.w	r3, r3, #8
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01a      	beq.n	8007e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e52:	d10a      	bne.n	8007e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea8:	f7fc f9a8 	bl	80041fc <HAL_GetTick>
 8007eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d10e      	bne.n	8007eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f82d 	bl	8007f2a <UART_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e023      	b.n	8007f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d10e      	bne.n	8007f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f817 	bl	8007f2a <UART_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e00d      	b.n	8007f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b09c      	sub	sp, #112	@ 0x70
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	4613      	mov	r3, r2
 8007f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3a:	e0a5      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	f000 80a1 	beq.w	8008088 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f46:	f7fc f959 	bl	80041fc <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d13e      	bne.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f6c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007f70:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e6      	bne.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fae:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007fb0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e067      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d04f      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff6:	d147      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008000:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
 8008022:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e6      	bne.n	8008002 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3308      	adds	r3, #8
 800803a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	613b      	str	r3, [r7, #16]
   return(result);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008054:	623a      	str	r2, [r7, #32]
 8008056:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	69f9      	ldr	r1, [r7, #28]
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	61bb      	str	r3, [r7, #24]
   return(result);
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e5      	bne.n	8008034 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2220      	movs	r2, #32
 800806c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e010      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f43f af4a 	beq.w	8007f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3770      	adds	r7, #112	@ 0x70
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80080b2:	b590      	push	{r4, r7, lr}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	461a      	mov	r2, r3
 80080be:	460b      	mov	r3, r1
 80080c0:	72fb      	strb	r3, [r7, #11]
 80080c2:	4613      	mov	r3, r2
 80080c4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <hts221_read_reg+0x20>
  {
    return -1;
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	e009      	b.n	80080e6 <hts221_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	685c      	ldr	r4, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68d8      	ldr	r0, [r3, #12]
 80080da:	893b      	ldrh	r3, [r7, #8]
 80080dc:	7af9      	ldrb	r1, [r7, #11]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	47a0      	blx	r4
 80080e2:	6178      	str	r0, [r7, #20]

  return ret;
 80080e4:	697b      	ldr	r3, [r7, #20]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd90      	pop	{r4, r7, pc}

080080ee <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                const uint8_t *data,
                                uint16_t len)
{
 80080ee:	b590      	push	{r4, r7, lr}
 80080f0:	b087      	sub	sp, #28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	461a      	mov	r2, r3
 80080fa:	460b      	mov	r3, r1
 80080fc:	72fb      	strb	r3, [r7, #11]
 80080fe:	4613      	mov	r3, r2
 8008100:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <hts221_write_reg+0x20>
  {
    return -1;
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
 800810c:	e009      	b.n	8008122 <hts221_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	68d8      	ldr	r0, [r3, #12]
 8008116:	893b      	ldrh	r3, [r7, #8]
 8008118:	7af9      	ldrb	r1, [r7, #11]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	47a0      	blx	r4
 800811e:	6178      	str	r0, [r7, #20]

  return ret;
 8008120:	697b      	ldr	r3, [r7, #20]
}
 8008122:	4618      	mov	r0, r3
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd90      	pop	{r4, r7, pc}

0800812a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	2301      	movs	r3, #1
 800813c:	2120      	movs	r1, #32
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff ffb7 	bl	80080b2 <hts221_read_reg>
 8008144:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10f      	bne.n	800816c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	b2da      	uxtb	r2, r3
 8008154:	7a3b      	ldrb	r3, [r7, #8]
 8008156:	f362 0301 	bfi	r3, r2, #0, #2
 800815a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	2301      	movs	r3, #1
 8008162:	2120      	movs	r1, #32
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff ffc2 	bl	80080ee <hts221_write_reg>
 800816a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800816c:	68fb      	ldr	r3, [r7, #12]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008182:	f107 0208 	add.w	r2, r7, #8
 8008186:	2301      	movs	r3, #1
 8008188:	2120      	movs	r1, #32
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ff91 	bl	80080b2 <hts221_read_reg>
 8008190:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10f      	bne.n	80081b8 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	7a3b      	ldrb	r3, [r7, #8]
 80081a2:	f362 0382 	bfi	r3, r2, #2, #1
 80081a6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80081a8:	f107 0208 	add.w	r2, r7, #8
 80081ac:	2301      	movs	r3, #1
 80081ae:	2120      	movs	r1, #32
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff ff9c 	bl	80080ee <hts221_write_reg>
 80081b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081b8:	68fb      	ldr	r3, [r7, #12]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	2302      	movs	r3, #2
 80081d2:	2128      	movs	r1, #40	@ 0x28
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff6c 	bl	80080b2 <hts221_read_reg>
 80081da:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80081dc:	7a7b      	ldrb	r3, [r7, #9]
 80081de:	b21a      	sxth	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	7a3a      	ldrb	r2, [r7, #8]
 80081f2:	4413      	add	r3, r2
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	b21a      	sxth	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80081fc:	68fb      	ldr	r3, [r7, #12]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	2301      	movs	r3, #1
 8008218:	2120      	movs	r1, #32
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff ff49 	bl	80080b2 <hts221_read_reg>
 8008220:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	7a3b      	ldrb	r3, [r7, #8]
 8008232:	f362 13c7 	bfi	r3, r2, #7, #1
 8008236:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008238:	f107 0208 	add.w	r2, r7, #8
 800823c:	2301      	movs	r3, #1
 800823e:	2120      	movs	r1, #32
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ff54 	bl	80080ee <hts221_write_reg>
 8008246:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008248:	68fb      	ldr	r3, [r7, #12]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800825c:	f107 020b 	add.w	r2, r7, #11
 8008260:	2301      	movs	r3, #1
 8008262:	2130      	movs	r1, #48	@ 0x30
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ff24 	bl	80080b2 <hts221_read_reg>
 800826a:	60f8      	str	r0, [r7, #12]
  *val = (float_t)coeff / 2.0f;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008276:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800827a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8008284:	68fb      	ldr	r3, [r7, #12]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8008298:	f107 020b 	add.w	r2, r7, #11
 800829c:	2301      	movs	r3, #1
 800829e:	2131      	movs	r1, #49	@ 0x31
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff ff06 	bl	80080b2 <hts221_read_reg>
 80082a6:	60f8      	str	r0, [r7, #12]
  *val = (float_t)coeff / 2.0f;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80082b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80082c0:	68fb      	ldr	r3, [r7, #12]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80082d4:	f107 0208 	add.w	r2, r7, #8
 80082d8:	2302      	movs	r3, #2
 80082da:	2136      	movs	r1, #54	@ 0x36
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff fee8 	bl	80080b2 <hts221_read_reg>
 80082e2:	60f8      	str	r0, [r7, #12]
  coeff = ((int16_t)coeff_p[1] * 256) + (int16_t)coeff_p[0];
 80082e4:	7a7b      	ldrb	r3, [r7, #9]
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	7a3a      	ldrb	r2, [r7, #8]
 80082ec:	4413      	add	r3, r2
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	817b      	strh	r3, [r7, #10]
  *val = (float_t)coeff * 1.0f;
 80082f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8008318:	f107 0208 	add.w	r2, r7, #8
 800831c:	2302      	movs	r3, #2
 800831e:	213a      	movs	r1, #58	@ 0x3a
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fec6 	bl	80080b2 <hts221_read_reg>
 8008326:	60f8      	str	r0, [r7, #12]
  coeff = ((int16_t)coeff_p[1] * 256) + (int16_t)coeff_p[0];
 8008328:	7a7b      	ldrb	r3, [r7, #9]
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	b29b      	uxth	r3, r3
 800832e:	7a3a      	ldrb	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	817b      	strh	r3, [r7, #10]
  *val = (float_t)coeff * 1.0f;
 8008336:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008352:	b590      	push	{r4, r7, lr}
 8008354:	b087      	sub	sp, #28
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	461a      	mov	r2, r3
 800835e:	460b      	mov	r3, r1
 8008360:	72fb      	strb	r3, [r7, #11]
 8008362:	4613      	mov	r3, r2
 8008364:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <lps22hh_read_reg+0x20>
  {
    return -1;
 800836c:	f04f 33ff 	mov.w	r3, #4294967295
 8008370:	e009      	b.n	8008386 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685c      	ldr	r4, [r3, #4]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68d8      	ldr	r0, [r3, #12]
 800837a:	893b      	ldrh	r3, [r7, #8]
 800837c:	7af9      	ldrb	r1, [r7, #11]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	47a0      	blx	r4
 8008382:	6178      	str	r0, [r7, #20]

  return ret;
 8008384:	697b      	ldr	r3, [r7, #20]
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bd90      	pop	{r4, r7, pc}

0800838e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 const uint8_t *data,
                                 uint16_t len)
{
 800838e:	b590      	push	{r4, r7, lr}
 8008390:	b087      	sub	sp, #28
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	461a      	mov	r2, r3
 800839a:	460b      	mov	r3, r1
 800839c:	72fb      	strb	r3, [r7, #11]
 800839e:	4613      	mov	r3, r2
 80083a0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <lps22hh_write_reg+0x20>
  {
    return -1;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ac:	e009      	b.n	80083c2 <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681c      	ldr	r4, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68d8      	ldr	r0, [r3, #12]
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	7af9      	ldrb	r1, [r7, #11]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	47a0      	blx	r4
 80083be:	6178      	str	r0, [r7, #20]

  return ret;
 80083c0:	697b      	ldr	r3, [r7, #20]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd90      	pop	{r4, r7, pc}
	...

080083cc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80083f8 <lps22hh_from_lsb_to_hpa+0x2c>
 80083e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80083ea:	eeb0 0a67 	vmov.f32	s0, s15
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	49800000 	.word	0x49800000

080083fc <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8008406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008412:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800842c <lps22hh_from_lsb_to_celsius+0x30>
 8008416:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800841a:	eef0 7a66 	vmov.f32	s15, s13
}
 800841e:	eeb0 0a67 	vmov.f32	s0, s15
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	42c80000 	.word	0x42c80000

08008430 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800843c:	f107 0208 	add.w	r2, r7, #8
 8008440:	2301      	movs	r3, #1
 8008442:	2110      	movs	r1, #16
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ff84 	bl	8008352 <lps22hh_read_reg>
 800844a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10f      	bne.n	8008472 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	b2da      	uxtb	r2, r3
 800845a:	7a3b      	ldrb	r3, [r7, #8]
 800845c:	f362 0341 	bfi	r3, r2, #1, #1
 8008460:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8008462:	f107 0208 	add.w	r2, r7, #8
 8008466:	2301      	movs	r3, #1
 8008468:	2110      	movs	r1, #16
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff ff8f 	bl	800838e <lps22hh_write_reg>
 8008470:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008472:	68fb      	ldr	r3, [r7, #12]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8008488:	f107 0210 	add.w	r2, r7, #16
 800848c:	2301      	movs	r3, #1
 800848e:	2110      	movs	r1, #16
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ff5e 	bl	8008352 <lps22hh_read_reg>
 8008496:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d107      	bne.n	80084ae <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800849e:	f107 020c 	add.w	r2, r7, #12
 80084a2:	2301      	movs	r3, #1
 80084a4:	2111      	movs	r1, #17
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ff53 	bl	8008352 <lps22hh_read_reg>
 80084ac:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10f      	bne.n	80084d4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	7c3b      	ldrb	r3, [r7, #16]
 80084be:	f362 1306 	bfi	r3, r2, #4, #3
 80084c2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80084c4:	f107 0210 	add.w	r2, r7, #16
 80084c8:	2301      	movs	r3, #1
 80084ca:	2110      	movs	r1, #16
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff ff5e 	bl	800838e <lps22hh_write_reg>
 80084d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d119      	bne.n	800850e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	091b      	lsrs	r3, r3, #4
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	7b3b      	ldrb	r3, [r7, #12]
 80084e6:	f362 0341 	bfi	r3, r2, #1, #1
 80084ea:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	7b3b      	ldrb	r3, [r7, #12]
 80084f8:	f362 0300 	bfi	r3, r2, #0, #1
 80084fc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80084fe:	f107 020c 	add.w	r2, r7, #12
 8008502:	2301      	movs	r3, #1
 8008504:	2111      	movs	r1, #17
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff41 	bl	800838e <lps22hh_write_reg>
 800850c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800850e:	697b      	ldr	r3, [r7, #20]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8008522:	f107 0208 	add.w	r2, r7, #8
 8008526:	2303      	movs	r3, #3
 8008528:	2128      	movs	r1, #40	@ 0x28
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff ff11 	bl	8008352 <lps22hh_read_reg>
 8008530:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8008532:	7abb      	ldrb	r3, [r7, #10]
 8008534:	461a      	mov	r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	7a7a      	ldrb	r2, [r7, #9]
 8008542:	441a      	add	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	7a3a      	ldrb	r2, [r7, #8]
 8008550:	441a      	add	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	021a      	lsls	r2, r3, #8
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	601a      	str	r2, [r3, #0]

  return ret;
 8008560:	68fb      	ldr	r3, [r7, #12]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8008574:	f107 0208 	add.w	r2, r7, #8
 8008578:	2302      	movs	r3, #2
 800857a:	212b      	movs	r1, #43	@ 0x2b
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fee8 	bl	8008352 <lps22hh_read_reg>
 8008582:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8008584:	7a7b      	ldrb	r3, [r7, #9]
 8008586:	b21a      	sxth	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008592:	b29b      	uxth	r3, r3
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	b29b      	uxth	r3, r3
 8008598:	7a3a      	ldrb	r2, [r7, #8]
 800859a:	4413      	add	r3, r2
 800859c:	b29b      	uxth	r3, r3
 800859e:	b21a      	sxth	r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	801a      	strh	r2, [r3, #0]

  return ret;
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80085ba:	f107 0208 	add.w	r2, r7, #8
 80085be:	2301      	movs	r3, #1
 80085c0:	2111      	movs	r1, #17
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff fec5 	bl	8008352 <lps22hh_read_reg>
 80085c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10f      	bne.n	80085f0 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	7a3b      	ldrb	r3, [r7, #8]
 80085da:	f362 0382 	bfi	r3, r2, #2, #1
 80085de:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80085e0:	f107 0208 	add.w	r2, r7, #8
 80085e4:	2301      	movs	r3, #1
 80085e6:	2111      	movs	r1, #17
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff fed0 	bl	800838e <lps22hh_write_reg>
 80085ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80085f0:	68fb      	ldr	r3, [r7, #12]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8008604:	f107 0208 	add.w	r2, r7, #8
 8008608:	2301      	movs	r3, #1
 800860a:	2111      	movs	r1, #17
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fea0 	bl	8008352 <lps22hh_read_reg>
 8008612:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8008614:	7a3b      	ldrb	r3, [r7, #8]
 8008616:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800861a:	b2db      	uxtb	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	701a      	strb	r2, [r3, #0]

  return ret;
 8008622:	68fb      	ldr	r3, [r7, #12]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800862c:	b5b0      	push	{r4, r5, r7, lr}
 800862e:	b0ce      	sub	sp, #312	@ 0x138
 8008630:	af00      	add	r7, sp, #0
 8008632:	4605      	mov	r5, r0
 8008634:	460c      	mov	r4, r1
 8008636:	4610      	mov	r0, r2
 8008638:	4619      	mov	r1, r3
 800863a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800863e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008642:	462a      	mov	r2, r5
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800864a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800864e:	4622      	mov	r2, r4
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008656:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800865a:	4602      	mov	r2, r0
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008662:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008666:	460a      	mov	r2, r1
 8008668:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800866a:	f107 030c 	add.w	r3, r7, #12
 800866e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008672:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008676:	3308      	adds	r3, #8
 8008678:	f107 020c 	add.w	r2, r7, #12
 800867c:	4413      	add	r3, r2
 800867e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008682:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008686:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800868a:	4413      	add	r3, r2
 800868c:	3309      	adds	r3, #9
 800868e:	f107 020c 	add.w	r2, r7, #12
 8008692:	4413      	add	r3, r2
 8008694:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800869c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80086aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086ae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80086b2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086ba:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80086be:	3301      	adds	r3, #1
 80086c0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80086c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80086cc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80086d0:	8812      	ldrh	r2, [r2, #0]
 80086d2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80086d6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80086da:	3302      	adds	r3, #2
 80086dc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80086e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086e4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80086e8:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80086ec:	8812      	ldrh	r2, [r2, #0]
 80086ee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80086f2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80086f6:	3302      	adds	r3, #2
 80086f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80086fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008700:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008704:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800870c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008710:	3301      	adds	r3, #1
 8008712:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008716:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800871a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800871e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008720:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008724:	3301      	adds	r3, #1
 8008726:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800872a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800872e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008732:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008734:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008738:	3301      	adds	r3, #1
 800873a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800873e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008742:	3308      	adds	r3, #8
 8008744:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008748:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800874c:	4618      	mov	r0, r3
 800874e:	f003 fc7a 	bl	800c046 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8008752:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008756:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800875a:	4413      	add	r3, r2
 800875c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008760:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008764:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008768:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800876a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800876e:	3301      	adds	r3, #1
 8008770:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008774:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008778:	3301      	adds	r3, #1
 800877a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800877e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8008782:	4618      	mov	r0, r3
 8008784:	f003 fc5f 	bl	800c046 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8008788:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800878c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008790:	4413      	add	r3, r2
 8008792:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008796:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800879a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800879e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80087a0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80087a4:	3302      	adds	r3, #2
 80087a6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80087aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087ae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80087b2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80087b4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80087b8:	3302      	adds	r3, #2
 80087ba:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087c2:	2218      	movs	r2, #24
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 fbbd 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 80087cc:	233f      	movs	r3, #63	@ 0x3f
 80087ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80087d2:	2383      	movs	r3, #131	@ 0x83
 80087d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80087e0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80087e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80087e8:	f107 030b 	add.w	r3, r7, #11
 80087ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80087f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f002 fb21 	bl	800ae44 <hci_send_req>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	da01      	bge.n	800880c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008808:	23ff      	movs	r3, #255	@ 0xff
 800880a:	e00d      	b.n	8008828 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800880c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008810:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <aci_gap_set_discoverable+0x1fa>
    return status;
 800881a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800881e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	e000      	b.n	8008828 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800882e:	46bd      	mov	sp, r7
 8008830:	bdb0      	pop	{r4, r5, r7, pc}

08008832 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008832:	b5b0      	push	{r4, r5, r7, lr}
 8008834:	b0cc      	sub	sp, #304	@ 0x130
 8008836:	af00      	add	r7, sp, #0
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4610      	mov	r0, r2
 800883e:	4619      	mov	r1, r3
 8008840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008844:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008848:	462a      	mov	r2, r5
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008850:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008854:	4622      	mov	r2, r4
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800885c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008860:	4602      	mov	r2, r0
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008868:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800886c:	460a      	mov	r2, r1
 800886e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008870:	f107 030c 	add.w	r3, r7, #12
 8008874:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800887c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800888a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800888e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008892:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800889a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800889e:	3301      	adds	r3, #1
 80088a0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80088a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088ac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80088b0:	7812      	ldrb	r2, [r2, #0]
 80088b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088b4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088b8:	3301      	adds	r3, #1
 80088ba:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 80088be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088c6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088ce:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088d2:	3301      	adds	r3, #1
 80088d4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80088d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088e0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80088e8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088ec:	3301      	adds	r3, #1
 80088ee:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 80088f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088f6:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80088fa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80088fc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008900:	3301      	adds	r3, #1
 8008902:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008906:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800890a:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800890e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008910:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008914:	3301      	adds	r3, #1
 8008916:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800891e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008922:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008924:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008928:	3301      	adds	r3, #1
 800892a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800892e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008932:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008936:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800893a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800893e:	3304      	adds	r3, #4
 8008940:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008944:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008948:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800894c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800894e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008952:	3301      	adds	r3, #1
 8008954:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008958:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800895c:	2218      	movs	r2, #24
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f003 faf0 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008966:	233f      	movs	r3, #63	@ 0x3f
 8008968:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800896c:	2386      	movs	r3, #134	@ 0x86
 800896e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008972:	f107 030c 	add.w	r3, r7, #12
 8008976:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800897a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800897e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008982:	f107 030b 	add.w	r3, r7, #11
 8008986:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800898a:	2301      	movs	r3, #1
 800898c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f002 fa54 	bl	800ae44 <hci_send_req>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da01      	bge.n	80089a6 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80089a2:	23ff      	movs	r3, #255	@ 0xff
 80089a4:	e00d      	b.n	80089c2 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 80089a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089aa:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 80089b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089b8:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	e000      	b.n	80089c2 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bdb0      	pop	{r4, r5, r7, pc}

080089cc <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b0cf      	sub	sp, #316	@ 0x13c
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	4611      	mov	r1, r2
 80089d8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80089dc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089e6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80089ea:	4622      	mov	r2, r4
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089f2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80089f6:	4602      	mov	r2, r0
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089fe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008a02:	460a      	mov	r2, r1
 8008a04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008a06:	f107 0314 	add.w	r3, r7, #20
 8008a0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a0e:	f107 030c 	add.w	r3, r7, #12
 8008a12:	2207      	movs	r2, #7
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f003 fa95 	bl	800bf46 <memset>
  uint8_t index_input = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 8008a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a2a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008a2e:	7812      	ldrb	r2, [r2, #0]
 8008a30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a32:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008a36:	3301      	adds	r3, #1
 8008a38:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008a3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a44:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a4c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008a50:	3301      	adds	r3, #1
 8008a52:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a5a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a5e:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a66:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008a74:	2218      	movs	r2, #24
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f003 fa64 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008a7e:	233f      	movs	r3, #63	@ 0x3f
 8008a80:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 8008a84:	238a      	movs	r3, #138	@ 0x8a
 8008a86:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008a8a:	f107 0314 	add.w	r3, r7, #20
 8008a8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008a92:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008a96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008a9a:	f107 030c 	add.w	r3, r7, #12
 8008a9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008aa2:	2307      	movs	r3, #7
 8008aa4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008aa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008aac:	2100      	movs	r1, #0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f002 f9c8 	bl	800ae44 <hci_send_req>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da01      	bge.n	8008abe <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008aba:	23ff      	movs	r3, #255	@ 0xff
 8008abc:	e02e      	b.n	8008b1c <aci_gap_init+0x150>
  if (resp.Status) {
 8008abe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ac2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <aci_gap_init+0x10c>
    return resp.Status;
 8008acc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	e021      	b.n	8008b1c <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ae0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008af2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008af6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008afa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008b04:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b0e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b18:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}

08008b26 <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b0cc      	sub	sp, #304	@ 0x130
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008b36:	6019      	str	r1, [r3, #0]
 8008b38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b3c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008b40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008b42:	f107 030c 	add.w	r3, r7, #12
 8008b46:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b4e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b60:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b64:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b6c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008b70:	3301      	adds	r3, #1
 8008b72:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 8008b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b7a:	1c58      	adds	r0, r3, #1
 8008b7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	f003 fa59 	bl	800c046 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 8008b94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b98:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008b9c:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bac:	2218      	movs	r2, #24
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f003 f9c8 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008bb6:	233f      	movs	r3, #63	@ 0x3f
 8008bb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008bbc:	238e      	movs	r3, #142	@ 0x8e
 8008bbe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008bc2:	f107 030c 	add.w	r3, r7, #12
 8008bc6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008bca:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008bce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008bd2:	f107 030b 	add.w	r3, r7, #11
 8008bd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008be0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f002 f92c 	bl	800ae44 <hci_send_req>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da01      	bge.n	8008bf6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008bf2:	23ff      	movs	r3, #255	@ 0xff
 8008bf4:	e00d      	b.n	8008c12 <aci_gap_update_adv_data+0xec>
  if (status) {
 8008bf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bfa:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <aci_gap_update_adv_data+0xea>
    return status;
 8008c04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c08:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	e000      	b.n	8008c12 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c26:	f107 0308 	add.w	r3, r7, #8
 8008c2a:	2218      	movs	r2, #24
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f003 f989 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008c34:	233f      	movs	r3, #63	@ 0x3f
 8008c36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008c38:	f240 1301 	movw	r3, #257	@ 0x101
 8008c3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c3e:	1dfb      	adds	r3, r7, #7
 8008c40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c42:	2301      	movs	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008c46:	f107 0308 	add.w	r3, r7, #8
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f002 f8f9 	bl	800ae44 <hci_send_req>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	da01      	bge.n	8008c5c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008c58:	23ff      	movs	r3, #255	@ 0xff
 8008c5a:	e005      	b.n	8008c68 <aci_gatt_init+0x4c>
  if (status) {
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <aci_gatt_init+0x4a>
    return status;
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	e000      	b.n	8008c68 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3720      	adds	r7, #32
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b0cf      	sub	sp, #316	@ 0x13c
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008c7c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008c80:	6001      	str	r1, [r0, #0]
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c8a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c8e:	4622      	mov	r2, r4
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c96:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ca2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008ca6:	460a      	mov	r2, r1
 8008ca8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cb6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d00a      	beq.n	8008cd6 <aci_gatt_add_service+0x66>
 8008cc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cc4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d101      	bne.n	8008cd2 <aci_gatt_add_service+0x62>
 8008cce:	2311      	movs	r3, #17
 8008cd0:	e002      	b.n	8008cd8 <aci_gatt_add_service+0x68>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <aci_gatt_add_service+0x68>
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	f107 020c 	add.w	r2, r7, #12
 8008cdc:	4413      	add	r3, r2
 8008cde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f003 f92b 	bl	800bf46 <memset>
  uint8_t index_input = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008cfa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cfe:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d06:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8008d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d14:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d002      	beq.n	8008d24 <aci_gatt_add_service+0xb4>
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d004      	beq.n	8008d2c <aci_gatt_add_service+0xbc>
 8008d22:	e007      	b.n	8008d34 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8008d24:	2302      	movs	r3, #2
 8008d26:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008d2a:	e005      	b.n	8008d38 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008d32:	e001      	b.n	8008d38 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008d34:	2347      	movs	r3, #71	@ 0x47
 8008d36:	e06c      	b.n	8008e12 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008d38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d3c:	1c58      	adds	r0, r3, #1
 8008d3e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8008d42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d4a:	6819      	ldr	r1, [r3, #0]
 8008d4c:	f003 f97b 	bl	800c046 <memcpy>
    index_input += size;
 8008d50:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008d54:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8008d58:	4413      	add	r3, r2
 8008d5a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8008d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d62:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d66:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008d6e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d72:	3301      	adds	r3, #1
 8008d74:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d7c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d80:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008d84:	7812      	ldrb	r2, [r2, #0]
 8008d86:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008d88:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d96:	2218      	movs	r2, #24
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f003 f8d3 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008da0:	233f      	movs	r3, #63	@ 0x3f
 8008da2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008da6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008daa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008db6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008dba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008dcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f002 f836 	bl	800ae44 <hci_send_req>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da01      	bge.n	8008de2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008dde:	23ff      	movs	r3, #255	@ 0xff
 8008de0:	e017      	b.n	8008e12 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8008de2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008de6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008df4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	e00a      	b.n	8008e12 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008dfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e00:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008e04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008e0e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd90      	pop	{r4, r7, pc}

08008e1c <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b0d1      	sub	sp, #324	@ 0x144
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008e2a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008e2e:	600a      	str	r2, [r1, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e36:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e42:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e46:	4602      	mov	r2, r0
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e4e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008e52:	460a      	mov	r2, r1
 8008e54:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008e5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e62:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d00a      	beq.n	8008e82 <aci_gatt_add_char+0x66>
 8008e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e70:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d101      	bne.n	8008e7e <aci_gatt_add_char+0x62>
 8008e7a:	2313      	movs	r3, #19
 8008e7c:	e002      	b.n	8008e84 <aci_gatt_add_char+0x68>
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e000      	b.n	8008e84 <aci_gatt_add_char+0x68>
 8008e82:	2305      	movs	r3, #5
 8008e84:	f107 0214 	add.w	r2, r7, #20
 8008e88:	4413      	add	r3, r2
 8008e8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e8e:	f107 0310 	add.w	r3, r7, #16
 8008e92:	2203      	movs	r2, #3
 8008e94:	2100      	movs	r1, #0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f003 f855 	bl	800bf46 <memset>
  uint8_t index_input = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008ea6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008eaa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008eae:	8812      	ldrh	r2, [r2, #0]
 8008eb0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008eb2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008ebc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008ec0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008ec4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ecc:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8008ed6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008eda:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d002      	beq.n	8008eea <aci_gatt_add_char+0xce>
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d004      	beq.n	8008ef2 <aci_gatt_add_char+0xd6>
 8008ee8:	e007      	b.n	8008efa <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8008eea:	2302      	movs	r3, #2
 8008eec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008ef0:	e005      	b.n	8008efe <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008ef2:	2310      	movs	r3, #16
 8008ef4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008ef8:	e001      	b.n	8008efe <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008efa:	2347      	movs	r3, #71	@ 0x47
 8008efc:	e091      	b.n	8009022 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8008efe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008f02:	1cd8      	adds	r0, r3, #3
 8008f04:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008f08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f0c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f10:	6819      	ldr	r1, [r3, #0]
 8008f12:	f003 f898 	bl	800c046 <memcpy>
    index_input += size;
 8008f16:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8008f1a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008f1e:	4413      	add	r3, r2
 8008f20:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8008f24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f28:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008f2c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008f30:	8812      	ldrh	r2, [r2, #0]
 8008f32:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008f34:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f38:	3302      	adds	r3, #2
 8008f3a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f42:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008f46:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008f48:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8008f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f56:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008f5a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008f5c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f60:	3301      	adds	r3, #1
 8008f62:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8008f66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f6a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8008f6e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008f70:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f74:	3301      	adds	r3, #1
 8008f76:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8008f7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f7e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008f82:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008f84:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f88:	3301      	adds	r3, #1
 8008f8a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8008f8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f92:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008f96:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008f98:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008fa2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008fa6:	2218      	movs	r2, #24
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f002 ffcb 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8008fb0:	233f      	movs	r3, #63	@ 0x3f
 8008fb2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008fb6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008fba:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008fbe:	f107 0314 	add.w	r3, r7, #20
 8008fc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008fc6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008fca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008fce:	f107 0310 	add.w	r3, r7, #16
 8008fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008fdc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 ff2e 	bl	800ae44 <hci_send_req>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da01      	bge.n	8008ff2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008fee:	23ff      	movs	r3, #255	@ 0xff
 8008ff0:	e017      	b.n	8009022 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8008ff2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ff6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009000:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009004:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	e00a      	b.n	8009022 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800900c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009010:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009014:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009018:	b29a      	uxth	r2, r3
 800901a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800901e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009028:	46bd      	mov	sp, r7
 800902a:	bd90      	pop	{r4, r7, pc}

0800902c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800902c:	b5b0      	push	{r4, r5, r7, lr}
 800902e:	b0cc      	sub	sp, #304	@ 0x130
 8009030:	af00      	add	r7, sp, #0
 8009032:	4605      	mov	r5, r0
 8009034:	460c      	mov	r4, r1
 8009036:	4610      	mov	r0, r2
 8009038:	4619      	mov	r1, r3
 800903a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800903e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009042:	462a      	mov	r2, r5
 8009044:	801a      	strh	r2, [r3, #0]
 8009046:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800904a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800904e:	4622      	mov	r2, r4
 8009050:	801a      	strh	r2, [r3, #0]
 8009052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009056:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800905a:	4602      	mov	r2, r0
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009062:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009066:	460a      	mov	r2, r1
 8009068:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800906a:	f107 030c 	add.w	r3, r7, #12
 800906e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009076:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800907a:	2200      	movs	r2, #0
 800907c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009084:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009088:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800908c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009094:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009098:	3302      	adds	r3, #2
 800909a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800909e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090a6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80090aa:	8812      	ldrh	r2, [r2, #0]
 80090ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80090ae:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80090b2:	3302      	adds	r3, #2
 80090b4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80090b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090c0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80090c4:	7812      	ldrb	r2, [r2, #0]
 80090c6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80090c8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80090cc:	3301      	adds	r3, #1
 80090ce:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80090d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090da:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80090e2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80090e6:	3301      	adds	r3, #1
 80090e8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80090ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090f0:	1d98      	adds	r0, r3, #6
 80090f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090f6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009102:	f002 ffa0 	bl	800c046 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8009106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800910a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800910e:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	4413      	add	r3, r2
 8009116:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800911a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800911e:	2218      	movs	r2, #24
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f002 ff0f 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 8009128:	233f      	movs	r3, #63	@ 0x3f
 800912a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800912e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009132:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009136:	f107 030c 	add.w	r3, r7, #12
 800913a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800913e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009142:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009146:	f107 030b 	add.w	r3, r7, #11
 800914a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800914e:	2301      	movs	r3, #1
 8009150:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009154:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fe72 	bl	800ae44 <hci_send_req>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	da01      	bge.n	800916a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009166:	23ff      	movs	r3, #255	@ 0xff
 8009168:	e00d      	b.n	8009186 <aci_gatt_update_char_value+0x15a>
  if (status) {
 800916a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800916e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <aci_gatt_update_char_value+0x158>
    return status;
 8009178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800917c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	e000      	b.n	8009186 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800918c:	46bd      	mov	sp, r7
 800918e:	bdb0      	pop	{r4, r5, r7, pc}

08009190 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b0cc      	sub	sp, #304	@ 0x130
 8009194:	af00      	add	r7, sp, #0
 8009196:	4602      	mov	r2, r0
 8009198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800919c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80091a0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80091a2:	f107 030c 	add.w	r3, r7, #12
 80091a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80091aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091ae:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80091bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80091c4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80091cc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80091d0:	3302      	adds	r3, #2
 80091d2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091da:	2218      	movs	r2, #24
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 feb1 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 80091e4:	233f      	movs	r3, #63	@ 0x3f
 80091e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 80091ea:	f240 1327 	movw	r3, #295	@ 0x127
 80091ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80091f2:	f107 030c 	add.w	r3, r7, #12
 80091f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80091fa:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80091fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009202:	f107 030b 	add.w	r3, r7, #11
 8009206:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800920a:	2301      	movs	r3, #1
 800920c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009214:	2100      	movs	r1, #0
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fe14 	bl	800ae44 <hci_send_req>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	da01      	bge.n	8009226 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8009222:	23ff      	movs	r3, #255	@ 0xff
 8009224:	e00d      	b.n	8009242 <aci_gatt_allow_read+0xb2>
  if (status) {
 8009226:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800922a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <aci_gatt_allow_read+0xb0>
    return status;
 8009234:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009238:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	e000      	b.n	8009242 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b0ee      	sub	sp, #440	@ 0x1b8
 8009250:	af00      	add	r7, sp, #0
 8009252:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009256:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800925a:	6019      	str	r1, [r3, #0]
 800925c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009260:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800926a:	f2a3 13a9 	subw	r3, r3, #425	@ 0x1a9
 800926e:	4602      	mov	r2, r0
 8009270:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8009272:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009276:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800927a:	f107 0314 	add.w	r3, r7, #20
 800927e:	2280      	movs	r2, #128	@ 0x80
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f002 fe5f 	bl	800bf46 <memset>
  uint8_t index_input = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  cp0->Offset = htob(Offset, 1);
 800928e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8009292:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8009296:	f2a2 12a9 	subw	r2, r2, #425	@ 0x1a9
 800929a:	7812      	ldrb	r2, [r2, #0]
 800929c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800929e:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80092a2:	3301      	adds	r3, #1
 80092a4:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092a8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80092ac:	2218      	movs	r2, #24
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f002 fe48 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 80092b6:	233f      	movs	r3, #63	@ 0x3f
 80092b8:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
  rq.ocf = 0x00d;
 80092bc:	230d      	movs	r3, #13
 80092be:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
  rq.cparam = cmd_buffer;
 80092c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80092c6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  rq.clen = index_input;
 80092ca:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80092ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  rq.rparam = &resp;
 80092d2:	f107 0314 	add.w	r3, r7, #20
 80092d6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  rq.rlen = sizeof(resp);
 80092da:	2380      	movs	r3, #128	@ 0x80
 80092dc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 80092e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 fdac 	bl	800ae44 <hci_send_req>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da01      	bge.n	80092f6 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80092f2:	23ff      	movs	r3, #255	@ 0xff
 80092f4:	e029      	b.n	800934a <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 80092f6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80092fa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8009304:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009308:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	e01c      	b.n	800934a <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8009310:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009314:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8009318:	785a      	ldrb	r2, [r3, #1]
 800931a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800931e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009326:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800932a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f107 0314 	add.w	r3, r7, #20
 8009338:	1c99      	adds	r1, r3, #2
 800933a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800933e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	f002 fe7f 	bl	800c046 <memcpy>
  return BLE_STATUS_SUCCESS;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b0cc      	sub	sp, #304	@ 0x130
 8009358:	af00      	add	r7, sp, #0
 800935a:	4602      	mov	r2, r0
 800935c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009360:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800936a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800936e:	460a      	mov	r2, r1
 8009370:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009372:	f107 030c 	add.w	r3, r7, #12
 8009376:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800937a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800937e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009382:	2200      	movs	r2, #0
 8009384:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800938c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009390:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009394:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800939c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80093a0:	3301      	adds	r3, #1
 80093a2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80093a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093ae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80093b2:	7812      	ldrb	r2, [r2, #0]
 80093b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80093b6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80093ba:	3301      	adds	r3, #1
 80093bc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093c4:	2218      	movs	r2, #24
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 fdbc 	bl	800bf46 <memset>
  rq.ogf = 0x3f;
 80093ce:	233f      	movs	r3, #63	@ 0x3f
 80093d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80093d4:	230f      	movs	r3, #15
 80093d6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80093da:	f107 030c 	add.w	r3, r7, #12
 80093de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80093e2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80093e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80093ea:	f107 030b 	add.w	r3, r7, #11
 80093ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80093f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 fd20 	bl	800ae44 <hci_send_req>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	da01      	bge.n	800940e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800940a:	23ff      	movs	r3, #255	@ 0xff
 800940c:	e00d      	b.n	800942a <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 800940e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009412:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <aci_hal_set_tx_power_level+0xd4>
    return status;
 800941c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009420:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	e000      	b.n	800942a <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	7818      	ldrb	r0, [r3, #0]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800944e:	b299      	uxth	r1, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	78db      	ldrb	r3, [r3, #3]
 8009454:	461a      	mov	r2, r3
 8009456:	f7f9 f929 	bl	80026ac <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	7818      	ldrb	r0, [r3, #0]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800947e:	b299      	uxth	r1, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	78db      	ldrb	r3, [r3, #3]
 8009484:	461a      	mov	r2, r3
 8009486:	f000 ffca 	bl	800a41e <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af02      	add	r7, sp, #8
 800949a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800949c:	2300      	movs	r3, #0
 800949e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	7818      	ldrb	r0, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80094ae:	b299      	uxth	r1, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	78da      	ldrb	r2, [r3, #3]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	889b      	ldrh	r3, [r3, #4]
 80094b8:	b29c      	uxth	r4, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4623      	mov	r3, r4
 80094c4:	f000 ffba 	bl	800a43c <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}

080094d2 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 ffbc 	bl	800a464 <hci_hardware_error_event>

  return status;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b0a6      	sub	sp, #152	@ 0x98
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80094fe:	2300      	movs	r3, #0
 8009500:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009510:	2300      	movs	r3, #0
 8009512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009516:	e02e      	b.n	8009576 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8009518:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800951c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009528:	b29a      	uxth	r2, r3
 800952a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	3398      	adds	r3, #152	@ 0x98
 8009532:	443b      	add	r3, r7
 8009534:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009538:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800953c:	3302      	adds	r3, #2
 800953e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009542:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009552:	b29a      	uxth	r2, r3
 8009554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	3398      	adds	r3, #152	@ 0x98
 800955c:	443b      	add	r3, r7
 800955e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009562:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009566:	3302      	adds	r3, #2
 8009568:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800956c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009570:	3301      	adds	r3, #1
 8009572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009576:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	461a      	mov	r2, r3
 800957e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009582:	4293      	cmp	r3, r2
 8009584:	dbc8      	blt.n	8009518 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	f107 0208 	add.w	r2, r7, #8
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff71 	bl	800a47a <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8009598:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800959c:	4618      	mov	r0, r3
 800959e:	3798      	adds	r7, #152	@ 0x98
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 ff6a 	bl	800a492 <hci_data_buffer_overflow_event>

  return status;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f000 ff5e 	bl	800a4a8 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f001 f9e6 	bl	800a9dc <aci_blue_initialized_event>

  return status;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4618      	mov	r0, r3
 800962e:	f001 f9e0 	bl	800a9f2 <aci_blue_events_lost_event>

  return status;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800963c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009640:	b08d      	sub	sp, #52	@ 0x34
 8009642:	af08      	add	r7, sp, #32
 8009644:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f893 c000 	ldrb.w	ip, [r3]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800967a:	68b8      	ldr	r0, [r7, #8]
 800967c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8009680:	68bc      	ldr	r4, [r7, #8]
 8009682:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8009686:	68bd      	ldr	r5, [r7, #8]
 8009688:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 800968c:	68be      	ldr	r6, [r7, #8]
 800968e:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009696:	9307      	str	r3, [sp, #28]
 8009698:	9606      	str	r6, [sp, #24]
 800969a:	9505      	str	r5, [sp, #20]
 800969c:	9404      	str	r4, [sp, #16]
 800969e:	9003      	str	r0, [sp, #12]
 80096a0:	9102      	str	r1, [sp, #8]
 80096a2:	9201      	str	r2, [sp, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	464b      	mov	r3, r9
 80096aa:	4642      	mov	r2, r8
 80096ac:	4671      	mov	r1, lr
 80096ae:	4660      	mov	r0, ip
 80096b0:	f001 f9a9 	bl	800aa06 <aci_blue_crash_info_event>

  return status;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080096c0 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	7818      	ldrb	r0, [r3, #0]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	7859      	ldrb	r1, [r3, #1]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80096de:	461a      	mov	r2, r3
 80096e0:	f001 f99f 	bl	800aa22 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f993 0000 	ldrsb.w	r0, [r3]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800970c:	461a      	mov	r2, r3
 800970e:	f001 f996 	bl	800aa3e <aci_hal_scan_req_report_event>

  return status;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	7818      	ldrb	r0, [r3, #0]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009738:	461a      	mov	r2, r3
 800973a:	f001 f98e 	bl	800aa5a <aci_hal_fw_error_event>

  return status;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8009754:	f000 ff3e 	bl	800a5d4 <aci_gap_limited_discoverable_event>

  return status;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b298      	uxth	r0, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	7899      	ldrb	r1, [r3, #2]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	78db      	ldrb	r3, [r3, #3]
 8009780:	461a      	mov	r2, r3
 8009782:	f000 ff2e 	bl	800a5e2 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 ff2a 	bl	800a600 <aci_gap_pass_key_req_event>

  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 ff22 	bl	800a616 <aci_gap_authorization_req_event>

  return status;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80097e8:	f000 ff20 	bl	800a62c <aci_gap_slave_security_initiated_event>

  return status;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8009802:	f000 ff1a 	bl	800a63a <aci_gap_bond_lost_event>

  return status;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	7818      	ldrb	r0, [r3, #0]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	7859      	ldrb	r1, [r3, #1]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009830:	f000 ff0a 	bl	800a648 <aci_gap_proc_complete_event>

  return status;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	4618      	mov	r0, r3
 8009856:	f000 ff07 	bl	800a668 <aci_gap_addr_not_resolved_event>

  return status;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29a      	uxth	r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f000 fefb 	bl	800a67e <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	789b      	ldrb	r3, [r3, #2]
 80098ac:	4619      	mov	r1, r3
 80098ae:	4610      	mov	r0, r2
 80098b0:	f000 fef1 	bl	800a696 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	885b      	ldrh	r3, [r3, #2]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f001 f839 	bl	800a954 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b298      	uxth	r0, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800990a:	461a      	mov	r2, r3
 800990c:	f001 f830 	bl	800a970 <aci_l2cap_proc_timeout_event>

  return status;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800991a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800991c:	b089      	sub	sp, #36	@ 0x24
 800991e:	af04      	add	r7, sp, #16
 8009920:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b298      	uxth	r0, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	789c      	ldrb	r4, [r3, #2]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800993a:	b29d      	uxth	r5, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009942:	b29e      	uxth	r6, r3
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800994a:	b29b      	uxth	r3, r3
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8009952:	b292      	uxth	r2, r2
 8009954:	68b9      	ldr	r1, [r7, #8]
 8009956:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800995a:	b289      	uxth	r1, r1
 800995c:	9102      	str	r1, [sp, #8]
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	4633      	mov	r3, r6
 8009964:	462a      	mov	r2, r5
 8009966:	4621      	mov	r1, r4
 8009968:	f001 f810 	bl	800a98c <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009976 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8009976:	b590      	push	{r4, r7, lr}
 8009978:	b087      	sub	sp, #28
 800997a:	af02      	add	r7, sp, #8
 800997c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b298      	uxth	r0, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	7899      	ldrb	r1, [r3, #2]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009996:	b29a      	uxth	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	4623      	mov	r3, r4
 80099a4:	f001 f806 	bl	800a9b4 <aci_l2cap_command_reject_event>

  return status;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd90      	pop	{r4, r7, pc}

080099b2 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af02      	add	r7, sp, #8
 80099b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b298      	uxth	r0, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	885b      	ldrh	r3, [r3, #2]
 80099cc:	b299      	uxth	r1, r3
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	889b      	ldrh	r3, [r3, #4]
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	88db      	ldrh	r3, [r3, #6]
 80099d8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4623      	mov	r3, r4
 80099e2:	f000 fe66 	bl	800a6b2 <aci_gatt_attribute_modified_event>

  return status;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd90      	pop	{r4, r7, pc}

080099f0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fe67 	bl	800a6da <aci_gatt_proc_timeout_event>

  return status;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f000 fe5b 	bl	800a6f0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b298      	uxth	r0, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	7899      	ldrb	r1, [r3, #2]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009a66:	f000 fe51 	bl	800a70c <aci_att_find_info_resp_event>

  return status;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b0a6      	sub	sp, #152	@ 0x98
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a94:	e02e      	b.n	8009af4 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8009a96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	3398      	adds	r3, #152	@ 0x98
 8009ab0:	443b      	add	r3, r7
 8009ab2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009ab6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009aba:	3302      	adds	r3, #2
 8009abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009ac0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	3398      	adds	r3, #152	@ 0x98
 8009ada:	443b      	add	r3, r7
 8009adc:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009ae0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aee:	3301      	adds	r3, #1
 8009af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009af8:	789b      	ldrb	r3, [r3, #2]
 8009afa:	461a      	mov	r2, r3
 8009afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b00:	4293      	cmp	r3, r2
 8009b02:	dbc8      	blt.n	8009a96 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8009b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b298      	uxth	r0, r3
 8009b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b10:	789b      	ldrb	r3, [r3, #2]
 8009b12:	f107 0208 	add.w	r2, r7, #8
 8009b16:	4619      	mov	r1, r3
 8009b18:	f000 fe08 	bl	800a72c <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8009b1c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3798      	adds	r7, #152	@ 0x98
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b298      	uxth	r0, r3
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	7899      	ldrb	r1, [r3, #2]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009b4a:	f000 fdfd 	bl	800a748 <aci_att_read_by_type_resp_event>

  return status;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b298      	uxth	r0, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009b76:	461a      	mov	r2, r3
 8009b78:	f000 fdf6 	bl	800a768 <aci_att_read_resp_event>

  return status;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	b298      	uxth	r0, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f000 fded 	bl	800a784 <aci_att_read_blob_resp_event>

  return status;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b298      	uxth	r0, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f000 fde4 	bl	800a7a0 <aci_att_read_multiple_resp_event>

  return status;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b298      	uxth	r0, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	7899      	ldrb	r1, [r3, #2]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009c04:	f000 fdda 	bl	800a7bc <aci_att_read_by_group_type_resp_event>

  return status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b087      	sub	sp, #28
 8009c16:	af02      	add	r7, sp, #8
 8009c18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b298      	uxth	r0, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	885b      	ldrh	r3, [r3, #2]
 8009c2c:	b299      	uxth	r1, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	889b      	ldrh	r3, [r3, #4]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4623      	mov	r3, r4
 8009c40:	f000 fdcc 	bl	800a7dc <aci_att_prepare_write_resp_event>

  return status;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd90      	pop	{r4, r7, pc}

08009c4e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fdcd 	bl	800a804 <aci_att_exec_write_resp_event>

  return status;
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b298      	uxth	r0, r3
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	885b      	ldrh	r3, [r3, #2]
 8009c8e:	b299      	uxth	r1, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009c98:	f000 fdbf 	bl	800a81a <aci_gatt_indication_event>

  return status;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b298      	uxth	r0, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	885b      	ldrh	r3, [r3, #2]
 8009cc0:	b299      	uxth	r1, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009cca:	f000 fdb6 	bl	800a83a <aci_gatt_notification_event>

  return status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	789b      	ldrb	r3, [r3, #2]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f000 fdb0 	bl	800a85a <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b298      	uxth	r0, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	7899      	ldrb	r1, [r3, #2]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	795b      	ldrb	r3, [r3, #5]
 8009d2a:	f000 fda4 	bl	800a876 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b298      	uxth	r0, r3
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	b299      	uxth	r1, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009d5c:	f000 fd9f 	bl	800a89e <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b298      	uxth	r0, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	885b      	ldrh	r3, [r3, #2]
 8009d84:	b299      	uxth	r1, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009d8e:	f000 fd96 	bl	800a8be <aci_gatt_write_permit_req_event>

  return status;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b298      	uxth	r0, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	b299      	uxth	r1, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	889b      	ldrh	r3, [r3, #4]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7f8 fc94 	bl	80026ec <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b0a6      	sub	sp, #152	@ 0x98
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8009de2:	2303      	movs	r3, #3
 8009de4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009de8:	2300      	movs	r3, #0
 8009dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dee:	e019      	b.n	8009e24 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8009df0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	3398      	adds	r3, #152	@ 0x98
 8009e0a:	443b      	add	r3, r7
 8009e0c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009e10:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009e14:	3302      	adds	r3, #2
 8009e16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e1e:	3301      	adds	r3, #1
 8009e20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e28:	789b      	ldrb	r3, [r3, #2]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e30:	4293      	cmp	r3, r2
 8009e32:	dbdd      	blt.n	8009df0 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8009e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	b298      	uxth	r0, r3
 8009e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	f107 0208 	add.w	r2, r7, #8
 8009e46:	4619      	mov	r1, r3
 8009e48:	f000 fd49 	bl	800a8de <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8009e4c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3798      	adds	r7, #152	@ 0x98
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f000 fd3f 	bl	800a8fa <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fd3a 	bl	800a916 <aci_gatt_server_confirmation_event>

  return status;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b298      	uxth	r0, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	b299      	uxth	r1, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	889b      	ldrh	r3, [r3, #4]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4623      	mov	r3, r4
 8009eda:	f000 fd27 	bl	800a92c <aci_gatt_prepare_write_permit_req_event>

  return status;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd90      	pop	{r4, r7, pc}

08009ee8 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eea:	b08b      	sub	sp, #44	@ 0x2c
 8009eec:	af06      	add	r7, sp, #24
 8009eee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	781d      	ldrb	r5, [r3, #0]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f02:	b29e      	uxth	r6, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f893 c003 	ldrb.w	ip, [r3, #3]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	68b9      	ldr	r1, [r7, #8]
 8009f1e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8009f22:	b289      	uxth	r1, r1
 8009f24:	68b8      	ldr	r0, [r7, #8]
 8009f26:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8009f2a:	b280      	uxth	r0, r0
 8009f2c:	68bc      	ldr	r4, [r7, #8]
 8009f2e:	7c64      	ldrb	r4, [r4, #17]
 8009f30:	9404      	str	r4, [sp, #16]
 8009f32:	9003      	str	r0, [sp, #12]
 8009f34:	9102      	str	r1, [sp, #8]
 8009f36:	9201      	str	r2, [sp, #4]
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	4673      	mov	r3, lr
 8009f3c:	4662      	mov	r2, ip
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	f7f8 fb93 	bl	800266c <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f50 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b0a4      	sub	sp, #144	@ 0x90
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f70:	e0b3      	b.n	800a0da <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8009f72:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009f76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	440b      	add	r3, r1
 8009f86:	3301      	adds	r3, #1
 8009f88:	7819      	ldrb	r1, [r3, #0]
 8009f8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	3390      	adds	r3, #144	@ 0x90
 8009f98:	443b      	add	r3, r7
 8009f9a:	3b88      	subs	r3, #136	@ 0x88
 8009f9c:	460a      	mov	r2, r1
 8009f9e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009fa0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8009faa:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009fae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3302      	adds	r3, #2
 8009fc0:	7819      	ldrb	r1, [r3, #0]
 8009fc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	3390      	adds	r3, #144	@ 0x90
 8009fd0:	443b      	add	r3, r7
 8009fd2:	3b87      	subs	r3, #135	@ 0x87
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009fd8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009fdc:	3301      	adds	r3, #1
 8009fde:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8009fe2:	f107 0108 	add.w	r1, r7, #8
 8009fe6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	1c98      	adds	r0, r3, #2
 8009ff6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	4413      	add	r3, r2
 800a004:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a008:	4413      	add	r3, r2
 800a00a:	3303      	adds	r3, #3
 800a00c:	2206      	movs	r2, #6
 800a00e:	4619      	mov	r1, r3
 800a010:	f002 f819 	bl	800c046 <memcpy>
    size += 6;
 800a014:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a018:	3306      	adds	r3, #6
 800a01a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800a01e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800a022:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	440b      	add	r3, r1
 800a032:	3309      	adds	r3, #9
 800a034:	7819      	ldrb	r1, [r3, #0]
 800a036:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	3390      	adds	r3, #144	@ 0x90
 800a044:	443b      	add	r3, r7
 800a046:	3b80      	subs	r3, #128	@ 0x80
 800a048:	460a      	mov	r2, r1
 800a04a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a04c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a050:	3301      	adds	r3, #1
 800a052:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800a056:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	4413      	add	r3, r2
 800a064:	3308      	adds	r3, #8
 800a066:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a06a:	4413      	add	r3, r2
 800a06c:	1c99      	adds	r1, r3, #2
 800a06e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a072:	4613      	mov	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	3390      	adds	r3, #144	@ 0x90
 800a07c:	443b      	add	r3, r7
 800a07e:	3b7c      	subs	r3, #124	@ 0x7c
 800a080:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800a082:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800a086:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4413      	add	r3, r2
 800a094:	440b      	add	r3, r1
 800a096:	3309      	adds	r3, #9
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a09e:	4413      	add	r3, r2
 800a0a0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800a0a4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b259      	sxtb	r1, r3
 800a0b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	3390      	adds	r3, #144	@ 0x90
 800a0be:	443b      	add	r3, r7
 800a0c0:	3b78      	subs	r3, #120	@ 0x78
 800a0c2:	460a      	mov	r2, r1
 800a0c4:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a0c6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a0d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	f6ff af43 	blt.w	8009f72 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a0ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f107 0208 	add.w	r2, r7, #8
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f9e3 	bl	800a4c4 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a0fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800a102:	4618      	mov	r0, r3
 800a104:	3790      	adds	r7, #144	@ 0x90
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a10a:	b590      	push	{r4, r7, lr}
 800a10c:	b087      	sub	sp, #28
 800a10e:	af02      	add	r7, sp, #8
 800a110:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	7818      	ldrb	r0, [r3, #0]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a124:	b299      	uxth	r1, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a134:	b29c      	uxth	r4, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4623      	mov	r3, r4
 800a142:	f000 f9cb 	bl	800a4dc <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}

0800a150 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	7818      	ldrb	r0, [r3, #0]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a16a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a170:	461a      	mov	r2, r3
 800a172:	f000 f9c7 	bl	800a504 <hci_le_read_remote_used_features_complete_event>

  return status;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	895b      	ldrh	r3, [r3, #10]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f000 f9bd 	bl	800a520 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a1b0:	b590      	push	{r4, r7, lr}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b298      	uxth	r0, r3
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	885b      	ldrh	r3, [r3, #2]
 800a1ca:	b299      	uxth	r1, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	889b      	ldrh	r3, [r3, #4]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	88db      	ldrh	r3, [r3, #6]
 800a1d6:	b29c      	uxth	r4, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	891b      	ldrh	r3, [r3, #8]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	f000 f9ab 	bl	800a53c <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd90      	pop	{r4, r7, pc}

0800a1f0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f000 f9aa 	bl	800a564 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a232:	4619      	mov	r1, r3
 800a234:	4610      	mov	r0, r2
 800a236:	f000 f9a1 	bl	800a57c <hci_le_generate_dhkey_complete_event>

  return status;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a248:	b08d      	sub	sp, #52	@ 0x34
 800a24a:	af08      	add	r7, sp, #32
 800a24c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f893 c000 	ldrb.w	ip, [r3]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a262:	fa1f fe83 	uxth.w	lr, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a284:	b280      	uxth	r0, r0
 800a286:	68bc      	ldr	r4, [r7, #8]
 800a288:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a28c:	b2a4      	uxth	r4, r4
 800a28e:	68bd      	ldr	r5, [r7, #8]
 800a290:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a294:	b2ad      	uxth	r5, r5
 800a296:	68be      	ldr	r6, [r7, #8]
 800a298:	7f76      	ldrb	r6, [r6, #29]
 800a29a:	9606      	str	r6, [sp, #24]
 800a29c:	9505      	str	r5, [sp, #20]
 800a29e:	9404      	str	r4, [sp, #16]
 800a2a0:	9003      	str	r0, [sp, #12]
 800a2a2:	9102      	str	r1, [sp, #8]
 800a2a4:	9201      	str	r2, [sp, #4]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4642      	mov	r2, r8
 800a2ac:	4671      	mov	r1, lr
 800a2ae:	4660      	mov	r0, ip
 800a2b0:	f000 f970 	bl	800a594 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a2c0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b0a6      	sub	sp, #152	@ 0x98
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2e0:	e085      	b.n	800a3ee <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a2e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a2e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	3398      	adds	r3, #152	@ 0x98
 800a2fa:	443b      	add	r3, r7
 800a2fc:	3b90      	subs	r3, #144	@ 0x90
 800a2fe:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a300:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a304:	3301      	adds	r3, #1
 800a306:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a30a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	4413      	add	r3, r2
 800a316:	3302      	adds	r3, #2
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	3398      	adds	r3, #152	@ 0x98
 800a322:	443b      	add	r3, r7
 800a324:	3b8f      	subs	r3, #143	@ 0x8f
 800a326:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a328:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a32c:	3301      	adds	r3, #1
 800a32e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a332:	f107 0208 	add.w	r2, r7, #8
 800a336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	4413      	add	r3, r2
 800a33e:	1c98      	adds	r0, r3, #2
 800a340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a34a:	4413      	add	r3, r2
 800a34c:	3303      	adds	r3, #3
 800a34e:	2206      	movs	r2, #6
 800a350:	4619      	mov	r1, r3
 800a352:	f001 fe78 	bl	800c046 <memcpy>
    size += 6;
 800a356:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a35a:	3306      	adds	r3, #6
 800a35c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a360:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a364:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	4413      	add	r3, r2
 800a36c:	3309      	adds	r3, #9
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	3398      	adds	r3, #152	@ 0x98
 800a378:	443b      	add	r3, r7
 800a37a:	3b88      	subs	r3, #136	@ 0x88
 800a37c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a37e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a382:	3301      	adds	r3, #1
 800a384:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a388:	f107 0208 	add.w	r2, r7, #8
 800a38c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	3308      	adds	r3, #8
 800a394:	4413      	add	r3, r2
 800a396:	1c58      	adds	r0, r3, #1
 800a398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	3308      	adds	r3, #8
 800a3a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f001 fe4b 	bl	800c046 <memcpy>
    size += 6;
 800a3b0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a3b4:	3306      	adds	r3, #6
 800a3b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a3ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a3be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3310      	adds	r3, #16
 800a3c8:	f993 2000 	ldrsb.w	r2, [r3]
 800a3cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	3398      	adds	r3, #152	@ 0x98
 800a3d4:	443b      	add	r3, r7
 800a3d6:	3b81      	subs	r3, #129	@ 0x81
 800a3d8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a3da:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a3de:	3301      	adds	r3, #1
 800a3e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a3e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	f6ff af71 	blt.w	800a2e2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800a400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	f107 0208 	add.w	r2, r7, #8
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 f8d5 	bl	800a5bc <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800a412:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a416:	4618      	mov	r0, r3
 800a418:	3798      	adds	r7, #152	@ 0x98
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800a41e:	b480      	push	{r7}
 800a420:	b083      	sub	sp, #12
 800a422:	af00      	add	r7, sp, #0
 800a424:	4603      	mov	r3, r0
 800a426:	71fb      	strb	r3, [r7, #7]
 800a428:	460b      	mov	r3, r1
 800a42a:	80bb      	strh	r3, [r7, #4]
 800a42c:	4613      	mov	r3, r2
 800a42e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800a43c:	b490      	push	{r4, r7}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	4611      	mov	r1, r2
 800a448:	461a      	mov	r2, r3
 800a44a:	4623      	mov	r3, r4
 800a44c:	71fb      	strb	r3, [r7, #7]
 800a44e:	4603      	mov	r3, r0
 800a450:	80bb      	strh	r3, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	71bb      	strb	r3, [r7, #6]
 800a456:	4613      	mov	r3, r2
 800a458:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bc90      	pop	{r4, r7}
 800a462:	4770      	bx	lr

0800a464 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	4603      	mov	r3, r0
 800a482:	6039      	str	r1, [r7, #0]
 800a484:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	4603      	mov	r3, r0
 800a49a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460a      	mov	r2, r1
 800a4b2:	71fb      	strb	r3, [r7, #7]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6039      	str	r1, [r7, #0]
 800a4ce:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800a4dc:	b490      	push	{r4, r7}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	80bb      	strh	r3, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	807b      	strh	r3, [r7, #2]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc90      	pop	{r4, r7}
 800a502:	4770      	bx	lr

0800a504 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	603a      	str	r2, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
 800a510:	460b      	mov	r3, r1
 800a512:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	80fb      	strh	r3, [r7, #6]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800a53c:	b490      	push	{r4, r7}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	4611      	mov	r1, r2
 800a548:	461a      	mov	r2, r3
 800a54a:	4623      	mov	r3, r4
 800a54c:	80fb      	strh	r3, [r7, #6]
 800a54e:	4603      	mov	r3, r0
 800a550:	80bb      	strh	r3, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	807b      	strh	r3, [r7, #2]
 800a556:	4613      	mov	r3, r2
 800a558:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc90      	pop	{r4, r7}
 800a562:	4770      	bx	lr

0800a564 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800a594:	b490      	push	{r4, r7}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4623      	mov	r3, r4
 800a5a4:	71fb      	strb	r3, [r7, #7]
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	80bb      	strh	r3, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	71bb      	strb	r3, [r7, #6]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc90      	pop	{r4, r7}
 800a5ba:	4770      	bx	lr

0800a5bc <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800a5d8:	bf00      	nop
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	80fb      	strh	r3, [r7, #6]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	717b      	strb	r3, [r7, #5]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	4603      	mov	r3, r0
 800a61e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800a630:	bf00      	nop
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800a63a:	b480      	push	{r7}
 800a63c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800a63e:	bf00      	nop
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	4603      	mov	r3, r0
 800a652:	71fb      	strb	r3, [r7, #7]
 800a654:	460b      	mov	r3, r1
 800a656:	71bb      	strb	r3, [r7, #6]
 800a658:	4613      	mov	r3, r2
 800a65a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	4603      	mov	r3, r0
 800a686:	6039      	str	r1, [r7, #0]
 800a688:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	4603      	mov	r3, r0
 800a69e:	460a      	mov	r2, r1
 800a6a0:	80fb      	strh	r3, [r7, #6]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800a6b2:	b490      	push	{r4, r7}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	461a      	mov	r2, r3
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	80fb      	strh	r3, [r7, #6]
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	80bb      	strh	r3, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	807b      	strh	r3, [r7, #2]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc90      	pop	{r4, r7}
 800a6d8:	4770      	bx	lr

0800a6da <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	460a      	mov	r2, r1
 800a6fa:	80fb      	strh	r3, [r7, #6]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	4603      	mov	r3, r0
 800a716:	80fb      	strh	r3, [r7, #6]
 800a718:	460b      	mov	r3, r1
 800a71a:	717b      	strb	r3, [r7, #5]
 800a71c:	4613      	mov	r3, r2
 800a71e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	603a      	str	r2, [r7, #0]
 800a736:	80fb      	strh	r3, [r7, #6]
 800a738:	460b      	mov	r3, r1
 800a73a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	4603      	mov	r3, r0
 800a752:	80fb      	strh	r3, [r7, #6]
 800a754:	460b      	mov	r3, r1
 800a756:	717b      	strb	r3, [r7, #5]
 800a758:	4613      	mov	r3, r2
 800a75a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	603a      	str	r2, [r7, #0]
 800a772:	80fb      	strh	r3, [r7, #6]
 800a774:	460b      	mov	r3, r1
 800a776:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	603a      	str	r2, [r7, #0]
 800a78e:	80fb      	strh	r3, [r7, #6]
 800a790:	460b      	mov	r3, r1
 800a792:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	603a      	str	r2, [r7, #0]
 800a7aa:	80fb      	strh	r3, [r7, #6]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	80fb      	strh	r3, [r7, #6]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	717b      	strb	r3, [r7, #5]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800a7dc:	b490      	push	{r4, r7}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4623      	mov	r3, r4
 800a7ec:	80fb      	strh	r3, [r7, #6]
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	80bb      	strh	r3, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	807b      	strh	r3, [r7, #2]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bc90      	pop	{r4, r7}
 800a802:	4770      	bx	lr

0800a804 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800a80e:	bf00      	nop
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800a81a:	b480      	push	{r7}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	4603      	mov	r3, r0
 800a824:	81fb      	strh	r3, [r7, #14]
 800a826:	460b      	mov	r3, r1
 800a828:	81bb      	strh	r3, [r7, #12]
 800a82a:	4613      	mov	r3, r2
 800a82c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800a82e:	bf00      	nop
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800a83a:	b480      	push	{r7}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	607b      	str	r3, [r7, #4]
 800a842:	4603      	mov	r3, r0
 800a844:	81fb      	strh	r3, [r7, #14]
 800a846:	460b      	mov	r3, r1
 800a848:	81bb      	strh	r3, [r7, #12]
 800a84a:	4613      	mov	r3, r2
 800a84c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	4603      	mov	r3, r0
 800a862:	460a      	mov	r2, r1
 800a864:	80fb      	strh	r3, [r7, #6]
 800a866:	4613      	mov	r3, r2
 800a868:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800a876:	b490      	push	{r4, r7}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	4604      	mov	r4, r0
 800a87e:	4608      	mov	r0, r1
 800a880:	4611      	mov	r1, r2
 800a882:	461a      	mov	r2, r3
 800a884:	4623      	mov	r3, r4
 800a886:	80fb      	strh	r3, [r7, #6]
 800a888:	4603      	mov	r3, r0
 800a88a:	717b      	strb	r3, [r7, #5]
 800a88c:	460b      	mov	r3, r1
 800a88e:	807b      	strh	r3, [r7, #2]
 800a890:	4613      	mov	r3, r2
 800a892:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc90      	pop	{r4, r7}
 800a89c:	4770      	bx	lr

0800a89e <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	607b      	str	r3, [r7, #4]
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	81fb      	strh	r3, [r7, #14]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	81bb      	strh	r3, [r7, #12]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	81fb      	strh	r3, [r7, #14]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	81bb      	strh	r3, [r7, #12]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800a8d2:	bf00      	nop
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	603a      	str	r2, [r7, #0]
 800a8e8:	80fb      	strh	r3, [r7, #6]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	4603      	mov	r3, r0
 800a902:	460a      	mov	r2, r1
 800a904:	80fb      	strh	r3, [r7, #6]
 800a906:	4613      	mov	r3, r2
 800a908:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800a90a:	bf00      	nop
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	4603      	mov	r3, r0
 800a91e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800a92c:	b490      	push	{r4, r7}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	4611      	mov	r1, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	4623      	mov	r3, r4
 800a93c:	80fb      	strh	r3, [r7, #6]
 800a93e:	4603      	mov	r3, r0
 800a940:	80bb      	strh	r3, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	807b      	strh	r3, [r7, #2]
 800a946:	4613      	mov	r3, r2
 800a948:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bc90      	pop	{r4, r7}
 800a952:	4770      	bx	lr

0800a954 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	460a      	mov	r2, r1
 800a95e:	80fb      	strh	r3, [r7, #6]
 800a960:	4613      	mov	r3, r2
 800a962:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	603a      	str	r2, [r7, #0]
 800a97a:	80fb      	strh	r3, [r7, #6]
 800a97c:	460b      	mov	r3, r1
 800a97e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800a98c:	b490      	push	{r4, r7}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	4611      	mov	r1, r2
 800a998:	461a      	mov	r2, r3
 800a99a:	4623      	mov	r3, r4
 800a99c:	80fb      	strh	r3, [r7, #6]
 800a99e:	4603      	mov	r3, r0
 800a9a0:	717b      	strb	r3, [r7, #5]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	807b      	strh	r3, [r7, #2]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bc90      	pop	{r4, r7}
 800a9b2:	4770      	bx	lr

0800a9b4 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800a9b4:	b490      	push	{r4, r7}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	4611      	mov	r1, r2
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	80fb      	strh	r3, [r7, #6]
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	717b      	strb	r3, [r7, #5]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	807b      	strh	r3, [r7, #2]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800a9d2:	bf00      	nop
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc90      	pop	{r4, r7}
 800a9da:	4770      	bx	lr

0800a9dc <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	4603      	mov	r3, r0
 800aa2a:	603a      	str	r2, [r7, #0]
 800aa2c:	71fb      	strb	r3, [r7, #7]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	4603      	mov	r3, r0
 800aa46:	603a      	str	r2, [r7, #0]
 800aa48:	71fb      	strb	r3, [r7, #7]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	4603      	mov	r3, r0
 800aa62:	603a      	str	r2, [r7, #0]
 800aa64:	71fb      	strb	r3, [r7, #7]
 800aa66:	460b      	mov	r3, r1
 800aa68:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	2218      	movs	r2, #24
 800aa86:	2100      	movs	r1, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 fa5c 	bl	800bf46 <memset>
  rq.ogf = 0x03;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800aa92:	2303      	movs	r3, #3
 800aa94:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aa96:	1dfb      	adds	r3, r7, #7
 800aa98:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 f9cd 	bl	800ae44 <hci_send_req>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da01      	bge.n	800aab4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800aab0:	23ff      	movs	r3, #255	@ 0xff
 800aab2:	e005      	b.n	800aac0 <hci_reset+0x4a>
  if (status) {
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <hci_reset+0x48>
    return status;
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	e000      	b.n	800aac0 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3720      	adds	r7, #32
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08e      	sub	sp, #56	@ 0x38
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	2209      	movs	r2, #9
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 fa31 	bl	800bf46 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aae4:	f107 0320 	add.w	r3, r7, #32
 800aae8:	2218      	movs	r2, #24
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 fa2a 	bl	800bf46 <memset>
  rq.ogf = 0x04;
 800aaf2:	2304      	movs	r3, #4
 800aaf4:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 800aafa:	f107 0314 	add.w	r3, r7, #20
 800aafe:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 800ab00:	2309      	movs	r3, #9
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800ab04:	f107 0320 	add.w	r3, r7, #32
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f99a 	bl	800ae44 <hci_send_req>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	da01      	bge.n	800ab1a <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800ab16:	23ff      	movs	r3, #255	@ 0xff
 800ab18:	e018      	b.n	800ab4c <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800ab1a:	7d3b      	ldrb	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <hci_read_local_version_information+0x5c>
    return resp.Status;
 800ab20:	7d3b      	ldrb	r3, [r7, #20]
 800ab22:	e013      	b.n	800ab4c <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800ab24:	7d7a      	ldrb	r2, [r7, #21]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800ab2a:	8afa      	ldrh	r2, [r7, #22]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800ab30:	7e3a      	ldrb	r2, [r7, #24]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800ab36:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800ab40:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab48:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3738      	adds	r7, #56	@ 0x38
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b0cc      	sub	sp, #304	@ 0x130
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab64:	6019      	str	r1, [r3, #0]
 800ab66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab6a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ab6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ab78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab7c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ab80:	2200      	movs	r2, #0
 800ab82:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800ab8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab92:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab9a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ab9e:	3301      	adds	r3, #1
 800aba0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800aba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aba8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800abb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800abb6:	1c58      	adds	r0, r3, #1
 800abb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800abc0:	221f      	movs	r2, #31
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	f001 fa3f 	bl	800c046 <memcpy>
  }
  index_input += 31;
 800abc8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800abcc:	331f      	adds	r3, #31
 800abce:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800abd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abd6:	2218      	movs	r2, #24
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 f9b3 	bl	800bf46 <memset>
  rq.ogf = 0x08;
 800abe0:	2308      	movs	r3, #8
 800abe2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 800abe6:	2309      	movs	r3, #9
 800abe8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800abf4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800abf8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800abfc:	f107 030b 	add.w	r3, r7, #11
 800ac00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ac0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 f917 	bl	800ae44 <hci_send_req>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	da01      	bge.n	800ac20 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800ac1c:	23ff      	movs	r3, #255	@ 0xff
 800ac1e:	e00d      	b.n	800ac3c <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800ac20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac24:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <hci_le_set_scan_response_data+0xe6>
    return status;
 800ac2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac32:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	e000      	b.n	800ac3c <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3308      	adds	r3, #8
 800ac52:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d001      	beq.n	800ac60 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e00c      	b.n	800ac7a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3302      	adds	r3, #2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ac6e:	3b03      	subs	r3, #3
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d001      	beq.n	800ac78 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ac74:	2302      	movs	r3, #2
 800ac76:	e000      	b.n	800ac7a <verify_packet+0x34>
  
  return 0;      
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b0a6      	sub	sp, #152	@ 0x98
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	607b      	str	r3, [r7, #4]
 800ac90:	4603      	mov	r3, r0
 800ac92:	81fb      	strh	r3, [r7, #14]
 800ac94:	460b      	mov	r3, r1
 800ac96:	81bb      	strh	r3, [r7, #12]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ac9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aca4:	b21a      	sxth	r2, r3
 800aca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800acaa:	029b      	lsls	r3, r3, #10
 800acac:	b21b      	sxth	r3, r3
 800acae:	4313      	orrs	r3, r2
 800acb0:	b21b      	sxth	r3, r3
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800acb6:	7afb      	ldrb	r3, [r7, #11]
 800acb8:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800acba:	2301      	movs	r3, #1
 800acbc:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800acbe:	f107 0318 	add.w	r3, r7, #24
 800acc2:	3301      	adds	r3, #1
 800acc4:	461a      	mov	r2, r3
 800acc6:	f107 0314 	add.w	r3, r7, #20
 800acca:	8819      	ldrh	r1, [r3, #0]
 800accc:	789b      	ldrb	r3, [r3, #2]
 800acce:	8011      	strh	r1, [r2, #0]
 800acd0:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800acd2:	f107 0318 	add.w	r3, r7, #24
 800acd6:	3304      	adds	r3, #4
 800acd8:	7afa      	ldrb	r2, [r7, #11]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 f9b2 	bl	800c046 <memcpy>
  
  if (hciContext.io.Send)
 800ace2:	4b09      	ldr	r3, [pc, #36]	@ (800ad08 <send_cmd+0x80>)
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800acea:	4b07      	ldr	r3, [pc, #28]	@ (800ad08 <send_cmd+0x80>)
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	7afa      	ldrb	r2, [r7, #11]
 800acf0:	b292      	uxth	r2, r2
 800acf2:	3204      	adds	r2, #4
 800acf4:	b291      	uxth	r1, r2
 800acf6:	f107 0218 	add.w	r2, r7, #24
 800acfa:	4610      	mov	r0, r2
 800acfc:	4798      	blx	r3
  }
}
 800acfe:	bf00      	nop
 800ad00:	3798      	adds	r7, #152	@ 0x98
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000a74 	.word	0x20000a74

0800ad0c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800ad16:	e00a      	b.n	800ad2e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800ad18:	f107 030c 	add.w	r3, r7, #12
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6838      	ldr	r0, [r7, #0]
 800ad20:	f000 fae8 	bl	800b2f4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa4f 	bl	800b1cc <list_insert_head>
  while (!list_is_empty(src_list))
 800ad2e:	6838      	ldr	r0, [r7, #0]
 800ad30:	f000 fa2a 	bl	800b188 <list_is_empty>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0ee      	beq.n	800ad18 <move_list+0xc>
  }
}
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ad4a:	e009      	b.n	800ad60 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ad4c:	1d3b      	adds	r3, r7, #4
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4809      	ldr	r0, [pc, #36]	@ (800ad78 <free_event_list+0x34>)
 800ad52:	f000 faa8 	bl	800b2a6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4808      	ldr	r0, [pc, #32]	@ (800ad7c <free_event_list+0x38>)
 800ad5c:	f000 fa5c 	bl	800b218 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ad60:	4806      	ldr	r0, [pc, #24]	@ (800ad7c <free_event_list+0x38>)
 800ad62:	f000 faee 	bl	800b342 <list_get_size>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	ddef      	ble.n	800ad4c <free_event_list+0x8>
  }
}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	200004f4 	.word	0x200004f4
 800ad7c:	200004ec 	.word	0x200004ec

0800ad80 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800ad90:	4a18      	ldr	r2, [pc, #96]	@ (800adf4 <hci_init+0x74>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ad96:	4818      	ldr	r0, [pc, #96]	@ (800adf8 <hci_init+0x78>)
 800ad98:	f000 f9e6 	bl	800b168 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ad9c:	4817      	ldr	r0, [pc, #92]	@ (800adfc <hci_init+0x7c>)
 800ad9e:	f000 f9e3 	bl	800b168 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800ada2:	f7f8 fb7d 	bl	80034a0 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]
 800adaa:	e00c      	b.n	800adc6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	228c      	movs	r2, #140	@ 0x8c
 800adb0:	fb02 f303 	mul.w	r3, r2, r3
 800adb4:	4a12      	ldr	r2, [pc, #72]	@ (800ae00 <hci_init+0x80>)
 800adb6:	4413      	add	r3, r2
 800adb8:	4619      	mov	r1, r3
 800adba:	480f      	ldr	r0, [pc, #60]	@ (800adf8 <hci_init+0x78>)
 800adbc:	f000 fa2c 	bl	800b218 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	3301      	adds	r3, #1
 800adc4:	73fb      	strb	r3, [r7, #15]
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b09      	cmp	r3, #9
 800adca:	d9ef      	bls.n	800adac <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800adcc:	4b09      	ldr	r3, [pc, #36]	@ (800adf4 <hci_init+0x74>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <hci_init+0x5c>
 800add4:	4b07      	ldr	r3, [pc, #28]	@ (800adf4 <hci_init+0x74>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2000      	movs	r0, #0
 800adda:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800addc:	4b05      	ldr	r3, [pc, #20]	@ (800adf4 <hci_init+0x74>)
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <hci_init+0x6a>
 800ade4:	4b03      	ldr	r3, [pc, #12]	@ (800adf4 <hci_init+0x74>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	4798      	blx	r3
}
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000a74 	.word	0x20000a74
 800adf8:	200004ec 	.word	0x200004ec
 800adfc:	200004f4 	.word	0x200004f4
 800ae00:	200004fc 	.word	0x200004fc

0800ae04 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a0b      	ldr	r2, [pc, #44]	@ (800ae40 <hci_register_io_bus+0x3c>)
 800ae12:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <hci_register_io_bus+0x3c>)
 800ae1a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	4a07      	ldr	r2, [pc, #28]	@ (800ae40 <hci_register_io_bus+0x3c>)
 800ae22:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	4a05      	ldr	r2, [pc, #20]	@ (800ae40 <hci_register_io_bus+0x3c>)
 800ae2a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	4a03      	ldr	r2, [pc, #12]	@ (800ae40 <hci_register_io_bus+0x3c>)
 800ae32:	6093      	str	r3, [r2, #8]
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000a74 	.word	0x20000a74

0800ae44 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08e      	sub	sp, #56	@ 0x38
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	885b      	ldrh	r3, [r3, #2]
 800ae54:	b21b      	sxth	r3, r3
 800ae56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae5a:	b21a      	sxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	b21b      	sxth	r3, r3
 800ae62:	029b      	lsls	r3, r3, #10
 800ae64:	b21b      	sxth	r3, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	b21b      	sxth	r3, r3
 800ae6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800ae70:	f107 0308 	add.w	r3, r7, #8
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 f977 	bl	800b168 <list_init_head>

  free_event_list();
 800ae7a:	f7ff ff63 	bl	800ad44 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	8818      	ldrh	r0, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8859      	ldrh	r1, [r3, #2]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f7ff fefa 	bl	800ac88 <send_cmd>
  
  if (async)
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <hci_send_req+0x5a>
  {
    return 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e0e2      	b.n	800b064 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ae9e:	f7f9 f9ad 	bl	80041fc <HAL_GetTick>
 800aea2:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800aea4:	f7f9 f9aa 	bl	80041fc <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aeb2:	f200 80b3 	bhi.w	800b01c <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800aeb6:	486d      	ldr	r0, [pc, #436]	@ (800b06c <hci_send_req+0x228>)
 800aeb8:	f000 f966 	bl	800b188 <list_is_empty>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d000      	beq.n	800aec4 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800aec2:	e7ef      	b.n	800aea4 <hci_send_req+0x60>
      {
        break;
 800aec4:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800aec6:	f107 0310 	add.w	r3, r7, #16
 800aeca:	4619      	mov	r1, r3
 800aecc:	4867      	ldr	r0, [pc, #412]	@ (800b06c <hci_send_req+0x228>)
 800aece:	f000 f9ea 	bl	800b2a6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3308      	adds	r3, #8
 800aed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800aed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b04      	cmp	r3, #4
 800aede:	d17f      	bne.n	800afe0 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 800aee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee2:	3301      	adds	r3, #1
 800aee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3308      	adds	r3, #8
 800aeea:	3303      	adds	r3, #3
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aef4:	3b03      	subs	r3, #3
 800aef6:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800aef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b3e      	cmp	r3, #62	@ 0x3e
 800aefe:	d04c      	beq.n	800af9a <hci_send_req+0x156>
 800af00:	2b3e      	cmp	r3, #62	@ 0x3e
 800af02:	dc68      	bgt.n	800afd6 <hci_send_req+0x192>
 800af04:	2b10      	cmp	r3, #16
 800af06:	f000 808b 	beq.w	800b020 <hci_send_req+0x1dc>
 800af0a:	2b10      	cmp	r3, #16
 800af0c:	dc63      	bgt.n	800afd6 <hci_send_req+0x192>
 800af0e:	2b0e      	cmp	r3, #14
 800af10:	d023      	beq.n	800af5a <hci_send_req+0x116>
 800af12:	2b0f      	cmp	r3, #15
 800af14:	d15f      	bne.n	800afd6 <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af18:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	885b      	ldrh	r3, [r3, #2]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af22:	429a      	cmp	r2, r3
 800af24:	d17e      	bne.n	800b024 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2b0f      	cmp	r3, #15
 800af2c:	d004      	beq.n	800af38 <hci_send_req+0xf4>
          if (cs->status) {
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d051      	beq.n	800afda <hci_send_req+0x196>
            goto failed;
 800af36:	e078      	b.n	800b02a <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	695a      	ldr	r2, [r3, #20]
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	429a      	cmp	r2, r3
 800af40:	bf28      	it	cs
 800af42:	461a      	movcs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6918      	ldr	r0, [r3, #16]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	461a      	mov	r2, r3
 800af52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af54:	f001 f877 	bl	800c046 <memcpy>
        goto done;
 800af58:	e078      	b.n	800b04c <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af64:	b29b      	uxth	r3, r3
 800af66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af68:	429a      	cmp	r2, r3
 800af6a:	d15d      	bne.n	800b028 <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	3303      	adds	r3, #3
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	3b03      	subs	r3, #3
 800af76:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	695a      	ldr	r2, [r3, #20]
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	429a      	cmp	r2, r3
 800af80:	bf28      	it	cs
 800af82:	461a      	movcs	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6918      	ldr	r0, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	461a      	mov	r2, r3
 800af92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af94:	f001 f857 	bl	800c046 <memcpy>
        goto done;
 800af98:	e058      	b.n	800b04c <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d118      	bne.n	800afde <hci_send_req+0x19a>
          break;
      
        len -= 1;
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	3b01      	subs	r3, #1
 800afb0:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695a      	ldr	r2, [r3, #20]
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	429a      	cmp	r2, r3
 800afba:	bf28      	it	cs
 800afbc:	461a      	movcs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6918      	ldr	r0, [r3, #16]
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	1c59      	adds	r1, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	461a      	mov	r2, r3
 800afd0:	f001 f839 	bl	800c046 <memcpy>
        goto done;
 800afd4:	e03a      	b.n	800b04c <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800afd6:	bf00      	nop
 800afd8:	e002      	b.n	800afe0 <hci_send_req+0x19c>
          break;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <hci_send_req+0x19c>
          break;
 800afde:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800afe0:	4823      	ldr	r0, [pc, #140]	@ (800b070 <hci_send_req+0x22c>)
 800afe2:	f000 f8d1 	bl	800b188 <list_is_empty>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00d      	beq.n	800b008 <hci_send_req+0x1c4>
 800afec:	481f      	ldr	r0, [pc, #124]	@ (800b06c <hci_send_req+0x228>)
 800afee:	f000 f8cb 	bl	800b188 <list_is_empty>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	4619      	mov	r1, r3
 800affc:	481c      	ldr	r0, [pc, #112]	@ (800b070 <hci_send_req+0x22c>)
 800affe:	f000 f90b 	bl	800b218 <list_insert_tail>
      hciReadPacket=NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
 800b006:	e008      	b.n	800b01a <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	4611      	mov	r1, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f901 	bl	800b218 <list_insert_tail>
      hciReadPacket=NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	613b      	str	r3, [r7, #16]
  {
 800b01a:	e740      	b.n	800ae9e <hci_send_req+0x5a>
        goto failed;
 800b01c:	bf00      	nop
 800b01e:	e004      	b.n	800b02a <hci_send_req+0x1e6>
        goto failed;
 800b020:	bf00      	nop
 800b022:	e002      	b.n	800b02a <hci_send_req+0x1e6>
          goto failed;
 800b024:	bf00      	nop
 800b026:	e000      	b.n	800b02a <hci_send_req+0x1e6>
          goto failed;
 800b028:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	4619      	mov	r1, r3
 800b034:	480e      	ldr	r0, [pc, #56]	@ (800b070 <hci_send_req+0x22c>)
 800b036:	f000 f8c9 	bl	800b1cc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b03a:	f107 0308 	add.w	r3, r7, #8
 800b03e:	4619      	mov	r1, r3
 800b040:	480a      	ldr	r0, [pc, #40]	@ (800b06c <hci_send_req+0x228>)
 800b042:	f7ff fe63 	bl	800ad0c <move_list>

  return -1;
 800b046:	f04f 33ff 	mov.w	r3, #4294967295
 800b04a:	e00b      	b.n	800b064 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	4619      	mov	r1, r3
 800b050:	4807      	ldr	r0, [pc, #28]	@ (800b070 <hci_send_req+0x22c>)
 800b052:	f000 f8bb 	bl	800b1cc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	4619      	mov	r1, r3
 800b05c:	4803      	ldr	r0, [pc, #12]	@ (800b06c <hci_send_req+0x228>)
 800b05e:	f7ff fe55 	bl	800ad0c <move_list>

  return 0;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3738      	adds	r7, #56	@ 0x38
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	200004f4 	.word	0x200004f4
 800b070:	200004ec 	.word	0x200004ec

0800b074 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b07e:	e013      	b.n	800b0a8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b080:	1d3b      	adds	r3, r7, #4
 800b082:	4619      	mov	r1, r3
 800b084:	480e      	ldr	r0, [pc, #56]	@ (800b0c0 <hci_user_evt_proc+0x4c>)
 800b086:	f000 f90e 	bl	800b2a6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b08a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <hci_user_evt_proc+0x50>)
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b092:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <hci_user_evt_proc+0x50>)
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	3208      	adds	r2, #8
 800b09a:	4610      	mov	r0, r2
 800b09c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4809      	ldr	r0, [pc, #36]	@ (800b0c8 <hci_user_evt_proc+0x54>)
 800b0a4:	f000 f8b8 	bl	800b218 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b0a8:	4805      	ldr	r0, [pc, #20]	@ (800b0c0 <hci_user_evt_proc+0x4c>)
 800b0aa:	f000 f86d 	bl	800b188 <list_is_empty>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0e5      	beq.n	800b080 <hci_user_evt_proc+0xc>
  }
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200004f4 	.word	0x200004f4
 800b0c4:	20000a74 	.word	0x20000a74
 800b0c8:	200004ec 	.word	0x200004ec

0800b0cc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b0dc:	481f      	ldr	r0, [pc, #124]	@ (800b15c <hci_notify_asynch_evt+0x90>)
 800b0de:	f000 f853 	bl	800b188 <list_is_empty>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d132      	bne.n	800b14e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	481b      	ldr	r0, [pc, #108]	@ (800b15c <hci_notify_asynch_evt+0x90>)
 800b0f0:	f000 f8d9 	bl	800b2a6 <list_remove_head>
    
    if (hciContext.io.Receive)
 800b0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b160 <hci_notify_asynch_evt+0x94>)
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d02a      	beq.n	800b152 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b0fc:	4b18      	ldr	r3, [pc, #96]	@ (800b160 <hci_notify_asynch_evt+0x94>)
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	3208      	adds	r2, #8
 800b104:	2180      	movs	r1, #128	@ 0x80
 800b106:	4610      	mov	r0, r2
 800b108:	4798      	blx	r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b10e:	7cfb      	ldrb	r3, [r7, #19]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d016      	beq.n	800b142 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	7cfa      	ldrb	r2, [r7, #19]
 800b118:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fd91 	bl	800ac46 <verify_packet>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d105      	bne.n	800b136 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4619      	mov	r1, r3
 800b12e:	480d      	ldr	r0, [pc, #52]	@ (800b164 <hci_notify_asynch_evt+0x98>)
 800b130:	f000 f872 	bl	800b218 <list_insert_tail>
 800b134:	e00d      	b.n	800b152 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4619      	mov	r1, r3
 800b13a:	4808      	ldr	r0, [pc, #32]	@ (800b15c <hci_notify_asynch_evt+0x90>)
 800b13c:	f000 f846 	bl	800b1cc <list_insert_head>
 800b140:	e007      	b.n	800b152 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4619      	mov	r1, r3
 800b146:	4805      	ldr	r0, [pc, #20]	@ (800b15c <hci_notify_asynch_evt+0x90>)
 800b148:	f000 f840 	bl	800b1cc <list_insert_head>
 800b14c:	e001      	b.n	800b152 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b14e:	2301      	movs	r3, #1
 800b150:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b152:	697b      	ldr	r3, [r7, #20]
  
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	200004ec 	.word	0x200004ec
 800b160:	20000a74 	.word	0x20000a74
 800b164:	200004f4 	.word	0x200004f4

0800b168 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	605a      	str	r2, [r3, #4]
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b190:	f3ef 8310 	mrs	r3, PRIMASK
 800b194:	60fb      	str	r3, [r7, #12]
  return(result);
 800b196:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b19a:	b672      	cpsid	i
}
 800b19c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d102      	bne.n	800b1ae <list_is_empty+0x26>
  {
    return_value = 1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	75fb      	strb	r3, [r7, #23]
 800b1ac:	e001      	b.n	800b1b2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	75fb      	strb	r3, [r7, #23]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f383 8810 	msr	PRIMASK, r3
}
 800b1bc:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1da:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1e0:	b672      	cpsid	i
}
 800b1e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	605a      	str	r2, [r3, #4]
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f383 8810 	msr	PRIMASK, r3
}
 800b20a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b20c:	bf00      	nop
 800b20e:	371c      	adds	r7, #28
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b222:	f3ef 8310 	mrs	r3, PRIMASK
 800b226:	60fb      	str	r3, [r7, #12]
  return(result);
 800b228:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b22a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b22c:	b672      	cpsid	i
}
 800b22e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f383 8810 	msr	PRIMASK, r3
}
 800b256:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b26c:	f3ef 8310 	mrs	r3, PRIMASK
 800b270:	60fb      	str	r3, [r7, #12]
  return(result);
 800b272:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b276:	b672      	cpsid	i
}
 800b278:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	6812      	ldr	r2, [r2, #0]
 800b282:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	6852      	ldr	r2, [r2, #4]
 800b28c:	605a      	str	r2, [r3, #4]
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f383 8810 	msr	PRIMASK, r3
}
 800b298:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b29a:	bf00      	nop
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b086      	sub	sp, #24
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2b0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ba:	b672      	cpsid	i
}
 800b2bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff ffca 	bl	800b264 <list_remove_node>
  (*node)->next = NULL;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	605a      	str	r2, [r3, #4]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ea:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b2ec:	bf00      	nop
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b302:	60fb      	str	r3, [r7, #12]
  return(result);
 800b304:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b308:	b672      	cpsid	i
}
 800b30a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff ffa3 	bl	800b264 <list_remove_node>
  (*node)->next = NULL;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	605a      	str	r2, [r3, #4]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f383 8810 	msr	PRIMASK, r3
}
 800b338:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b33a:	bf00      	nop
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b342:	b480      	push	{r7}
 800b344:	b089      	sub	sp, #36	@ 0x24
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b34e:	f3ef 8310 	mrs	r3, PRIMASK
 800b352:	613b      	str	r3, [r7, #16]
  return(result);
 800b354:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b358:	b672      	cpsid	i
}
 800b35a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b362:	e005      	b.n	800b370 <list_get_size+0x2e>
  {
    size++;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	3301      	adds	r3, #1
 800b368:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d1f5      	bne.n	800b364 <list_get_size+0x22>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f383 8810 	msr	PRIMASK, r3
}
 800b382:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b384:	69fb      	ldr	r3, [r7, #28]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3724      	adds	r7, #36	@ 0x24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
	...

0800b394 <srand>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4b10      	ldr	r3, [pc, #64]	@ (800b3d8 <srand+0x44>)
 800b398:	681d      	ldr	r5, [r3, #0]
 800b39a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b39c:	4604      	mov	r4, r0
 800b39e:	b9b3      	cbnz	r3, 800b3ce <srand+0x3a>
 800b3a0:	2018      	movs	r0, #24
 800b3a2:	f001 fd1f 	bl	800cde4 <malloc>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	6328      	str	r0, [r5, #48]	@ 0x30
 800b3aa:	b920      	cbnz	r0, 800b3b6 <srand+0x22>
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b3dc <srand+0x48>)
 800b3ae:	480c      	ldr	r0, [pc, #48]	@ (800b3e0 <srand+0x4c>)
 800b3b0:	2146      	movs	r1, #70	@ 0x46
 800b3b2:	f000 fe57 	bl	800c064 <__assert_func>
 800b3b6:	490b      	ldr	r1, [pc, #44]	@ (800b3e4 <srand+0x50>)
 800b3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e8 <srand+0x54>)
 800b3ba:	e9c0 1300 	strd	r1, r3, [r0]
 800b3be:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ec <srand+0x58>)
 800b3c0:	6083      	str	r3, [r0, #8]
 800b3c2:	230b      	movs	r3, #11
 800b3c4:	8183      	strh	r3, [r0, #12]
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b3ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	611c      	str	r4, [r3, #16]
 800b3d4:	615a      	str	r2, [r3, #20]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	20000030 	.word	0x20000030
 800b3dc:	0800e040 	.word	0x0800e040
 800b3e0:	0800e057 	.word	0x0800e057
 800b3e4:	abcd330e 	.word	0xabcd330e
 800b3e8:	e66d1234 	.word	0xe66d1234
 800b3ec:	0005deec 	.word	0x0005deec

0800b3f0 <rand>:
 800b3f0:	4b16      	ldr	r3, [pc, #88]	@ (800b44c <rand+0x5c>)
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	681c      	ldr	r4, [r3, #0]
 800b3f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b3f8:	b9b3      	cbnz	r3, 800b428 <rand+0x38>
 800b3fa:	2018      	movs	r0, #24
 800b3fc:	f001 fcf2 	bl	800cde4 <malloc>
 800b400:	4602      	mov	r2, r0
 800b402:	6320      	str	r0, [r4, #48]	@ 0x30
 800b404:	b920      	cbnz	r0, 800b410 <rand+0x20>
 800b406:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <rand+0x60>)
 800b408:	4812      	ldr	r0, [pc, #72]	@ (800b454 <rand+0x64>)
 800b40a:	2152      	movs	r1, #82	@ 0x52
 800b40c:	f000 fe2a 	bl	800c064 <__assert_func>
 800b410:	4911      	ldr	r1, [pc, #68]	@ (800b458 <rand+0x68>)
 800b412:	4b12      	ldr	r3, [pc, #72]	@ (800b45c <rand+0x6c>)
 800b414:	e9c0 1300 	strd	r1, r3, [r0]
 800b418:	4b11      	ldr	r3, [pc, #68]	@ (800b460 <rand+0x70>)
 800b41a:	6083      	str	r3, [r0, #8]
 800b41c:	230b      	movs	r3, #11
 800b41e:	8183      	strh	r3, [r0, #12]
 800b420:	2100      	movs	r1, #0
 800b422:	2001      	movs	r0, #1
 800b424:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b428:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b42a:	480e      	ldr	r0, [pc, #56]	@ (800b464 <rand+0x74>)
 800b42c:	690b      	ldr	r3, [r1, #16]
 800b42e:	694c      	ldr	r4, [r1, #20]
 800b430:	4a0d      	ldr	r2, [pc, #52]	@ (800b468 <rand+0x78>)
 800b432:	4358      	muls	r0, r3
 800b434:	fb02 0004 	mla	r0, r2, r4, r0
 800b438:	fba3 3202 	umull	r3, r2, r3, r2
 800b43c:	3301      	adds	r3, #1
 800b43e:	eb40 0002 	adc.w	r0, r0, r2
 800b442:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b446:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b44a:	bd10      	pop	{r4, pc}
 800b44c:	20000030 	.word	0x20000030
 800b450:	0800e040 	.word	0x0800e040
 800b454:	0800e057 	.word	0x0800e057
 800b458:	abcd330e 	.word	0xabcd330e
 800b45c:	e66d1234 	.word	0xe66d1234
 800b460:	0005deec 	.word	0x0005deec
 800b464:	5851f42d 	.word	0x5851f42d
 800b468:	4c957f2d 	.word	0x4c957f2d

0800b46c <__cvt>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	ec57 6b10 	vmov	r6, r7, d0
 800b474:	2f00      	cmp	r7, #0
 800b476:	460c      	mov	r4, r1
 800b478:	4619      	mov	r1, r3
 800b47a:	463b      	mov	r3, r7
 800b47c:	bfbb      	ittet	lt
 800b47e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b482:	461f      	movlt	r7, r3
 800b484:	2300      	movge	r3, #0
 800b486:	232d      	movlt	r3, #45	@ 0x2d
 800b488:	700b      	strb	r3, [r1, #0]
 800b48a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b48c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b490:	4691      	mov	r9, r2
 800b492:	f023 0820 	bic.w	r8, r3, #32
 800b496:	bfbc      	itt	lt
 800b498:	4632      	movlt	r2, r6
 800b49a:	4616      	movlt	r6, r2
 800b49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4a0:	d005      	beq.n	800b4ae <__cvt+0x42>
 800b4a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b4a6:	d100      	bne.n	800b4aa <__cvt+0x3e>
 800b4a8:	3401      	adds	r4, #1
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	e000      	b.n	800b4b0 <__cvt+0x44>
 800b4ae:	2103      	movs	r1, #3
 800b4b0:	ab03      	add	r3, sp, #12
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	ab02      	add	r3, sp, #8
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	ec47 6b10 	vmov	d0, r6, r7
 800b4bc:	4653      	mov	r3, sl
 800b4be:	4622      	mov	r2, r4
 800b4c0:	f000 fe76 	bl	800c1b0 <_dtoa_r>
 800b4c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	d119      	bne.n	800b500 <__cvt+0x94>
 800b4cc:	f019 0f01 	tst.w	r9, #1
 800b4d0:	d00e      	beq.n	800b4f0 <__cvt+0x84>
 800b4d2:	eb00 0904 	add.w	r9, r0, r4
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4e2:	b108      	cbz	r0, 800b4e8 <__cvt+0x7c>
 800b4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4e8:	2230      	movs	r2, #48	@ 0x30
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	454b      	cmp	r3, r9
 800b4ee:	d31e      	bcc.n	800b52e <__cvt+0xc2>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4f4:	1b5b      	subs	r3, r3, r5
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	b004      	add	sp, #16
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b504:	eb00 0904 	add.w	r9, r0, r4
 800b508:	d1e5      	bne.n	800b4d6 <__cvt+0x6a>
 800b50a:	7803      	ldrb	r3, [r0, #0]
 800b50c:	2b30      	cmp	r3, #48	@ 0x30
 800b50e:	d10a      	bne.n	800b526 <__cvt+0xba>
 800b510:	2200      	movs	r2, #0
 800b512:	2300      	movs	r3, #0
 800b514:	4630      	mov	r0, r6
 800b516:	4639      	mov	r1, r7
 800b518:	f7f5 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b51c:	b918      	cbnz	r0, 800b526 <__cvt+0xba>
 800b51e:	f1c4 0401 	rsb	r4, r4, #1
 800b522:	f8ca 4000 	str.w	r4, [sl]
 800b526:	f8da 3000 	ldr.w	r3, [sl]
 800b52a:	4499      	add	r9, r3
 800b52c:	e7d3      	b.n	800b4d6 <__cvt+0x6a>
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	9103      	str	r1, [sp, #12]
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	e7d9      	b.n	800b4ea <__cvt+0x7e>

0800b536 <__exponent>:
 800b536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b538:	2900      	cmp	r1, #0
 800b53a:	bfba      	itte	lt
 800b53c:	4249      	neglt	r1, r1
 800b53e:	232d      	movlt	r3, #45	@ 0x2d
 800b540:	232b      	movge	r3, #43	@ 0x2b
 800b542:	2909      	cmp	r1, #9
 800b544:	7002      	strb	r2, [r0, #0]
 800b546:	7043      	strb	r3, [r0, #1]
 800b548:	dd29      	ble.n	800b59e <__exponent+0x68>
 800b54a:	f10d 0307 	add.w	r3, sp, #7
 800b54e:	461d      	mov	r5, r3
 800b550:	270a      	movs	r7, #10
 800b552:	461a      	mov	r2, r3
 800b554:	fbb1 f6f7 	udiv	r6, r1, r7
 800b558:	fb07 1416 	mls	r4, r7, r6, r1
 800b55c:	3430      	adds	r4, #48	@ 0x30
 800b55e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b562:	460c      	mov	r4, r1
 800b564:	2c63      	cmp	r4, #99	@ 0x63
 800b566:	f103 33ff 	add.w	r3, r3, #4294967295
 800b56a:	4631      	mov	r1, r6
 800b56c:	dcf1      	bgt.n	800b552 <__exponent+0x1c>
 800b56e:	3130      	adds	r1, #48	@ 0x30
 800b570:	1e94      	subs	r4, r2, #2
 800b572:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b576:	1c41      	adds	r1, r0, #1
 800b578:	4623      	mov	r3, r4
 800b57a:	42ab      	cmp	r3, r5
 800b57c:	d30a      	bcc.n	800b594 <__exponent+0x5e>
 800b57e:	f10d 0309 	add.w	r3, sp, #9
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	42ac      	cmp	r4, r5
 800b586:	bf88      	it	hi
 800b588:	2300      	movhi	r3, #0
 800b58a:	3302      	adds	r3, #2
 800b58c:	4403      	add	r3, r0
 800b58e:	1a18      	subs	r0, r3, r0
 800b590:	b003      	add	sp, #12
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b598:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b59c:	e7ed      	b.n	800b57a <__exponent+0x44>
 800b59e:	2330      	movs	r3, #48	@ 0x30
 800b5a0:	3130      	adds	r1, #48	@ 0x30
 800b5a2:	7083      	strb	r3, [r0, #2]
 800b5a4:	70c1      	strb	r1, [r0, #3]
 800b5a6:	1d03      	adds	r3, r0, #4
 800b5a8:	e7f1      	b.n	800b58e <__exponent+0x58>
	...

0800b5ac <_printf_float>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	b08d      	sub	sp, #52	@ 0x34
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	4605      	mov	r5, r0
 800b5be:	f000 fccb 	bl	800bf58 <_localeconv_r>
 800b5c2:	6803      	ldr	r3, [r0, #0]
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 fe52 	bl	8000270 <strlen>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d4:	9005      	str	r0, [sp, #20]
 800b5d6:	3307      	adds	r3, #7
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	f103 0208 	add.w	r2, r3, #8
 800b5e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5e4:	f8d4 b000 	ldr.w	fp, [r4]
 800b5e8:	f8c8 2000 	str.w	r2, [r8]
 800b5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b602:	4b9c      	ldr	r3, [pc, #624]	@ (800b874 <_printf_float+0x2c8>)
 800b604:	f04f 32ff 	mov.w	r2, #4294967295
 800b608:	f7f5 fa90 	bl	8000b2c <__aeabi_dcmpun>
 800b60c:	bb70      	cbnz	r0, 800b66c <_printf_float+0xc0>
 800b60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b612:	4b98      	ldr	r3, [pc, #608]	@ (800b874 <_printf_float+0x2c8>)
 800b614:	f04f 32ff 	mov.w	r2, #4294967295
 800b618:	f7f5 fa6a 	bl	8000af0 <__aeabi_dcmple>
 800b61c:	bb30      	cbnz	r0, 800b66c <_printf_float+0xc0>
 800b61e:	2200      	movs	r2, #0
 800b620:	2300      	movs	r3, #0
 800b622:	4640      	mov	r0, r8
 800b624:	4649      	mov	r1, r9
 800b626:	f7f5 fa59 	bl	8000adc <__aeabi_dcmplt>
 800b62a:	b110      	cbz	r0, 800b632 <_printf_float+0x86>
 800b62c:	232d      	movs	r3, #45	@ 0x2d
 800b62e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b632:	4a91      	ldr	r2, [pc, #580]	@ (800b878 <_printf_float+0x2cc>)
 800b634:	4b91      	ldr	r3, [pc, #580]	@ (800b87c <_printf_float+0x2d0>)
 800b636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b63a:	bf8c      	ite	hi
 800b63c:	4690      	movhi	r8, r2
 800b63e:	4698      	movls	r8, r3
 800b640:	2303      	movs	r3, #3
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	f02b 0304 	bic.w	r3, fp, #4
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	9700      	str	r7, [sp, #0]
 800b650:	4633      	mov	r3, r6
 800b652:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b654:	4621      	mov	r1, r4
 800b656:	4628      	mov	r0, r5
 800b658:	f000 f9d2 	bl	800ba00 <_printf_common>
 800b65c:	3001      	adds	r0, #1
 800b65e:	f040 808d 	bne.w	800b77c <_printf_float+0x1d0>
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	b00d      	add	sp, #52	@ 0x34
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66c:	4642      	mov	r2, r8
 800b66e:	464b      	mov	r3, r9
 800b670:	4640      	mov	r0, r8
 800b672:	4649      	mov	r1, r9
 800b674:	f7f5 fa5a 	bl	8000b2c <__aeabi_dcmpun>
 800b678:	b140      	cbz	r0, 800b68c <_printf_float+0xe0>
 800b67a:	464b      	mov	r3, r9
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfbc      	itt	lt
 800b680:	232d      	movlt	r3, #45	@ 0x2d
 800b682:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b686:	4a7e      	ldr	r2, [pc, #504]	@ (800b880 <_printf_float+0x2d4>)
 800b688:	4b7e      	ldr	r3, [pc, #504]	@ (800b884 <_printf_float+0x2d8>)
 800b68a:	e7d4      	b.n	800b636 <_printf_float+0x8a>
 800b68c:	6863      	ldr	r3, [r4, #4]
 800b68e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b692:	9206      	str	r2, [sp, #24]
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	d13b      	bne.n	800b710 <_printf_float+0x164>
 800b698:	2306      	movs	r3, #6
 800b69a:	6063      	str	r3, [r4, #4]
 800b69c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b6a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b6ac:	ab09      	add	r3, sp, #36	@ 0x24
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	6861      	ldr	r1, [r4, #4]
 800b6b2:	ec49 8b10 	vmov	d0, r8, r9
 800b6b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7ff fed6 	bl	800b46c <__cvt>
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6c4:	2b47      	cmp	r3, #71	@ 0x47
 800b6c6:	4680      	mov	r8, r0
 800b6c8:	d129      	bne.n	800b71e <_printf_float+0x172>
 800b6ca:	1cc8      	adds	r0, r1, #3
 800b6cc:	db02      	blt.n	800b6d4 <_printf_float+0x128>
 800b6ce:	6863      	ldr	r3, [r4, #4]
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	dd41      	ble.n	800b758 <_printf_float+0x1ac>
 800b6d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6d8:	fa5f fa8a 	uxtb.w	sl, sl
 800b6dc:	3901      	subs	r1, #1
 800b6de:	4652      	mov	r2, sl
 800b6e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b6e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6e6:	f7ff ff26 	bl	800b536 <__exponent>
 800b6ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6ec:	1813      	adds	r3, r2, r0
 800b6ee:	2a01      	cmp	r2, #1
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	dc02      	bgt.n	800b6fc <_printf_float+0x150>
 800b6f6:	6822      	ldr	r2, [r4, #0]
 800b6f8:	07d2      	lsls	r2, r2, #31
 800b6fa:	d501      	bpl.n	800b700 <_printf_float+0x154>
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0a2      	beq.n	800b64e <_printf_float+0xa2>
 800b708:	232d      	movs	r3, #45	@ 0x2d
 800b70a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b70e:	e79e      	b.n	800b64e <_printf_float+0xa2>
 800b710:	9a06      	ldr	r2, [sp, #24]
 800b712:	2a47      	cmp	r2, #71	@ 0x47
 800b714:	d1c2      	bne.n	800b69c <_printf_float+0xf0>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1c0      	bne.n	800b69c <_printf_float+0xf0>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e7bd      	b.n	800b69a <_printf_float+0xee>
 800b71e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b722:	d9db      	bls.n	800b6dc <_printf_float+0x130>
 800b724:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b728:	d118      	bne.n	800b75c <_printf_float+0x1b0>
 800b72a:	2900      	cmp	r1, #0
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	dd0b      	ble.n	800b748 <_printf_float+0x19c>
 800b730:	6121      	str	r1, [r4, #16]
 800b732:	b913      	cbnz	r3, 800b73a <_printf_float+0x18e>
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	07d0      	lsls	r0, r2, #31
 800b738:	d502      	bpl.n	800b740 <_printf_float+0x194>
 800b73a:	3301      	adds	r3, #1
 800b73c:	440b      	add	r3, r1
 800b73e:	6123      	str	r3, [r4, #16]
 800b740:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b742:	f04f 0900 	mov.w	r9, #0
 800b746:	e7db      	b.n	800b700 <_printf_float+0x154>
 800b748:	b913      	cbnz	r3, 800b750 <_printf_float+0x1a4>
 800b74a:	6822      	ldr	r2, [r4, #0]
 800b74c:	07d2      	lsls	r2, r2, #31
 800b74e:	d501      	bpl.n	800b754 <_printf_float+0x1a8>
 800b750:	3302      	adds	r3, #2
 800b752:	e7f4      	b.n	800b73e <_printf_float+0x192>
 800b754:	2301      	movs	r3, #1
 800b756:	e7f2      	b.n	800b73e <_printf_float+0x192>
 800b758:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75e:	4299      	cmp	r1, r3
 800b760:	db05      	blt.n	800b76e <_printf_float+0x1c2>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	6121      	str	r1, [r4, #16]
 800b766:	07d8      	lsls	r0, r3, #31
 800b768:	d5ea      	bpl.n	800b740 <_printf_float+0x194>
 800b76a:	1c4b      	adds	r3, r1, #1
 800b76c:	e7e7      	b.n	800b73e <_printf_float+0x192>
 800b76e:	2900      	cmp	r1, #0
 800b770:	bfd4      	ite	le
 800b772:	f1c1 0202 	rsble	r2, r1, #2
 800b776:	2201      	movgt	r2, #1
 800b778:	4413      	add	r3, r2
 800b77a:	e7e0      	b.n	800b73e <_printf_float+0x192>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	055a      	lsls	r2, r3, #21
 800b780:	d407      	bmi.n	800b792 <_printf_float+0x1e6>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	4642      	mov	r2, r8
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	d12b      	bne.n	800b7e8 <_printf_float+0x23c>
 800b790:	e767      	b.n	800b662 <_printf_float+0xb6>
 800b792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b796:	f240 80dd 	bls.w	800b954 <_printf_float+0x3a8>
 800b79a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f7f5 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d033      	beq.n	800b812 <_printf_float+0x266>
 800b7aa:	4a37      	ldr	r2, [pc, #220]	@ (800b888 <_printf_float+0x2dc>)
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f af54 	beq.w	800b662 <_printf_float+0xb6>
 800b7ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b7be:	4543      	cmp	r3, r8
 800b7c0:	db02      	blt.n	800b7c8 <_printf_float+0x21c>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	07d8      	lsls	r0, r3, #31
 800b7c6:	d50f      	bpl.n	800b7e8 <_printf_float+0x23c>
 800b7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f af45 	beq.w	800b662 <_printf_float+0xb6>
 800b7d8:	f04f 0900 	mov.w	r9, #0
 800b7dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7e0:	f104 0a1a 	add.w	sl, r4, #26
 800b7e4:	45c8      	cmp	r8, r9
 800b7e6:	dc09      	bgt.n	800b7fc <_printf_float+0x250>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	079b      	lsls	r3, r3, #30
 800b7ec:	f100 8103 	bmi.w	800b9f6 <_printf_float+0x44a>
 800b7f0:	68e0      	ldr	r0, [r4, #12]
 800b7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7f4:	4298      	cmp	r0, r3
 800b7f6:	bfb8      	it	lt
 800b7f8:	4618      	movlt	r0, r3
 800b7fa:	e734      	b.n	800b666 <_printf_float+0xba>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4652      	mov	r2, sl
 800b800:	4631      	mov	r1, r6
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	f43f af2b 	beq.w	800b662 <_printf_float+0xb6>
 800b80c:	f109 0901 	add.w	r9, r9, #1
 800b810:	e7e8      	b.n	800b7e4 <_printf_float+0x238>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	dc39      	bgt.n	800b88c <_printf_float+0x2e0>
 800b818:	4a1b      	ldr	r2, [pc, #108]	@ (800b888 <_printf_float+0x2dc>)
 800b81a:	2301      	movs	r3, #1
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f af1d 	beq.w	800b662 <_printf_float+0xb6>
 800b828:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b82c:	ea59 0303 	orrs.w	r3, r9, r3
 800b830:	d102      	bne.n	800b838 <_printf_float+0x28c>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	07d9      	lsls	r1, r3, #31
 800b836:	d5d7      	bpl.n	800b7e8 <_printf_float+0x23c>
 800b838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af0d 	beq.w	800b662 <_printf_float+0xb6>
 800b848:	f04f 0a00 	mov.w	sl, #0
 800b84c:	f104 0b1a 	add.w	fp, r4, #26
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	425b      	negs	r3, r3
 800b854:	4553      	cmp	r3, sl
 800b856:	dc01      	bgt.n	800b85c <_printf_float+0x2b0>
 800b858:	464b      	mov	r3, r9
 800b85a:	e793      	b.n	800b784 <_printf_float+0x1d8>
 800b85c:	2301      	movs	r3, #1
 800b85e:	465a      	mov	r2, fp
 800b860:	4631      	mov	r1, r6
 800b862:	4628      	mov	r0, r5
 800b864:	47b8      	blx	r7
 800b866:	3001      	adds	r0, #1
 800b868:	f43f aefb 	beq.w	800b662 <_printf_float+0xb6>
 800b86c:	f10a 0a01 	add.w	sl, sl, #1
 800b870:	e7ee      	b.n	800b850 <_printf_float+0x2a4>
 800b872:	bf00      	nop
 800b874:	7fefffff 	.word	0x7fefffff
 800b878:	0800e0b3 	.word	0x0800e0b3
 800b87c:	0800e0af 	.word	0x0800e0af
 800b880:	0800e0bb 	.word	0x0800e0bb
 800b884:	0800e0b7 	.word	0x0800e0b7
 800b888:	0800e0bf 	.word	0x0800e0bf
 800b88c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b88e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b892:	4553      	cmp	r3, sl
 800b894:	bfa8      	it	ge
 800b896:	4653      	movge	r3, sl
 800b898:	2b00      	cmp	r3, #0
 800b89a:	4699      	mov	r9, r3
 800b89c:	dc36      	bgt.n	800b90c <_printf_float+0x360>
 800b89e:	f04f 0b00 	mov.w	fp, #0
 800b8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8a6:	f104 021a 	add.w	r2, r4, #26
 800b8aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b8ac:	9306      	str	r3, [sp, #24]
 800b8ae:	eba3 0309 	sub.w	r3, r3, r9
 800b8b2:	455b      	cmp	r3, fp
 800b8b4:	dc31      	bgt.n	800b91a <_printf_float+0x36e>
 800b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b8:	459a      	cmp	sl, r3
 800b8ba:	dc3a      	bgt.n	800b932 <_printf_float+0x386>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07da      	lsls	r2, r3, #31
 800b8c0:	d437      	bmi.n	800b932 <_printf_float+0x386>
 800b8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c4:	ebaa 0903 	sub.w	r9, sl, r3
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	ebaa 0303 	sub.w	r3, sl, r3
 800b8ce:	4599      	cmp	r9, r3
 800b8d0:	bfa8      	it	ge
 800b8d2:	4699      	movge	r9, r3
 800b8d4:	f1b9 0f00 	cmp.w	r9, #0
 800b8d8:	dc33      	bgt.n	800b942 <_printf_float+0x396>
 800b8da:	f04f 0800 	mov.w	r8, #0
 800b8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8e2:	f104 0b1a 	add.w	fp, r4, #26
 800b8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b8ec:	eba3 0309 	sub.w	r3, r3, r9
 800b8f0:	4543      	cmp	r3, r8
 800b8f2:	f77f af79 	ble.w	800b7e8 <_printf_float+0x23c>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	465a      	mov	r2, fp
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	47b8      	blx	r7
 800b900:	3001      	adds	r0, #1
 800b902:	f43f aeae 	beq.w	800b662 <_printf_float+0xb6>
 800b906:	f108 0801 	add.w	r8, r8, #1
 800b90a:	e7ec      	b.n	800b8e6 <_printf_float+0x33a>
 800b90c:	4642      	mov	r2, r8
 800b90e:	4631      	mov	r1, r6
 800b910:	4628      	mov	r0, r5
 800b912:	47b8      	blx	r7
 800b914:	3001      	adds	r0, #1
 800b916:	d1c2      	bne.n	800b89e <_printf_float+0x2f2>
 800b918:	e6a3      	b.n	800b662 <_printf_float+0xb6>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	9206      	str	r2, [sp, #24]
 800b922:	47b8      	blx	r7
 800b924:	3001      	adds	r0, #1
 800b926:	f43f ae9c 	beq.w	800b662 <_printf_float+0xb6>
 800b92a:	9a06      	ldr	r2, [sp, #24]
 800b92c:	f10b 0b01 	add.w	fp, fp, #1
 800b930:	e7bb      	b.n	800b8aa <_printf_float+0x2fe>
 800b932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	d1c0      	bne.n	800b8c2 <_printf_float+0x316>
 800b940:	e68f      	b.n	800b662 <_printf_float+0xb6>
 800b942:	9a06      	ldr	r2, [sp, #24]
 800b944:	464b      	mov	r3, r9
 800b946:	4442      	add	r2, r8
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b8      	blx	r7
 800b94e:	3001      	adds	r0, #1
 800b950:	d1c3      	bne.n	800b8da <_printf_float+0x32e>
 800b952:	e686      	b.n	800b662 <_printf_float+0xb6>
 800b954:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b958:	f1ba 0f01 	cmp.w	sl, #1
 800b95c:	dc01      	bgt.n	800b962 <_printf_float+0x3b6>
 800b95e:	07db      	lsls	r3, r3, #31
 800b960:	d536      	bpl.n	800b9d0 <_printf_float+0x424>
 800b962:	2301      	movs	r3, #1
 800b964:	4642      	mov	r2, r8
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f ae78 	beq.w	800b662 <_printf_float+0xb6>
 800b972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b976:	4631      	mov	r1, r6
 800b978:	4628      	mov	r0, r5
 800b97a:	47b8      	blx	r7
 800b97c:	3001      	adds	r0, #1
 800b97e:	f43f ae70 	beq.w	800b662 <_printf_float+0xb6>
 800b982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b986:	2200      	movs	r2, #0
 800b988:	2300      	movs	r3, #0
 800b98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b98e:	f7f5 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b992:	b9c0      	cbnz	r0, 800b9c6 <_printf_float+0x41a>
 800b994:	4653      	mov	r3, sl
 800b996:	f108 0201 	add.w	r2, r8, #1
 800b99a:	4631      	mov	r1, r6
 800b99c:	4628      	mov	r0, r5
 800b99e:	47b8      	blx	r7
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d10c      	bne.n	800b9be <_printf_float+0x412>
 800b9a4:	e65d      	b.n	800b662 <_printf_float+0xb6>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	465a      	mov	r2, fp
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	f43f ae56 	beq.w	800b662 <_printf_float+0xb6>
 800b9b6:	f108 0801 	add.w	r8, r8, #1
 800b9ba:	45d0      	cmp	r8, sl
 800b9bc:	dbf3      	blt.n	800b9a6 <_printf_float+0x3fa>
 800b9be:	464b      	mov	r3, r9
 800b9c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b9c4:	e6df      	b.n	800b786 <_printf_float+0x1da>
 800b9c6:	f04f 0800 	mov.w	r8, #0
 800b9ca:	f104 0b1a 	add.w	fp, r4, #26
 800b9ce:	e7f4      	b.n	800b9ba <_printf_float+0x40e>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	4642      	mov	r2, r8
 800b9d4:	e7e1      	b.n	800b99a <_printf_float+0x3ee>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	464a      	mov	r2, r9
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4628      	mov	r0, r5
 800b9de:	47b8      	blx	r7
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f43f ae3e 	beq.w	800b662 <_printf_float+0xb6>
 800b9e6:	f108 0801 	add.w	r8, r8, #1
 800b9ea:	68e3      	ldr	r3, [r4, #12]
 800b9ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9ee:	1a5b      	subs	r3, r3, r1
 800b9f0:	4543      	cmp	r3, r8
 800b9f2:	dcf0      	bgt.n	800b9d6 <_printf_float+0x42a>
 800b9f4:	e6fc      	b.n	800b7f0 <_printf_float+0x244>
 800b9f6:	f04f 0800 	mov.w	r8, #0
 800b9fa:	f104 0919 	add.w	r9, r4, #25
 800b9fe:	e7f4      	b.n	800b9ea <_printf_float+0x43e>

0800ba00 <_printf_common>:
 800ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	4616      	mov	r6, r2
 800ba06:	4698      	mov	r8, r3
 800ba08:	688a      	ldr	r2, [r1, #8]
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bfb8      	it	lt
 800ba14:	4613      	movlt	r3, r2
 800ba16:	6033      	str	r3, [r6, #0]
 800ba18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	b10a      	cbz	r2, 800ba26 <_printf_common+0x26>
 800ba22:	3301      	adds	r3, #1
 800ba24:	6033      	str	r3, [r6, #0]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	0699      	lsls	r1, r3, #26
 800ba2a:	bf42      	ittt	mi
 800ba2c:	6833      	ldrmi	r3, [r6, #0]
 800ba2e:	3302      	addmi	r3, #2
 800ba30:	6033      	strmi	r3, [r6, #0]
 800ba32:	6825      	ldr	r5, [r4, #0]
 800ba34:	f015 0506 	ands.w	r5, r5, #6
 800ba38:	d106      	bne.n	800ba48 <_printf_common+0x48>
 800ba3a:	f104 0a19 	add.w	sl, r4, #25
 800ba3e:	68e3      	ldr	r3, [r4, #12]
 800ba40:	6832      	ldr	r2, [r6, #0]
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dc26      	bgt.n	800ba96 <_printf_common+0x96>
 800ba48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	3b00      	subs	r3, #0
 800ba50:	bf18      	it	ne
 800ba52:	2301      	movne	r3, #1
 800ba54:	0692      	lsls	r2, r2, #26
 800ba56:	d42b      	bmi.n	800bab0 <_printf_common+0xb0>
 800ba58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	4638      	mov	r0, r7
 800ba60:	47c8      	blx	r9
 800ba62:	3001      	adds	r0, #1
 800ba64:	d01e      	beq.n	800baa4 <_printf_common+0xa4>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	6922      	ldr	r2, [r4, #16]
 800ba6a:	f003 0306 	and.w	r3, r3, #6
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	bf02      	ittt	eq
 800ba72:	68e5      	ldreq	r5, [r4, #12]
 800ba74:	6833      	ldreq	r3, [r6, #0]
 800ba76:	1aed      	subeq	r5, r5, r3
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	bf0c      	ite	eq
 800ba7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba80:	2500      	movne	r5, #0
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bfc4      	itt	gt
 800ba86:	1a9b      	subgt	r3, r3, r2
 800ba88:	18ed      	addgt	r5, r5, r3
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	341a      	adds	r4, #26
 800ba8e:	42b5      	cmp	r5, r6
 800ba90:	d11a      	bne.n	800bac8 <_printf_common+0xc8>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e008      	b.n	800baa8 <_printf_common+0xa8>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4652      	mov	r2, sl
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	47c8      	blx	r9
 800baa0:	3001      	adds	r0, #1
 800baa2:	d103      	bne.n	800baac <_printf_common+0xac>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baac:	3501      	adds	r5, #1
 800baae:	e7c6      	b.n	800ba3e <_printf_common+0x3e>
 800bab0:	18e1      	adds	r1, r4, r3
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	2030      	movs	r0, #48	@ 0x30
 800bab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baba:	4422      	add	r2, r4
 800babc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bac4:	3302      	adds	r3, #2
 800bac6:	e7c7      	b.n	800ba58 <_printf_common+0x58>
 800bac8:	2301      	movs	r3, #1
 800baca:	4622      	mov	r2, r4
 800bacc:	4641      	mov	r1, r8
 800bace:	4638      	mov	r0, r7
 800bad0:	47c8      	blx	r9
 800bad2:	3001      	adds	r0, #1
 800bad4:	d0e6      	beq.n	800baa4 <_printf_common+0xa4>
 800bad6:	3601      	adds	r6, #1
 800bad8:	e7d9      	b.n	800ba8e <_printf_common+0x8e>
	...

0800badc <_printf_i>:
 800badc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	7e0f      	ldrb	r7, [r1, #24]
 800bae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bae4:	2f78      	cmp	r7, #120	@ 0x78
 800bae6:	4691      	mov	r9, r2
 800bae8:	4680      	mov	r8, r0
 800baea:	460c      	mov	r4, r1
 800baec:	469a      	mov	sl, r3
 800baee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baf2:	d807      	bhi.n	800bb04 <_printf_i+0x28>
 800baf4:	2f62      	cmp	r7, #98	@ 0x62
 800baf6:	d80a      	bhi.n	800bb0e <_printf_i+0x32>
 800baf8:	2f00      	cmp	r7, #0
 800bafa:	f000 80d1 	beq.w	800bca0 <_printf_i+0x1c4>
 800bafe:	2f58      	cmp	r7, #88	@ 0x58
 800bb00:	f000 80b8 	beq.w	800bc74 <_printf_i+0x198>
 800bb04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb0c:	e03a      	b.n	800bb84 <_printf_i+0xa8>
 800bb0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb12:	2b15      	cmp	r3, #21
 800bb14:	d8f6      	bhi.n	800bb04 <_printf_i+0x28>
 800bb16:	a101      	add	r1, pc, #4	@ (adr r1, 800bb1c <_printf_i+0x40>)
 800bb18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb1c:	0800bb75 	.word	0x0800bb75
 800bb20:	0800bb89 	.word	0x0800bb89
 800bb24:	0800bb05 	.word	0x0800bb05
 800bb28:	0800bb05 	.word	0x0800bb05
 800bb2c:	0800bb05 	.word	0x0800bb05
 800bb30:	0800bb05 	.word	0x0800bb05
 800bb34:	0800bb89 	.word	0x0800bb89
 800bb38:	0800bb05 	.word	0x0800bb05
 800bb3c:	0800bb05 	.word	0x0800bb05
 800bb40:	0800bb05 	.word	0x0800bb05
 800bb44:	0800bb05 	.word	0x0800bb05
 800bb48:	0800bc87 	.word	0x0800bc87
 800bb4c:	0800bbb3 	.word	0x0800bbb3
 800bb50:	0800bc41 	.word	0x0800bc41
 800bb54:	0800bb05 	.word	0x0800bb05
 800bb58:	0800bb05 	.word	0x0800bb05
 800bb5c:	0800bca9 	.word	0x0800bca9
 800bb60:	0800bb05 	.word	0x0800bb05
 800bb64:	0800bbb3 	.word	0x0800bbb3
 800bb68:	0800bb05 	.word	0x0800bb05
 800bb6c:	0800bb05 	.word	0x0800bb05
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	6833      	ldr	r3, [r6, #0]
 800bb76:	1d1a      	adds	r2, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6032      	str	r2, [r6, #0]
 800bb7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb84:	2301      	movs	r3, #1
 800bb86:	e09c      	b.n	800bcc2 <_printf_i+0x1e6>
 800bb88:	6833      	ldr	r3, [r6, #0]
 800bb8a:	6820      	ldr	r0, [r4, #0]
 800bb8c:	1d19      	adds	r1, r3, #4
 800bb8e:	6031      	str	r1, [r6, #0]
 800bb90:	0606      	lsls	r6, r0, #24
 800bb92:	d501      	bpl.n	800bb98 <_printf_i+0xbc>
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	e003      	b.n	800bba0 <_printf_i+0xc4>
 800bb98:	0645      	lsls	r5, r0, #25
 800bb9a:	d5fb      	bpl.n	800bb94 <_printf_i+0xb8>
 800bb9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bba0:	2d00      	cmp	r5, #0
 800bba2:	da03      	bge.n	800bbac <_printf_i+0xd0>
 800bba4:	232d      	movs	r3, #45	@ 0x2d
 800bba6:	426d      	negs	r5, r5
 800bba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbac:	4858      	ldr	r0, [pc, #352]	@ (800bd10 <_printf_i+0x234>)
 800bbae:	230a      	movs	r3, #10
 800bbb0:	e011      	b.n	800bbd6 <_printf_i+0xfa>
 800bbb2:	6821      	ldr	r1, [r4, #0]
 800bbb4:	6833      	ldr	r3, [r6, #0]
 800bbb6:	0608      	lsls	r0, r1, #24
 800bbb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbbc:	d402      	bmi.n	800bbc4 <_printf_i+0xe8>
 800bbbe:	0649      	lsls	r1, r1, #25
 800bbc0:	bf48      	it	mi
 800bbc2:	b2ad      	uxthmi	r5, r5
 800bbc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbc6:	4852      	ldr	r0, [pc, #328]	@ (800bd10 <_printf_i+0x234>)
 800bbc8:	6033      	str	r3, [r6, #0]
 800bbca:	bf14      	ite	ne
 800bbcc:	230a      	movne	r3, #10
 800bbce:	2308      	moveq	r3, #8
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbd6:	6866      	ldr	r6, [r4, #4]
 800bbd8:	60a6      	str	r6, [r4, #8]
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	db05      	blt.n	800bbea <_printf_i+0x10e>
 800bbde:	6821      	ldr	r1, [r4, #0]
 800bbe0:	432e      	orrs	r6, r5
 800bbe2:	f021 0104 	bic.w	r1, r1, #4
 800bbe6:	6021      	str	r1, [r4, #0]
 800bbe8:	d04b      	beq.n	800bc82 <_printf_i+0x1a6>
 800bbea:	4616      	mov	r6, r2
 800bbec:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbf0:	fb03 5711 	mls	r7, r3, r1, r5
 800bbf4:	5dc7      	ldrb	r7, [r0, r7]
 800bbf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbfa:	462f      	mov	r7, r5
 800bbfc:	42bb      	cmp	r3, r7
 800bbfe:	460d      	mov	r5, r1
 800bc00:	d9f4      	bls.n	800bbec <_printf_i+0x110>
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d10b      	bne.n	800bc1e <_printf_i+0x142>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	07df      	lsls	r7, r3, #31
 800bc0a:	d508      	bpl.n	800bc1e <_printf_i+0x142>
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	6861      	ldr	r1, [r4, #4]
 800bc10:	4299      	cmp	r1, r3
 800bc12:	bfde      	ittt	le
 800bc14:	2330      	movle	r3, #48	@ 0x30
 800bc16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc1e:	1b92      	subs	r2, r2, r6
 800bc20:	6122      	str	r2, [r4, #16]
 800bc22:	f8cd a000 	str.w	sl, [sp]
 800bc26:	464b      	mov	r3, r9
 800bc28:	aa03      	add	r2, sp, #12
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	f7ff fee7 	bl	800ba00 <_printf_common>
 800bc32:	3001      	adds	r0, #1
 800bc34:	d14a      	bne.n	800bccc <_printf_i+0x1f0>
 800bc36:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3a:	b004      	add	sp, #16
 800bc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	f043 0320 	orr.w	r3, r3, #32
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	4832      	ldr	r0, [pc, #200]	@ (800bd14 <_printf_i+0x238>)
 800bc4a:	2778      	movs	r7, #120	@ 0x78
 800bc4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	6831      	ldr	r1, [r6, #0]
 800bc54:	061f      	lsls	r7, r3, #24
 800bc56:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc5a:	d402      	bmi.n	800bc62 <_printf_i+0x186>
 800bc5c:	065f      	lsls	r7, r3, #25
 800bc5e:	bf48      	it	mi
 800bc60:	b2ad      	uxthmi	r5, r5
 800bc62:	6031      	str	r1, [r6, #0]
 800bc64:	07d9      	lsls	r1, r3, #31
 800bc66:	bf44      	itt	mi
 800bc68:	f043 0320 	orrmi.w	r3, r3, #32
 800bc6c:	6023      	strmi	r3, [r4, #0]
 800bc6e:	b11d      	cbz	r5, 800bc78 <_printf_i+0x19c>
 800bc70:	2310      	movs	r3, #16
 800bc72:	e7ad      	b.n	800bbd0 <_printf_i+0xf4>
 800bc74:	4826      	ldr	r0, [pc, #152]	@ (800bd10 <_printf_i+0x234>)
 800bc76:	e7e9      	b.n	800bc4c <_printf_i+0x170>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	e7f6      	b.n	800bc70 <_printf_i+0x194>
 800bc82:	4616      	mov	r6, r2
 800bc84:	e7bd      	b.n	800bc02 <_printf_i+0x126>
 800bc86:	6833      	ldr	r3, [r6, #0]
 800bc88:	6825      	ldr	r5, [r4, #0]
 800bc8a:	6961      	ldr	r1, [r4, #20]
 800bc8c:	1d18      	adds	r0, r3, #4
 800bc8e:	6030      	str	r0, [r6, #0]
 800bc90:	062e      	lsls	r6, r5, #24
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	d501      	bpl.n	800bc9a <_printf_i+0x1be>
 800bc96:	6019      	str	r1, [r3, #0]
 800bc98:	e002      	b.n	800bca0 <_printf_i+0x1c4>
 800bc9a:	0668      	lsls	r0, r5, #25
 800bc9c:	d5fb      	bpl.n	800bc96 <_printf_i+0x1ba>
 800bc9e:	8019      	strh	r1, [r3, #0]
 800bca0:	2300      	movs	r3, #0
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	4616      	mov	r6, r2
 800bca6:	e7bc      	b.n	800bc22 <_printf_i+0x146>
 800bca8:	6833      	ldr	r3, [r6, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	6032      	str	r2, [r6, #0]
 800bcae:	681e      	ldr	r6, [r3, #0]
 800bcb0:	6862      	ldr	r2, [r4, #4]
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7f4 fa8b 	bl	80001d0 <memchr>
 800bcba:	b108      	cbz	r0, 800bcc0 <_printf_i+0x1e4>
 800bcbc:	1b80      	subs	r0, r0, r6
 800bcbe:	6060      	str	r0, [r4, #4]
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	6123      	str	r3, [r4, #16]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcca:	e7aa      	b.n	800bc22 <_printf_i+0x146>
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	4632      	mov	r2, r6
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	47d0      	blx	sl
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d0ad      	beq.n	800bc36 <_printf_i+0x15a>
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	079b      	lsls	r3, r3, #30
 800bcde:	d413      	bmi.n	800bd08 <_printf_i+0x22c>
 800bce0:	68e0      	ldr	r0, [r4, #12]
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	4298      	cmp	r0, r3
 800bce6:	bfb8      	it	lt
 800bce8:	4618      	movlt	r0, r3
 800bcea:	e7a6      	b.n	800bc3a <_printf_i+0x15e>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4632      	mov	r2, r6
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	47d0      	blx	sl
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	d09d      	beq.n	800bc36 <_printf_i+0x15a>
 800bcfa:	3501      	adds	r5, #1
 800bcfc:	68e3      	ldr	r3, [r4, #12]
 800bcfe:	9903      	ldr	r1, [sp, #12]
 800bd00:	1a5b      	subs	r3, r3, r1
 800bd02:	42ab      	cmp	r3, r5
 800bd04:	dcf2      	bgt.n	800bcec <_printf_i+0x210>
 800bd06:	e7eb      	b.n	800bce0 <_printf_i+0x204>
 800bd08:	2500      	movs	r5, #0
 800bd0a:	f104 0619 	add.w	r6, r4, #25
 800bd0e:	e7f5      	b.n	800bcfc <_printf_i+0x220>
 800bd10:	0800e0c1 	.word	0x0800e0c1
 800bd14:	0800e0d2 	.word	0x0800e0d2

0800bd18 <std>:
 800bd18:	2300      	movs	r3, #0
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd26:	6083      	str	r3, [r0, #8]
 800bd28:	8181      	strh	r1, [r0, #12]
 800bd2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd2c:	81c2      	strh	r2, [r0, #14]
 800bd2e:	6183      	str	r3, [r0, #24]
 800bd30:	4619      	mov	r1, r3
 800bd32:	2208      	movs	r2, #8
 800bd34:	305c      	adds	r0, #92	@ 0x5c
 800bd36:	f000 f906 	bl	800bf46 <memset>
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <std+0x58>)
 800bd3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <std+0x5c>)
 800bd40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd42:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <std+0x60>)
 800bd44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd46:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <std+0x64>)
 800bd48:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd80 <std+0x68>)
 800bd4c:	6224      	str	r4, [r4, #32]
 800bd4e:	429c      	cmp	r4, r3
 800bd50:	d006      	beq.n	800bd60 <std+0x48>
 800bd52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd56:	4294      	cmp	r4, r2
 800bd58:	d002      	beq.n	800bd60 <std+0x48>
 800bd5a:	33d0      	adds	r3, #208	@ 0xd0
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d105      	bne.n	800bd6c <std+0x54>
 800bd60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd68:	f000 b96a 	b.w	800c040 <__retarget_lock_init_recursive>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop
 800bd70:	0800bec1 	.word	0x0800bec1
 800bd74:	0800bee3 	.word	0x0800bee3
 800bd78:	0800bf1b 	.word	0x0800bf1b
 800bd7c:	0800bf3f 	.word	0x0800bf3f
 800bd80:	20000a94 	.word	0x20000a94

0800bd84 <stdio_exit_handler>:
 800bd84:	4a02      	ldr	r2, [pc, #8]	@ (800bd90 <stdio_exit_handler+0xc>)
 800bd86:	4903      	ldr	r1, [pc, #12]	@ (800bd94 <stdio_exit_handler+0x10>)
 800bd88:	4803      	ldr	r0, [pc, #12]	@ (800bd98 <stdio_exit_handler+0x14>)
 800bd8a:	f000 b869 	b.w	800be60 <_fwalk_sglue>
 800bd8e:	bf00      	nop
 800bd90:	20000024 	.word	0x20000024
 800bd94:	0800d9d1 	.word	0x0800d9d1
 800bd98:	20000034 	.word	0x20000034

0800bd9c <cleanup_stdio>:
 800bd9c:	6841      	ldr	r1, [r0, #4]
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd0 <cleanup_stdio+0x34>)
 800bda0:	4299      	cmp	r1, r3
 800bda2:	b510      	push	{r4, lr}
 800bda4:	4604      	mov	r4, r0
 800bda6:	d001      	beq.n	800bdac <cleanup_stdio+0x10>
 800bda8:	f001 fe12 	bl	800d9d0 <_fflush_r>
 800bdac:	68a1      	ldr	r1, [r4, #8]
 800bdae:	4b09      	ldr	r3, [pc, #36]	@ (800bdd4 <cleanup_stdio+0x38>)
 800bdb0:	4299      	cmp	r1, r3
 800bdb2:	d002      	beq.n	800bdba <cleanup_stdio+0x1e>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f001 fe0b 	bl	800d9d0 <_fflush_r>
 800bdba:	68e1      	ldr	r1, [r4, #12]
 800bdbc:	4b06      	ldr	r3, [pc, #24]	@ (800bdd8 <cleanup_stdio+0x3c>)
 800bdbe:	4299      	cmp	r1, r3
 800bdc0:	d004      	beq.n	800bdcc <cleanup_stdio+0x30>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc8:	f001 be02 	b.w	800d9d0 <_fflush_r>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000a94 	.word	0x20000a94
 800bdd4:	20000afc 	.word	0x20000afc
 800bdd8:	20000b64 	.word	0x20000b64

0800bddc <global_stdio_init.part.0>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4b0b      	ldr	r3, [pc, #44]	@ (800be0c <global_stdio_init.part.0+0x30>)
 800bde0:	4c0b      	ldr	r4, [pc, #44]	@ (800be10 <global_stdio_init.part.0+0x34>)
 800bde2:	4a0c      	ldr	r2, [pc, #48]	@ (800be14 <global_stdio_init.part.0+0x38>)
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	4620      	mov	r0, r4
 800bde8:	2200      	movs	r2, #0
 800bdea:	2104      	movs	r1, #4
 800bdec:	f7ff ff94 	bl	800bd18 <std>
 800bdf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	2109      	movs	r1, #9
 800bdf8:	f7ff ff8e 	bl	800bd18 <std>
 800bdfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be00:	2202      	movs	r2, #2
 800be02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be06:	2112      	movs	r1, #18
 800be08:	f7ff bf86 	b.w	800bd18 <std>
 800be0c:	20000bcc 	.word	0x20000bcc
 800be10:	20000a94 	.word	0x20000a94
 800be14:	0800bd85 	.word	0x0800bd85

0800be18 <__sfp_lock_acquire>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__sfp_lock_acquire+0x8>)
 800be1a:	f000 b912 	b.w	800c042 <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	20000bd5 	.word	0x20000bd5

0800be24 <__sfp_lock_release>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__sfp_lock_release+0x8>)
 800be26:	f000 b90d 	b.w	800c044 <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	20000bd5 	.word	0x20000bd5

0800be30 <__sinit>:
 800be30:	b510      	push	{r4, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	f7ff fff0 	bl	800be18 <__sfp_lock_acquire>
 800be38:	6a23      	ldr	r3, [r4, #32]
 800be3a:	b11b      	cbz	r3, 800be44 <__sinit+0x14>
 800be3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be40:	f7ff bff0 	b.w	800be24 <__sfp_lock_release>
 800be44:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <__sinit+0x28>)
 800be46:	6223      	str	r3, [r4, #32]
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <__sinit+0x2c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f5      	bne.n	800be3c <__sinit+0xc>
 800be50:	f7ff ffc4 	bl	800bddc <global_stdio_init.part.0>
 800be54:	e7f2      	b.n	800be3c <__sinit+0xc>
 800be56:	bf00      	nop
 800be58:	0800bd9d 	.word	0x0800bd9d
 800be5c:	20000bcc 	.word	0x20000bcc

0800be60 <_fwalk_sglue>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4607      	mov	r7, r0
 800be66:	4688      	mov	r8, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	2600      	movs	r6, #0
 800be6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be70:	f1b9 0901 	subs.w	r9, r9, #1
 800be74:	d505      	bpl.n	800be82 <_fwalk_sglue+0x22>
 800be76:	6824      	ldr	r4, [r4, #0]
 800be78:	2c00      	cmp	r4, #0
 800be7a:	d1f7      	bne.n	800be6c <_fwalk_sglue+0xc>
 800be7c:	4630      	mov	r0, r6
 800be7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d907      	bls.n	800be98 <_fwalk_sglue+0x38>
 800be88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8c:	3301      	adds	r3, #1
 800be8e:	d003      	beq.n	800be98 <_fwalk_sglue+0x38>
 800be90:	4629      	mov	r1, r5
 800be92:	4638      	mov	r0, r7
 800be94:	47c0      	blx	r8
 800be96:	4306      	orrs	r6, r0
 800be98:	3568      	adds	r5, #104	@ 0x68
 800be9a:	e7e9      	b.n	800be70 <_fwalk_sglue+0x10>

0800be9c <iprintf>:
 800be9c:	b40f      	push	{r0, r1, r2, r3}
 800be9e:	b507      	push	{r0, r1, r2, lr}
 800bea0:	4906      	ldr	r1, [pc, #24]	@ (800bebc <iprintf+0x20>)
 800bea2:	ab04      	add	r3, sp, #16
 800bea4:	6808      	ldr	r0, [r1, #0]
 800bea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beaa:	6881      	ldr	r1, [r0, #8]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	f001 fbf3 	bl	800d698 <_vfiprintf_r>
 800beb2:	b003      	add	sp, #12
 800beb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb8:	b004      	add	sp, #16
 800beba:	4770      	bx	lr
 800bebc:	20000030 	.word	0x20000030

0800bec0 <__sread>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	460c      	mov	r4, r1
 800bec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec8:	f000 f86c 	bl	800bfa4 <_read_r>
 800becc:	2800      	cmp	r0, #0
 800bece:	bfab      	itete	ge
 800bed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bed2:	89a3      	ldrhlt	r3, [r4, #12]
 800bed4:	181b      	addge	r3, r3, r0
 800bed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800beda:	bfac      	ite	ge
 800bedc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bede:	81a3      	strhlt	r3, [r4, #12]
 800bee0:	bd10      	pop	{r4, pc}

0800bee2 <__swrite>:
 800bee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee6:	461f      	mov	r7, r3
 800bee8:	898b      	ldrh	r3, [r1, #12]
 800beea:	05db      	lsls	r3, r3, #23
 800beec:	4605      	mov	r5, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	4616      	mov	r6, r2
 800bef2:	d505      	bpl.n	800bf00 <__swrite+0x1e>
 800bef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef8:	2302      	movs	r3, #2
 800befa:	2200      	movs	r2, #0
 800befc:	f000 f840 	bl	800bf80 <_lseek_r>
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf0a:	81a3      	strh	r3, [r4, #12]
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	463b      	mov	r3, r7
 800bf10:	4628      	mov	r0, r5
 800bf12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf16:	f000 b857 	b.w	800bfc8 <_write_r>

0800bf1a <__sseek>:
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf22:	f000 f82d 	bl	800bf80 <_lseek_r>
 800bf26:	1c43      	adds	r3, r0, #1
 800bf28:	89a3      	ldrh	r3, [r4, #12]
 800bf2a:	bf15      	itete	ne
 800bf2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf36:	81a3      	strheq	r3, [r4, #12]
 800bf38:	bf18      	it	ne
 800bf3a:	81a3      	strhne	r3, [r4, #12]
 800bf3c:	bd10      	pop	{r4, pc}

0800bf3e <__sclose>:
 800bf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf42:	f000 b80d 	b.w	800bf60 <_close_r>

0800bf46 <memset>:
 800bf46:	4402      	add	r2, r0
 800bf48:	4603      	mov	r3, r0
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d100      	bne.n	800bf50 <memset+0xa>
 800bf4e:	4770      	bx	lr
 800bf50:	f803 1b01 	strb.w	r1, [r3], #1
 800bf54:	e7f9      	b.n	800bf4a <memset+0x4>
	...

0800bf58 <_localeconv_r>:
 800bf58:	4800      	ldr	r0, [pc, #0]	@ (800bf5c <_localeconv_r+0x4>)
 800bf5a:	4770      	bx	lr
 800bf5c:	20000170 	.word	0x20000170

0800bf60 <_close_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d06      	ldr	r5, [pc, #24]	@ (800bf7c <_close_r+0x1c>)
 800bf64:	2300      	movs	r3, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	f7f7 fe94 	bl	8003c98 <_close>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_close_r+0x1a>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_close_r+0x1a>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	20000bd0 	.word	0x20000bd0

0800bf80 <_lseek_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	@ (800bfa0 <_lseek_r+0x20>)
 800bf84:	4604      	mov	r4, r0
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f7 fea9 	bl	8003ce6 <_lseek>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_lseek_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_lseek_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20000bd0 	.word	0x20000bd0

0800bfa4 <_read_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d07      	ldr	r5, [pc, #28]	@ (800bfc4 <_read_r+0x20>)
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	4608      	mov	r0, r1
 800bfac:	4611      	mov	r1, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	602a      	str	r2, [r5, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f7f7 fe37 	bl	8003c26 <_read>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_read_r+0x1e>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_read_r+0x1e>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20000bd0 	.word	0x20000bd0

0800bfc8 <_write_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d07      	ldr	r5, [pc, #28]	@ (800bfe8 <_write_r+0x20>)
 800bfcc:	4604      	mov	r4, r0
 800bfce:	4608      	mov	r0, r1
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	602a      	str	r2, [r5, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f7f7 fe42 	bl	8003c60 <_write>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_write_r+0x1e>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_write_r+0x1e>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	20000bd0 	.word	0x20000bd0

0800bfec <__errno>:
 800bfec:	4b01      	ldr	r3, [pc, #4]	@ (800bff4 <__errno+0x8>)
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20000030 	.word	0x20000030

0800bff8 <__libc_init_array>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	4d0d      	ldr	r5, [pc, #52]	@ (800c030 <__libc_init_array+0x38>)
 800bffc:	4c0d      	ldr	r4, [pc, #52]	@ (800c034 <__libc_init_array+0x3c>)
 800bffe:	1b64      	subs	r4, r4, r5
 800c000:	10a4      	asrs	r4, r4, #2
 800c002:	2600      	movs	r6, #0
 800c004:	42a6      	cmp	r6, r4
 800c006:	d109      	bne.n	800c01c <__libc_init_array+0x24>
 800c008:	4d0b      	ldr	r5, [pc, #44]	@ (800c038 <__libc_init_array+0x40>)
 800c00a:	4c0c      	ldr	r4, [pc, #48]	@ (800c03c <__libc_init_array+0x44>)
 800c00c:	f001 fec0 	bl	800dd90 <_init>
 800c010:	1b64      	subs	r4, r4, r5
 800c012:	10a4      	asrs	r4, r4, #2
 800c014:	2600      	movs	r6, #0
 800c016:	42a6      	cmp	r6, r4
 800c018:	d105      	bne.n	800c026 <__libc_init_array+0x2e>
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c020:	4798      	blx	r3
 800c022:	3601      	adds	r6, #1
 800c024:	e7ee      	b.n	800c004 <__libc_init_array+0xc>
 800c026:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02a:	4798      	blx	r3
 800c02c:	3601      	adds	r6, #1
 800c02e:	e7f2      	b.n	800c016 <__libc_init_array+0x1e>
 800c030:	0800e414 	.word	0x0800e414
 800c034:	0800e414 	.word	0x0800e414
 800c038:	0800e414 	.word	0x0800e414
 800c03c:	0800e418 	.word	0x0800e418

0800c040 <__retarget_lock_init_recursive>:
 800c040:	4770      	bx	lr

0800c042 <__retarget_lock_acquire_recursive>:
 800c042:	4770      	bx	lr

0800c044 <__retarget_lock_release_recursive>:
 800c044:	4770      	bx	lr

0800c046 <memcpy>:
 800c046:	440a      	add	r2, r1
 800c048:	4291      	cmp	r1, r2
 800c04a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c04e:	d100      	bne.n	800c052 <memcpy+0xc>
 800c050:	4770      	bx	lr
 800c052:	b510      	push	{r4, lr}
 800c054:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05c:	4291      	cmp	r1, r2
 800c05e:	d1f9      	bne.n	800c054 <memcpy+0xe>
 800c060:	bd10      	pop	{r4, pc}
	...

0800c064 <__assert_func>:
 800c064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c066:	4614      	mov	r4, r2
 800c068:	461a      	mov	r2, r3
 800c06a:	4b09      	ldr	r3, [pc, #36]	@ (800c090 <__assert_func+0x2c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4605      	mov	r5, r0
 800c070:	68d8      	ldr	r0, [r3, #12]
 800c072:	b14c      	cbz	r4, 800c088 <__assert_func+0x24>
 800c074:	4b07      	ldr	r3, [pc, #28]	@ (800c094 <__assert_func+0x30>)
 800c076:	9100      	str	r1, [sp, #0]
 800c078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c07c:	4906      	ldr	r1, [pc, #24]	@ (800c098 <__assert_func+0x34>)
 800c07e:	462b      	mov	r3, r5
 800c080:	f001 fcce 	bl	800da20 <fiprintf>
 800c084:	f001 fd82 	bl	800db8c <abort>
 800c088:	4b04      	ldr	r3, [pc, #16]	@ (800c09c <__assert_func+0x38>)
 800c08a:	461c      	mov	r4, r3
 800c08c:	e7f3      	b.n	800c076 <__assert_func+0x12>
 800c08e:	bf00      	nop
 800c090:	20000030 	.word	0x20000030
 800c094:	0800e0e3 	.word	0x0800e0e3
 800c098:	0800e0f0 	.word	0x0800e0f0
 800c09c:	0800e11e 	.word	0x0800e11e

0800c0a0 <quorem>:
 800c0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	6903      	ldr	r3, [r0, #16]
 800c0a6:	690c      	ldr	r4, [r1, #16]
 800c0a8:	42a3      	cmp	r3, r4
 800c0aa:	4607      	mov	r7, r0
 800c0ac:	db7e      	blt.n	800c1ac <quorem+0x10c>
 800c0ae:	3c01      	subs	r4, #1
 800c0b0:	f101 0814 	add.w	r8, r1, #20
 800c0b4:	00a3      	lsls	r3, r4, #2
 800c0b6:	f100 0514 	add.w	r5, r0, #20
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0d6:	d32e      	bcc.n	800c136 <quorem+0x96>
 800c0d8:	f04f 0a00 	mov.w	sl, #0
 800c0dc:	46c4      	mov	ip, r8
 800c0de:	46ae      	mov	lr, r5
 800c0e0:	46d3      	mov	fp, sl
 800c0e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0e6:	b298      	uxth	r0, r3
 800c0e8:	fb06 a000 	mla	r0, r6, r0, sl
 800c0ec:	0c02      	lsrs	r2, r0, #16
 800c0ee:	0c1b      	lsrs	r3, r3, #16
 800c0f0:	fb06 2303 	mla	r3, r6, r3, r2
 800c0f4:	f8de 2000 	ldr.w	r2, [lr]
 800c0f8:	b280      	uxth	r0, r0
 800c0fa:	b292      	uxth	r2, r2
 800c0fc:	1a12      	subs	r2, r2, r0
 800c0fe:	445a      	add	r2, fp
 800c100:	f8de 0000 	ldr.w	r0, [lr]
 800c104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c108:	b29b      	uxth	r3, r3
 800c10a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c10e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c112:	b292      	uxth	r2, r2
 800c114:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c118:	45e1      	cmp	r9, ip
 800c11a:	f84e 2b04 	str.w	r2, [lr], #4
 800c11e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c122:	d2de      	bcs.n	800c0e2 <quorem+0x42>
 800c124:	9b00      	ldr	r3, [sp, #0]
 800c126:	58eb      	ldr	r3, [r5, r3]
 800c128:	b92b      	cbnz	r3, 800c136 <quorem+0x96>
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	3b04      	subs	r3, #4
 800c12e:	429d      	cmp	r5, r3
 800c130:	461a      	mov	r2, r3
 800c132:	d32f      	bcc.n	800c194 <quorem+0xf4>
 800c134:	613c      	str	r4, [r7, #16]
 800c136:	4638      	mov	r0, r7
 800c138:	f001 f97c 	bl	800d434 <__mcmp>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	db25      	blt.n	800c18c <quorem+0xec>
 800c140:	4629      	mov	r1, r5
 800c142:	2000      	movs	r0, #0
 800c144:	f858 2b04 	ldr.w	r2, [r8], #4
 800c148:	f8d1 c000 	ldr.w	ip, [r1]
 800c14c:	fa1f fe82 	uxth.w	lr, r2
 800c150:	fa1f f38c 	uxth.w	r3, ip
 800c154:	eba3 030e 	sub.w	r3, r3, lr
 800c158:	4403      	add	r3, r0
 800c15a:	0c12      	lsrs	r2, r2, #16
 800c15c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c160:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c164:	b29b      	uxth	r3, r3
 800c166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c16a:	45c1      	cmp	r9, r8
 800c16c:	f841 3b04 	str.w	r3, [r1], #4
 800c170:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c174:	d2e6      	bcs.n	800c144 <quorem+0xa4>
 800c176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c17e:	b922      	cbnz	r2, 800c18a <quorem+0xea>
 800c180:	3b04      	subs	r3, #4
 800c182:	429d      	cmp	r5, r3
 800c184:	461a      	mov	r2, r3
 800c186:	d30b      	bcc.n	800c1a0 <quorem+0x100>
 800c188:	613c      	str	r4, [r7, #16]
 800c18a:	3601      	adds	r6, #1
 800c18c:	4630      	mov	r0, r6
 800c18e:	b003      	add	sp, #12
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	6812      	ldr	r2, [r2, #0]
 800c196:	3b04      	subs	r3, #4
 800c198:	2a00      	cmp	r2, #0
 800c19a:	d1cb      	bne.n	800c134 <quorem+0x94>
 800c19c:	3c01      	subs	r4, #1
 800c19e:	e7c6      	b.n	800c12e <quorem+0x8e>
 800c1a0:	6812      	ldr	r2, [r2, #0]
 800c1a2:	3b04      	subs	r3, #4
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	d1ef      	bne.n	800c188 <quorem+0xe8>
 800c1a8:	3c01      	subs	r4, #1
 800c1aa:	e7ea      	b.n	800c182 <quorem+0xe2>
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	e7ee      	b.n	800c18e <quorem+0xee>

0800c1b0 <_dtoa_r>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	69c7      	ldr	r7, [r0, #28]
 800c1b6:	b097      	sub	sp, #92	@ 0x5c
 800c1b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c1bc:	ec55 4b10 	vmov	r4, r5, d0
 800c1c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c1c2:	9107      	str	r1, [sp, #28]
 800c1c4:	4681      	mov	r9, r0
 800c1c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c1c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1ca:	b97f      	cbnz	r7, 800c1ec <_dtoa_r+0x3c>
 800c1cc:	2010      	movs	r0, #16
 800c1ce:	f000 fe09 	bl	800cde4 <malloc>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c1d8:	b920      	cbnz	r0, 800c1e4 <_dtoa_r+0x34>
 800c1da:	4ba9      	ldr	r3, [pc, #676]	@ (800c480 <_dtoa_r+0x2d0>)
 800c1dc:	21ef      	movs	r1, #239	@ 0xef
 800c1de:	48a9      	ldr	r0, [pc, #676]	@ (800c484 <_dtoa_r+0x2d4>)
 800c1e0:	f7ff ff40 	bl	800c064 <__assert_func>
 800c1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1e8:	6007      	str	r7, [r0, #0]
 800c1ea:	60c7      	str	r7, [r0, #12]
 800c1ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1f0:	6819      	ldr	r1, [r3, #0]
 800c1f2:	b159      	cbz	r1, 800c20c <_dtoa_r+0x5c>
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	604a      	str	r2, [r1, #4]
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	4093      	lsls	r3, r2
 800c1fc:	608b      	str	r3, [r1, #8]
 800c1fe:	4648      	mov	r0, r9
 800c200:	f000 fee6 	bl	800cfd0 <_Bfree>
 800c204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	1e2b      	subs	r3, r5, #0
 800c20e:	bfb9      	ittee	lt
 800c210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c214:	9305      	strlt	r3, [sp, #20]
 800c216:	2300      	movge	r3, #0
 800c218:	6033      	strge	r3, [r6, #0]
 800c21a:	9f05      	ldr	r7, [sp, #20]
 800c21c:	4b9a      	ldr	r3, [pc, #616]	@ (800c488 <_dtoa_r+0x2d8>)
 800c21e:	bfbc      	itt	lt
 800c220:	2201      	movlt	r2, #1
 800c222:	6032      	strlt	r2, [r6, #0]
 800c224:	43bb      	bics	r3, r7
 800c226:	d112      	bne.n	800c24e <_dtoa_r+0x9e>
 800c228:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c234:	4323      	orrs	r3, r4
 800c236:	f000 855a 	beq.w	800ccee <_dtoa_r+0xb3e>
 800c23a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c23c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c49c <_dtoa_r+0x2ec>
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 855c 	beq.w	800ccfe <_dtoa_r+0xb4e>
 800c246:	f10a 0303 	add.w	r3, sl, #3
 800c24a:	f000 bd56 	b.w	800ccfa <_dtoa_r+0xb4a>
 800c24e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c252:	2200      	movs	r2, #0
 800c254:	ec51 0b17 	vmov	r0, r1, d7
 800c258:	2300      	movs	r3, #0
 800c25a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c25e:	f7f4 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c262:	4680      	mov	r8, r0
 800c264:	b158      	cbz	r0, 800c27e <_dtoa_r+0xce>
 800c266:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c268:	2301      	movs	r3, #1
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c26e:	b113      	cbz	r3, 800c276 <_dtoa_r+0xc6>
 800c270:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c272:	4b86      	ldr	r3, [pc, #536]	@ (800c48c <_dtoa_r+0x2dc>)
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c4a0 <_dtoa_r+0x2f0>
 800c27a:	f000 bd40 	b.w	800ccfe <_dtoa_r+0xb4e>
 800c27e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c282:	aa14      	add	r2, sp, #80	@ 0x50
 800c284:	a915      	add	r1, sp, #84	@ 0x54
 800c286:	4648      	mov	r0, r9
 800c288:	f001 f984 	bl	800d594 <__d2b>
 800c28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c290:	9002      	str	r0, [sp, #8]
 800c292:	2e00      	cmp	r6, #0
 800c294:	d078      	beq.n	800c388 <_dtoa_r+0x1d8>
 800c296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c298:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4b76      	ldr	r3, [pc, #472]	@ (800c490 <_dtoa_r+0x2e0>)
 800c2b6:	f7f3 ffe7 	bl	8000288 <__aeabi_dsub>
 800c2ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800c468 <_dtoa_r+0x2b8>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c470 <_dtoa_r+0x2c0>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f3 ffdf 	bl	800028c <__adddf3>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	f7f4 f926 	bl	8000524 <__aeabi_i2d>
 800c2d8:	a367      	add	r3, pc, #412	@ (adr r3, 800c478 <_dtoa_r+0x2c8>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f3 ffcf 	bl	800028c <__adddf3>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	f7f4 fc31 	bl	8000b58 <__aeabi_d2iz>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f4 fbec 	bl	8000adc <__aeabi_dcmplt>
 800c304:	b140      	cbz	r0, 800c318 <_dtoa_r+0x168>
 800c306:	4638      	mov	r0, r7
 800c308:	f7f4 f90c 	bl	8000524 <__aeabi_i2d>
 800c30c:	4622      	mov	r2, r4
 800c30e:	462b      	mov	r3, r5
 800c310:	f7f4 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800c314:	b900      	cbnz	r0, 800c318 <_dtoa_r+0x168>
 800c316:	3f01      	subs	r7, #1
 800c318:	2f16      	cmp	r7, #22
 800c31a:	d852      	bhi.n	800c3c2 <_dtoa_r+0x212>
 800c31c:	4b5d      	ldr	r3, [pc, #372]	@ (800c494 <_dtoa_r+0x2e4>)
 800c31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c32a:	f7f4 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d049      	beq.n	800c3c6 <_dtoa_r+0x216>
 800c332:	3f01      	subs	r7, #1
 800c334:	2300      	movs	r3, #0
 800c336:	9310      	str	r3, [sp, #64]	@ 0x40
 800c338:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c33a:	1b9b      	subs	r3, r3, r6
 800c33c:	1e5a      	subs	r2, r3, #1
 800c33e:	bf45      	ittet	mi
 800c340:	f1c3 0301 	rsbmi	r3, r3, #1
 800c344:	9300      	strmi	r3, [sp, #0]
 800c346:	2300      	movpl	r3, #0
 800c348:	2300      	movmi	r3, #0
 800c34a:	9206      	str	r2, [sp, #24]
 800c34c:	bf54      	ite	pl
 800c34e:	9300      	strpl	r3, [sp, #0]
 800c350:	9306      	strmi	r3, [sp, #24]
 800c352:	2f00      	cmp	r7, #0
 800c354:	db39      	blt.n	800c3ca <_dtoa_r+0x21a>
 800c356:	9b06      	ldr	r3, [sp, #24]
 800c358:	970d      	str	r7, [sp, #52]	@ 0x34
 800c35a:	443b      	add	r3, r7
 800c35c:	9306      	str	r3, [sp, #24]
 800c35e:	2300      	movs	r3, #0
 800c360:	9308      	str	r3, [sp, #32]
 800c362:	9b07      	ldr	r3, [sp, #28]
 800c364:	2b09      	cmp	r3, #9
 800c366:	d863      	bhi.n	800c430 <_dtoa_r+0x280>
 800c368:	2b05      	cmp	r3, #5
 800c36a:	bfc4      	itt	gt
 800c36c:	3b04      	subgt	r3, #4
 800c36e:	9307      	strgt	r3, [sp, #28]
 800c370:	9b07      	ldr	r3, [sp, #28]
 800c372:	f1a3 0302 	sub.w	r3, r3, #2
 800c376:	bfcc      	ite	gt
 800c378:	2400      	movgt	r4, #0
 800c37a:	2401      	movle	r4, #1
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d863      	bhi.n	800c448 <_dtoa_r+0x298>
 800c380:	e8df f003 	tbb	[pc, r3]
 800c384:	2b375452 	.word	0x2b375452
 800c388:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c38c:	441e      	add	r6, r3
 800c38e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c392:	2b20      	cmp	r3, #32
 800c394:	bfc1      	itttt	gt
 800c396:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c39a:	409f      	lslgt	r7, r3
 800c39c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c3a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c3a4:	bfd6      	itet	le
 800c3a6:	f1c3 0320 	rsble	r3, r3, #32
 800c3aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800c3ae:	fa04 f003 	lslle.w	r0, r4, r3
 800c3b2:	f7f4 f8a7 	bl	8000504 <__aeabi_ui2d>
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c3bc:	3e01      	subs	r6, #1
 800c3be:	9212      	str	r2, [sp, #72]	@ 0x48
 800c3c0:	e776      	b.n	800c2b0 <_dtoa_r+0x100>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e7b7      	b.n	800c336 <_dtoa_r+0x186>
 800c3c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c3c8:	e7b6      	b.n	800c338 <_dtoa_r+0x188>
 800c3ca:	9b00      	ldr	r3, [sp, #0]
 800c3cc:	1bdb      	subs	r3, r3, r7
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	427b      	negs	r3, r7
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3d8:	e7c3      	b.n	800c362 <_dtoa_r+0x1b2>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3e0:	eb07 0b03 	add.w	fp, r7, r3
 800c3e4:	f10b 0301 	add.w	r3, fp, #1
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	9303      	str	r3, [sp, #12]
 800c3ec:	bfb8      	it	lt
 800c3ee:	2301      	movlt	r3, #1
 800c3f0:	e006      	b.n	800c400 <_dtoa_r+0x250>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dd28      	ble.n	800c44e <_dtoa_r+0x29e>
 800c3fc:	469b      	mov	fp, r3
 800c3fe:	9303      	str	r3, [sp, #12]
 800c400:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c404:	2100      	movs	r1, #0
 800c406:	2204      	movs	r2, #4
 800c408:	f102 0514 	add.w	r5, r2, #20
 800c40c:	429d      	cmp	r5, r3
 800c40e:	d926      	bls.n	800c45e <_dtoa_r+0x2ae>
 800c410:	6041      	str	r1, [r0, #4]
 800c412:	4648      	mov	r0, r9
 800c414:	f000 fd9c 	bl	800cf50 <_Balloc>
 800c418:	4682      	mov	sl, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d142      	bne.n	800c4a4 <_dtoa_r+0x2f4>
 800c41e:	4b1e      	ldr	r3, [pc, #120]	@ (800c498 <_dtoa_r+0x2e8>)
 800c420:	4602      	mov	r2, r0
 800c422:	f240 11af 	movw	r1, #431	@ 0x1af
 800c426:	e6da      	b.n	800c1de <_dtoa_r+0x2e>
 800c428:	2300      	movs	r3, #0
 800c42a:	e7e3      	b.n	800c3f4 <_dtoa_r+0x244>
 800c42c:	2300      	movs	r3, #0
 800c42e:	e7d5      	b.n	800c3dc <_dtoa_r+0x22c>
 800c430:	2401      	movs	r4, #1
 800c432:	2300      	movs	r3, #0
 800c434:	9307      	str	r3, [sp, #28]
 800c436:	9409      	str	r4, [sp, #36]	@ 0x24
 800c438:	f04f 3bff 	mov.w	fp, #4294967295
 800c43c:	2200      	movs	r2, #0
 800c43e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c442:	2312      	movs	r3, #18
 800c444:	920c      	str	r2, [sp, #48]	@ 0x30
 800c446:	e7db      	b.n	800c400 <_dtoa_r+0x250>
 800c448:	2301      	movs	r3, #1
 800c44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c44c:	e7f4      	b.n	800c438 <_dtoa_r+0x288>
 800c44e:	f04f 0b01 	mov.w	fp, #1
 800c452:	f8cd b00c 	str.w	fp, [sp, #12]
 800c456:	465b      	mov	r3, fp
 800c458:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c45c:	e7d0      	b.n	800c400 <_dtoa_r+0x250>
 800c45e:	3101      	adds	r1, #1
 800c460:	0052      	lsls	r2, r2, #1
 800c462:	e7d1      	b.n	800c408 <_dtoa_r+0x258>
 800c464:	f3af 8000 	nop.w
 800c468:	636f4361 	.word	0x636f4361
 800c46c:	3fd287a7 	.word	0x3fd287a7
 800c470:	8b60c8b3 	.word	0x8b60c8b3
 800c474:	3fc68a28 	.word	0x3fc68a28
 800c478:	509f79fb 	.word	0x509f79fb
 800c47c:	3fd34413 	.word	0x3fd34413
 800c480:	0800e040 	.word	0x0800e040
 800c484:	0800e12c 	.word	0x0800e12c
 800c488:	7ff00000 	.word	0x7ff00000
 800c48c:	0800e0c0 	.word	0x0800e0c0
 800c490:	3ff80000 	.word	0x3ff80000
 800c494:	0800e240 	.word	0x0800e240
 800c498:	0800e184 	.word	0x0800e184
 800c49c:	0800e128 	.word	0x0800e128
 800c4a0:	0800e0bf 	.word	0x0800e0bf
 800c4a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c4a8:	6018      	str	r0, [r3, #0]
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	2b0e      	cmp	r3, #14
 800c4ae:	f200 80a1 	bhi.w	800c5f4 <_dtoa_r+0x444>
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	f000 809e 	beq.w	800c5f4 <_dtoa_r+0x444>
 800c4b8:	2f00      	cmp	r7, #0
 800c4ba:	dd33      	ble.n	800c524 <_dtoa_r+0x374>
 800c4bc:	4b9c      	ldr	r3, [pc, #624]	@ (800c730 <_dtoa_r+0x580>)
 800c4be:	f007 020f 	and.w	r2, r7, #15
 800c4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c6:	ed93 7b00 	vldr	d7, [r3]
 800c4ca:	05f8      	lsls	r0, r7, #23
 800c4cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c4d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c4d4:	d516      	bpl.n	800c504 <_dtoa_r+0x354>
 800c4d6:	4b97      	ldr	r3, [pc, #604]	@ (800c734 <_dtoa_r+0x584>)
 800c4d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4e0:	f7f4 f9b4 	bl	800084c <__aeabi_ddiv>
 800c4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4e8:	f004 040f 	and.w	r4, r4, #15
 800c4ec:	2603      	movs	r6, #3
 800c4ee:	4d91      	ldr	r5, [pc, #580]	@ (800c734 <_dtoa_r+0x584>)
 800c4f0:	b954      	cbnz	r4, 800c508 <_dtoa_r+0x358>
 800c4f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4fa:	f7f4 f9a7 	bl	800084c <__aeabi_ddiv>
 800c4fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c502:	e028      	b.n	800c556 <_dtoa_r+0x3a6>
 800c504:	2602      	movs	r6, #2
 800c506:	e7f2      	b.n	800c4ee <_dtoa_r+0x33e>
 800c508:	07e1      	lsls	r1, r4, #31
 800c50a:	d508      	bpl.n	800c51e <_dtoa_r+0x36e>
 800c50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c510:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c514:	f7f4 f870 	bl	80005f8 <__aeabi_dmul>
 800c518:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c51c:	3601      	adds	r6, #1
 800c51e:	1064      	asrs	r4, r4, #1
 800c520:	3508      	adds	r5, #8
 800c522:	e7e5      	b.n	800c4f0 <_dtoa_r+0x340>
 800c524:	f000 80af 	beq.w	800c686 <_dtoa_r+0x4d6>
 800c528:	427c      	negs	r4, r7
 800c52a:	4b81      	ldr	r3, [pc, #516]	@ (800c730 <_dtoa_r+0x580>)
 800c52c:	4d81      	ldr	r5, [pc, #516]	@ (800c734 <_dtoa_r+0x584>)
 800c52e:	f004 020f 	and.w	r2, r4, #15
 800c532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c53e:	f7f4 f85b 	bl	80005f8 <__aeabi_dmul>
 800c542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c546:	1124      	asrs	r4, r4, #4
 800c548:	2300      	movs	r3, #0
 800c54a:	2602      	movs	r6, #2
 800c54c:	2c00      	cmp	r4, #0
 800c54e:	f040 808f 	bne.w	800c670 <_dtoa_r+0x4c0>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1d3      	bne.n	800c4fe <_dtoa_r+0x34e>
 800c556:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c558:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 8094 	beq.w	800c68a <_dtoa_r+0x4da>
 800c562:	4b75      	ldr	r3, [pc, #468]	@ (800c738 <_dtoa_r+0x588>)
 800c564:	2200      	movs	r2, #0
 800c566:	4620      	mov	r0, r4
 800c568:	4629      	mov	r1, r5
 800c56a:	f7f4 fab7 	bl	8000adc <__aeabi_dcmplt>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f000 808b 	beq.w	800c68a <_dtoa_r+0x4da>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 8087 	beq.w	800c68a <_dtoa_r+0x4da>
 800c57c:	f1bb 0f00 	cmp.w	fp, #0
 800c580:	dd34      	ble.n	800c5ec <_dtoa_r+0x43c>
 800c582:	4620      	mov	r0, r4
 800c584:	4b6d      	ldr	r3, [pc, #436]	@ (800c73c <_dtoa_r+0x58c>)
 800c586:	2200      	movs	r2, #0
 800c588:	4629      	mov	r1, r5
 800c58a:	f7f4 f835 	bl	80005f8 <__aeabi_dmul>
 800c58e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c592:	f107 38ff 	add.w	r8, r7, #4294967295
 800c596:	3601      	adds	r6, #1
 800c598:	465c      	mov	r4, fp
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7f3 ffc2 	bl	8000524 <__aeabi_i2d>
 800c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a4:	f7f4 f828 	bl	80005f8 <__aeabi_dmul>
 800c5a8:	4b65      	ldr	r3, [pc, #404]	@ (800c740 <_dtoa_r+0x590>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f7f3 fe6e 	bl	800028c <__adddf3>
 800c5b0:	4605      	mov	r5, r0
 800c5b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c5b6:	2c00      	cmp	r4, #0
 800c5b8:	d16a      	bne.n	800c690 <_dtoa_r+0x4e0>
 800c5ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5be:	4b61      	ldr	r3, [pc, #388]	@ (800c744 <_dtoa_r+0x594>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f7f3 fe61 	bl	8000288 <__aeabi_dsub>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4633      	mov	r3, r6
 800c5d2:	f7f4 faa1 	bl	8000b18 <__aeabi_dcmpgt>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f040 8298 	bne.w	800cb0c <_dtoa_r+0x95c>
 800c5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c5e6:	f7f4 fa79 	bl	8000adc <__aeabi_dcmplt>
 800c5ea:	bb38      	cbnz	r0, 800c63c <_dtoa_r+0x48c>
 800c5ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c5f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c5f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f2c0 8157 	blt.w	800c8aa <_dtoa_r+0x6fa>
 800c5fc:	2f0e      	cmp	r7, #14
 800c5fe:	f300 8154 	bgt.w	800c8aa <_dtoa_r+0x6fa>
 800c602:	4b4b      	ldr	r3, [pc, #300]	@ (800c730 <_dtoa_r+0x580>)
 800c604:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c608:	ed93 7b00 	vldr	d7, [r3]
 800c60c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c60e:	2b00      	cmp	r3, #0
 800c610:	ed8d 7b00 	vstr	d7, [sp]
 800c614:	f280 80e5 	bge.w	800c7e2 <_dtoa_r+0x632>
 800c618:	9b03      	ldr	r3, [sp, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f300 80e1 	bgt.w	800c7e2 <_dtoa_r+0x632>
 800c620:	d10c      	bne.n	800c63c <_dtoa_r+0x48c>
 800c622:	4b48      	ldr	r3, [pc, #288]	@ (800c744 <_dtoa_r+0x594>)
 800c624:	2200      	movs	r2, #0
 800c626:	ec51 0b17 	vmov	r0, r1, d7
 800c62a:	f7f3 ffe5 	bl	80005f8 <__aeabi_dmul>
 800c62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c632:	f7f4 fa67 	bl	8000b04 <__aeabi_dcmpge>
 800c636:	2800      	cmp	r0, #0
 800c638:	f000 8266 	beq.w	800cb08 <_dtoa_r+0x958>
 800c63c:	2400      	movs	r4, #0
 800c63e:	4625      	mov	r5, r4
 800c640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c642:	4656      	mov	r6, sl
 800c644:	ea6f 0803 	mvn.w	r8, r3
 800c648:	2700      	movs	r7, #0
 800c64a:	4621      	mov	r1, r4
 800c64c:	4648      	mov	r0, r9
 800c64e:	f000 fcbf 	bl	800cfd0 <_Bfree>
 800c652:	2d00      	cmp	r5, #0
 800c654:	f000 80bd 	beq.w	800c7d2 <_dtoa_r+0x622>
 800c658:	b12f      	cbz	r7, 800c666 <_dtoa_r+0x4b6>
 800c65a:	42af      	cmp	r7, r5
 800c65c:	d003      	beq.n	800c666 <_dtoa_r+0x4b6>
 800c65e:	4639      	mov	r1, r7
 800c660:	4648      	mov	r0, r9
 800c662:	f000 fcb5 	bl	800cfd0 <_Bfree>
 800c666:	4629      	mov	r1, r5
 800c668:	4648      	mov	r0, r9
 800c66a:	f000 fcb1 	bl	800cfd0 <_Bfree>
 800c66e:	e0b0      	b.n	800c7d2 <_dtoa_r+0x622>
 800c670:	07e2      	lsls	r2, r4, #31
 800c672:	d505      	bpl.n	800c680 <_dtoa_r+0x4d0>
 800c674:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	3601      	adds	r6, #1
 800c67e:	2301      	movs	r3, #1
 800c680:	1064      	asrs	r4, r4, #1
 800c682:	3508      	adds	r5, #8
 800c684:	e762      	b.n	800c54c <_dtoa_r+0x39c>
 800c686:	2602      	movs	r6, #2
 800c688:	e765      	b.n	800c556 <_dtoa_r+0x3a6>
 800c68a:	9c03      	ldr	r4, [sp, #12]
 800c68c:	46b8      	mov	r8, r7
 800c68e:	e784      	b.n	800c59a <_dtoa_r+0x3ea>
 800c690:	4b27      	ldr	r3, [pc, #156]	@ (800c730 <_dtoa_r+0x580>)
 800c692:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c69c:	4454      	add	r4, sl
 800c69e:	2900      	cmp	r1, #0
 800c6a0:	d054      	beq.n	800c74c <_dtoa_r+0x59c>
 800c6a2:	4929      	ldr	r1, [pc, #164]	@ (800c748 <_dtoa_r+0x598>)
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	f7f4 f8d1 	bl	800084c <__aeabi_ddiv>
 800c6aa:	4633      	mov	r3, r6
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	f7f3 fdeb 	bl	8000288 <__aeabi_dsub>
 800c6b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6b6:	4656      	mov	r6, sl
 800c6b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6bc:	f7f4 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	f7f3 ff2f 	bl	8000524 <__aeabi_i2d>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6ce:	f7f3 fddb 	bl	8000288 <__aeabi_dsub>
 800c6d2:	3530      	adds	r5, #48	@ 0x30
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6dc:	f806 5b01 	strb.w	r5, [r6], #1
 800c6e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6e4:	f7f4 f9fa 	bl	8000adc <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d172      	bne.n	800c7d2 <_dtoa_r+0x622>
 800c6ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6f0:	4911      	ldr	r1, [pc, #68]	@ (800c738 <_dtoa_r+0x588>)
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f7f3 fdc8 	bl	8000288 <__aeabi_dsub>
 800c6f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6fc:	f7f4 f9ee 	bl	8000adc <__aeabi_dcmplt>
 800c700:	2800      	cmp	r0, #0
 800c702:	f040 80b4 	bne.w	800c86e <_dtoa_r+0x6be>
 800c706:	42a6      	cmp	r6, r4
 800c708:	f43f af70 	beq.w	800c5ec <_dtoa_r+0x43c>
 800c70c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c710:	4b0a      	ldr	r3, [pc, #40]	@ (800c73c <_dtoa_r+0x58c>)
 800c712:	2200      	movs	r2, #0
 800c714:	f7f3 ff70 	bl	80005f8 <__aeabi_dmul>
 800c718:	4b08      	ldr	r3, [pc, #32]	@ (800c73c <_dtoa_r+0x58c>)
 800c71a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c71e:	2200      	movs	r2, #0
 800c720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c724:	f7f3 ff68 	bl	80005f8 <__aeabi_dmul>
 800c728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c72c:	e7c4      	b.n	800c6b8 <_dtoa_r+0x508>
 800c72e:	bf00      	nop
 800c730:	0800e240 	.word	0x0800e240
 800c734:	0800e218 	.word	0x0800e218
 800c738:	3ff00000 	.word	0x3ff00000
 800c73c:	40240000 	.word	0x40240000
 800c740:	401c0000 	.word	0x401c0000
 800c744:	40140000 	.word	0x40140000
 800c748:	3fe00000 	.word	0x3fe00000
 800c74c:	4631      	mov	r1, r6
 800c74e:	4628      	mov	r0, r5
 800c750:	f7f3 ff52 	bl	80005f8 <__aeabi_dmul>
 800c754:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c758:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c75a:	4656      	mov	r6, sl
 800c75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c760:	f7f4 f9fa 	bl	8000b58 <__aeabi_d2iz>
 800c764:	4605      	mov	r5, r0
 800c766:	f7f3 fedd 	bl	8000524 <__aeabi_i2d>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c772:	f7f3 fd89 	bl	8000288 <__aeabi_dsub>
 800c776:	3530      	adds	r5, #48	@ 0x30
 800c778:	f806 5b01 	strb.w	r5, [r6], #1
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	42a6      	cmp	r6, r4
 800c782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c786:	f04f 0200 	mov.w	r2, #0
 800c78a:	d124      	bne.n	800c7d6 <_dtoa_r+0x626>
 800c78c:	4baf      	ldr	r3, [pc, #700]	@ (800ca4c <_dtoa_r+0x89c>)
 800c78e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c792:	f7f3 fd7b 	bl	800028c <__adddf3>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c79e:	f7f4 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d163      	bne.n	800c86e <_dtoa_r+0x6be>
 800c7a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7aa:	49a8      	ldr	r1, [pc, #672]	@ (800ca4c <_dtoa_r+0x89c>)
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7ba:	f7f4 f98f 	bl	8000adc <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f43f af14 	beq.w	800c5ec <_dtoa_r+0x43c>
 800c7c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c7c6:	1e73      	subs	r3, r6, #1
 800c7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7ce:	2b30      	cmp	r3, #48	@ 0x30
 800c7d0:	d0f8      	beq.n	800c7c4 <_dtoa_r+0x614>
 800c7d2:	4647      	mov	r7, r8
 800c7d4:	e03b      	b.n	800c84e <_dtoa_r+0x69e>
 800c7d6:	4b9e      	ldr	r3, [pc, #632]	@ (800ca50 <_dtoa_r+0x8a0>)
 800c7d8:	f7f3 ff0e 	bl	80005f8 <__aeabi_dmul>
 800c7dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7e0:	e7bc      	b.n	800c75c <_dtoa_r+0x5ac>
 800c7e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c7e6:	4656      	mov	r6, sl
 800c7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f4 f82c 	bl	800084c <__aeabi_ddiv>
 800c7f4:	f7f4 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	f7f3 fe93 	bl	8000524 <__aeabi_i2d>
 800c7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c802:	f7f3 fef9 	bl	80005f8 <__aeabi_dmul>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4620      	mov	r0, r4
 800c80c:	4629      	mov	r1, r5
 800c80e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c812:	f7f3 fd39 	bl	8000288 <__aeabi_dsub>
 800c816:	f806 4b01 	strb.w	r4, [r6], #1
 800c81a:	9d03      	ldr	r5, [sp, #12]
 800c81c:	eba6 040a 	sub.w	r4, r6, sl
 800c820:	42a5      	cmp	r5, r4
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	d133      	bne.n	800c890 <_dtoa_r+0x6e0>
 800c828:	f7f3 fd30 	bl	800028c <__adddf3>
 800c82c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c830:	4604      	mov	r4, r0
 800c832:	460d      	mov	r5, r1
 800c834:	f7f4 f970 	bl	8000b18 <__aeabi_dcmpgt>
 800c838:	b9c0      	cbnz	r0, 800c86c <_dtoa_r+0x6bc>
 800c83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c83e:	4620      	mov	r0, r4
 800c840:	4629      	mov	r1, r5
 800c842:	f7f4 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800c846:	b110      	cbz	r0, 800c84e <_dtoa_r+0x69e>
 800c848:	f018 0f01 	tst.w	r8, #1
 800c84c:	d10e      	bne.n	800c86c <_dtoa_r+0x6bc>
 800c84e:	9902      	ldr	r1, [sp, #8]
 800c850:	4648      	mov	r0, r9
 800c852:	f000 fbbd 	bl	800cfd0 <_Bfree>
 800c856:	2300      	movs	r3, #0
 800c858:	7033      	strb	r3, [r6, #0]
 800c85a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c85c:	3701      	adds	r7, #1
 800c85e:	601f      	str	r7, [r3, #0]
 800c860:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 824b 	beq.w	800ccfe <_dtoa_r+0xb4e>
 800c868:	601e      	str	r6, [r3, #0]
 800c86a:	e248      	b.n	800ccfe <_dtoa_r+0xb4e>
 800c86c:	46b8      	mov	r8, r7
 800c86e:	4633      	mov	r3, r6
 800c870:	461e      	mov	r6, r3
 800c872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c876:	2a39      	cmp	r2, #57	@ 0x39
 800c878:	d106      	bne.n	800c888 <_dtoa_r+0x6d8>
 800c87a:	459a      	cmp	sl, r3
 800c87c:	d1f8      	bne.n	800c870 <_dtoa_r+0x6c0>
 800c87e:	2230      	movs	r2, #48	@ 0x30
 800c880:	f108 0801 	add.w	r8, r8, #1
 800c884:	f88a 2000 	strb.w	r2, [sl]
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	3201      	adds	r2, #1
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	e7a0      	b.n	800c7d2 <_dtoa_r+0x622>
 800c890:	4b6f      	ldr	r3, [pc, #444]	@ (800ca50 <_dtoa_r+0x8a0>)
 800c892:	2200      	movs	r2, #0
 800c894:	f7f3 feb0 	bl	80005f8 <__aeabi_dmul>
 800c898:	2200      	movs	r2, #0
 800c89a:	2300      	movs	r3, #0
 800c89c:	4604      	mov	r4, r0
 800c89e:	460d      	mov	r5, r1
 800c8a0:	f7f4 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d09f      	beq.n	800c7e8 <_dtoa_r+0x638>
 800c8a8:	e7d1      	b.n	800c84e <_dtoa_r+0x69e>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	f000 80ea 	beq.w	800ca86 <_dtoa_r+0x8d6>
 800c8b2:	9a07      	ldr	r2, [sp, #28]
 800c8b4:	2a01      	cmp	r2, #1
 800c8b6:	f300 80cd 	bgt.w	800ca54 <_dtoa_r+0x8a4>
 800c8ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	f000 80c1 	beq.w	800ca44 <_dtoa_r+0x894>
 800c8c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c8c6:	9c08      	ldr	r4, [sp, #32]
 800c8c8:	9e00      	ldr	r6, [sp, #0]
 800c8ca:	9a00      	ldr	r2, [sp, #0]
 800c8cc:	441a      	add	r2, r3
 800c8ce:	9200      	str	r2, [sp, #0]
 800c8d0:	9a06      	ldr	r2, [sp, #24]
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	441a      	add	r2, r3
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	9206      	str	r2, [sp, #24]
 800c8da:	f000 fc2d 	bl	800d138 <__i2b>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	b166      	cbz	r6, 800c8fc <_dtoa_r+0x74c>
 800c8e2:	9b06      	ldr	r3, [sp, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dd09      	ble.n	800c8fc <_dtoa_r+0x74c>
 800c8e8:	42b3      	cmp	r3, r6
 800c8ea:	9a00      	ldr	r2, [sp, #0]
 800c8ec:	bfa8      	it	ge
 800c8ee:	4633      	movge	r3, r6
 800c8f0:	1ad2      	subs	r2, r2, r3
 800c8f2:	9200      	str	r2, [sp, #0]
 800c8f4:	9a06      	ldr	r2, [sp, #24]
 800c8f6:	1af6      	subs	r6, r6, r3
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	9306      	str	r3, [sp, #24]
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	b30b      	cbz	r3, 800c944 <_dtoa_r+0x794>
 800c900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80c6 	beq.w	800ca94 <_dtoa_r+0x8e4>
 800c908:	2c00      	cmp	r4, #0
 800c90a:	f000 80c0 	beq.w	800ca8e <_dtoa_r+0x8de>
 800c90e:	4629      	mov	r1, r5
 800c910:	4622      	mov	r2, r4
 800c912:	4648      	mov	r0, r9
 800c914:	f000 fcc8 	bl	800d2a8 <__pow5mult>
 800c918:	9a02      	ldr	r2, [sp, #8]
 800c91a:	4601      	mov	r1, r0
 800c91c:	4605      	mov	r5, r0
 800c91e:	4648      	mov	r0, r9
 800c920:	f000 fc20 	bl	800d164 <__multiply>
 800c924:	9902      	ldr	r1, [sp, #8]
 800c926:	4680      	mov	r8, r0
 800c928:	4648      	mov	r0, r9
 800c92a:	f000 fb51 	bl	800cfd0 <_Bfree>
 800c92e:	9b08      	ldr	r3, [sp, #32]
 800c930:	1b1b      	subs	r3, r3, r4
 800c932:	9308      	str	r3, [sp, #32]
 800c934:	f000 80b1 	beq.w	800ca9a <_dtoa_r+0x8ea>
 800c938:	9a08      	ldr	r2, [sp, #32]
 800c93a:	4641      	mov	r1, r8
 800c93c:	4648      	mov	r0, r9
 800c93e:	f000 fcb3 	bl	800d2a8 <__pow5mult>
 800c942:	9002      	str	r0, [sp, #8]
 800c944:	2101      	movs	r1, #1
 800c946:	4648      	mov	r0, r9
 800c948:	f000 fbf6 	bl	800d138 <__i2b>
 800c94c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c94e:	4604      	mov	r4, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 81d8 	beq.w	800cd06 <_dtoa_r+0xb56>
 800c956:	461a      	mov	r2, r3
 800c958:	4601      	mov	r1, r0
 800c95a:	4648      	mov	r0, r9
 800c95c:	f000 fca4 	bl	800d2a8 <__pow5mult>
 800c960:	9b07      	ldr	r3, [sp, #28]
 800c962:	2b01      	cmp	r3, #1
 800c964:	4604      	mov	r4, r0
 800c966:	f300 809f 	bgt.w	800caa8 <_dtoa_r+0x8f8>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 8097 	bne.w	800caa0 <_dtoa_r+0x8f0>
 800c972:	9b05      	ldr	r3, [sp, #20]
 800c974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f040 8093 	bne.w	800caa4 <_dtoa_r+0x8f4>
 800c97e:	9b05      	ldr	r3, [sp, #20]
 800c980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c984:	0d1b      	lsrs	r3, r3, #20
 800c986:	051b      	lsls	r3, r3, #20
 800c988:	b133      	cbz	r3, 800c998 <_dtoa_r+0x7e8>
 800c98a:	9b00      	ldr	r3, [sp, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	9b06      	ldr	r3, [sp, #24]
 800c992:	3301      	adds	r3, #1
 800c994:	9306      	str	r3, [sp, #24]
 800c996:	2301      	movs	r3, #1
 800c998:	9308      	str	r3, [sp, #32]
 800c99a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 81b8 	beq.w	800cd12 <_dtoa_r+0xb62>
 800c9a2:	6923      	ldr	r3, [r4, #16]
 800c9a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9a8:	6918      	ldr	r0, [r3, #16]
 800c9aa:	f000 fb79 	bl	800d0a0 <__hi0bits>
 800c9ae:	f1c0 0020 	rsb	r0, r0, #32
 800c9b2:	9b06      	ldr	r3, [sp, #24]
 800c9b4:	4418      	add	r0, r3
 800c9b6:	f010 001f 	ands.w	r0, r0, #31
 800c9ba:	f000 8082 	beq.w	800cac2 <_dtoa_r+0x912>
 800c9be:	f1c0 0320 	rsb	r3, r0, #32
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	dd73      	ble.n	800caae <_dtoa_r+0x8fe>
 800c9c6:	9b00      	ldr	r3, [sp, #0]
 800c9c8:	f1c0 001c 	rsb	r0, r0, #28
 800c9cc:	4403      	add	r3, r0
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	9b06      	ldr	r3, [sp, #24]
 800c9d2:	4403      	add	r3, r0
 800c9d4:	4406      	add	r6, r0
 800c9d6:	9306      	str	r3, [sp, #24]
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dd05      	ble.n	800c9ea <_dtoa_r+0x83a>
 800c9de:	9902      	ldr	r1, [sp, #8]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4648      	mov	r0, r9
 800c9e4:	f000 fcba 	bl	800d35c <__lshift>
 800c9e8:	9002      	str	r0, [sp, #8]
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dd05      	ble.n	800c9fc <_dtoa_r+0x84c>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f000 fcb1 	bl	800d35c <__lshift>
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d061      	beq.n	800cac6 <_dtoa_r+0x916>
 800ca02:	9802      	ldr	r0, [sp, #8]
 800ca04:	4621      	mov	r1, r4
 800ca06:	f000 fd15 	bl	800d434 <__mcmp>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	da5b      	bge.n	800cac6 <_dtoa_r+0x916>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	9902      	ldr	r1, [sp, #8]
 800ca12:	220a      	movs	r2, #10
 800ca14:	4648      	mov	r0, r9
 800ca16:	f000 fafd 	bl	800d014 <__multadd>
 800ca1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca1c:	9002      	str	r0, [sp, #8]
 800ca1e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 8177 	beq.w	800cd16 <_dtoa_r+0xb66>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	220a      	movs	r2, #10
 800ca2e:	4648      	mov	r0, r9
 800ca30:	f000 faf0 	bl	800d014 <__multadd>
 800ca34:	f1bb 0f00 	cmp.w	fp, #0
 800ca38:	4605      	mov	r5, r0
 800ca3a:	dc6f      	bgt.n	800cb1c <_dtoa_r+0x96c>
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	dc49      	bgt.n	800cad6 <_dtoa_r+0x926>
 800ca42:	e06b      	b.n	800cb1c <_dtoa_r+0x96c>
 800ca44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ca46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca4a:	e73c      	b.n	800c8c6 <_dtoa_r+0x716>
 800ca4c:	3fe00000 	.word	0x3fe00000
 800ca50:	40240000 	.word	0x40240000
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	1e5c      	subs	r4, r3, #1
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	42a3      	cmp	r3, r4
 800ca5c:	db09      	blt.n	800ca72 <_dtoa_r+0x8c2>
 800ca5e:	1b1c      	subs	r4, r3, r4
 800ca60:	9b03      	ldr	r3, [sp, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f6bf af30 	bge.w	800c8c8 <_dtoa_r+0x718>
 800ca68:	9b00      	ldr	r3, [sp, #0]
 800ca6a:	9a03      	ldr	r2, [sp, #12]
 800ca6c:	1a9e      	subs	r6, r3, r2
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e72b      	b.n	800c8ca <_dtoa_r+0x71a>
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca76:	9408      	str	r4, [sp, #32]
 800ca78:	1ae3      	subs	r3, r4, r3
 800ca7a:	441a      	add	r2, r3
 800ca7c:	9e00      	ldr	r6, [sp, #0]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca82:	2400      	movs	r4, #0
 800ca84:	e721      	b.n	800c8ca <_dtoa_r+0x71a>
 800ca86:	9c08      	ldr	r4, [sp, #32]
 800ca88:	9e00      	ldr	r6, [sp, #0]
 800ca8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ca8c:	e728      	b.n	800c8e0 <_dtoa_r+0x730>
 800ca8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca92:	e751      	b.n	800c938 <_dtoa_r+0x788>
 800ca94:	9a08      	ldr	r2, [sp, #32]
 800ca96:	9902      	ldr	r1, [sp, #8]
 800ca98:	e750      	b.n	800c93c <_dtoa_r+0x78c>
 800ca9a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ca9e:	e751      	b.n	800c944 <_dtoa_r+0x794>
 800caa0:	2300      	movs	r3, #0
 800caa2:	e779      	b.n	800c998 <_dtoa_r+0x7e8>
 800caa4:	9b04      	ldr	r3, [sp, #16]
 800caa6:	e777      	b.n	800c998 <_dtoa_r+0x7e8>
 800caa8:	2300      	movs	r3, #0
 800caaa:	9308      	str	r3, [sp, #32]
 800caac:	e779      	b.n	800c9a2 <_dtoa_r+0x7f2>
 800caae:	d093      	beq.n	800c9d8 <_dtoa_r+0x828>
 800cab0:	9a00      	ldr	r2, [sp, #0]
 800cab2:	331c      	adds	r3, #28
 800cab4:	441a      	add	r2, r3
 800cab6:	9200      	str	r2, [sp, #0]
 800cab8:	9a06      	ldr	r2, [sp, #24]
 800caba:	441a      	add	r2, r3
 800cabc:	441e      	add	r6, r3
 800cabe:	9206      	str	r2, [sp, #24]
 800cac0:	e78a      	b.n	800c9d8 <_dtoa_r+0x828>
 800cac2:	4603      	mov	r3, r0
 800cac4:	e7f4      	b.n	800cab0 <_dtoa_r+0x900>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	46b8      	mov	r8, r7
 800cacc:	dc20      	bgt.n	800cb10 <_dtoa_r+0x960>
 800cace:	469b      	mov	fp, r3
 800cad0:	9b07      	ldr	r3, [sp, #28]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	dd1e      	ble.n	800cb14 <_dtoa_r+0x964>
 800cad6:	f1bb 0f00 	cmp.w	fp, #0
 800cada:	f47f adb1 	bne.w	800c640 <_dtoa_r+0x490>
 800cade:	4621      	mov	r1, r4
 800cae0:	465b      	mov	r3, fp
 800cae2:	2205      	movs	r2, #5
 800cae4:	4648      	mov	r0, r9
 800cae6:	f000 fa95 	bl	800d014 <__multadd>
 800caea:	4601      	mov	r1, r0
 800caec:	4604      	mov	r4, r0
 800caee:	9802      	ldr	r0, [sp, #8]
 800caf0:	f000 fca0 	bl	800d434 <__mcmp>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f77f ada3 	ble.w	800c640 <_dtoa_r+0x490>
 800cafa:	4656      	mov	r6, sl
 800cafc:	2331      	movs	r3, #49	@ 0x31
 800cafe:	f806 3b01 	strb.w	r3, [r6], #1
 800cb02:	f108 0801 	add.w	r8, r8, #1
 800cb06:	e59f      	b.n	800c648 <_dtoa_r+0x498>
 800cb08:	9c03      	ldr	r4, [sp, #12]
 800cb0a:	46b8      	mov	r8, r7
 800cb0c:	4625      	mov	r5, r4
 800cb0e:	e7f4      	b.n	800cafa <_dtoa_r+0x94a>
 800cb10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8101 	beq.w	800cd1e <_dtoa_r+0xb6e>
 800cb1c:	2e00      	cmp	r6, #0
 800cb1e:	dd05      	ble.n	800cb2c <_dtoa_r+0x97c>
 800cb20:	4629      	mov	r1, r5
 800cb22:	4632      	mov	r2, r6
 800cb24:	4648      	mov	r0, r9
 800cb26:	f000 fc19 	bl	800d35c <__lshift>
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	9b08      	ldr	r3, [sp, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d05c      	beq.n	800cbec <_dtoa_r+0xa3c>
 800cb32:	6869      	ldr	r1, [r5, #4]
 800cb34:	4648      	mov	r0, r9
 800cb36:	f000 fa0b 	bl	800cf50 <_Balloc>
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	b928      	cbnz	r0, 800cb4a <_dtoa_r+0x99a>
 800cb3e:	4b82      	ldr	r3, [pc, #520]	@ (800cd48 <_dtoa_r+0xb98>)
 800cb40:	4602      	mov	r2, r0
 800cb42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb46:	f7ff bb4a 	b.w	800c1de <_dtoa_r+0x2e>
 800cb4a:	692a      	ldr	r2, [r5, #16]
 800cb4c:	3202      	adds	r2, #2
 800cb4e:	0092      	lsls	r2, r2, #2
 800cb50:	f105 010c 	add.w	r1, r5, #12
 800cb54:	300c      	adds	r0, #12
 800cb56:	f7ff fa76 	bl	800c046 <memcpy>
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4648      	mov	r0, r9
 800cb60:	f000 fbfc 	bl	800d35c <__lshift>
 800cb64:	f10a 0301 	add.w	r3, sl, #1
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	eb0a 030b 	add.w	r3, sl, fp
 800cb6e:	9308      	str	r3, [sp, #32]
 800cb70:	9b04      	ldr	r3, [sp, #16]
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	462f      	mov	r7, r5
 800cb78:	9306      	str	r3, [sp, #24]
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	9b00      	ldr	r3, [sp, #0]
 800cb7e:	9802      	ldr	r0, [sp, #8]
 800cb80:	4621      	mov	r1, r4
 800cb82:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb86:	f7ff fa8b 	bl	800c0a0 <quorem>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	3330      	adds	r3, #48	@ 0x30
 800cb8e:	9003      	str	r0, [sp, #12]
 800cb90:	4639      	mov	r1, r7
 800cb92:	9802      	ldr	r0, [sp, #8]
 800cb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb96:	f000 fc4d 	bl	800d434 <__mcmp>
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	9004      	str	r0, [sp, #16]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4648      	mov	r0, r9
 800cba2:	f000 fc63 	bl	800d46c <__mdiff>
 800cba6:	68c2      	ldr	r2, [r0, #12]
 800cba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbaa:	4606      	mov	r6, r0
 800cbac:	bb02      	cbnz	r2, 800cbf0 <_dtoa_r+0xa40>
 800cbae:	4601      	mov	r1, r0
 800cbb0:	9802      	ldr	r0, [sp, #8]
 800cbb2:	f000 fc3f 	bl	800d434 <__mcmp>
 800cbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb8:	4602      	mov	r2, r0
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4648      	mov	r0, r9
 800cbbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc2:	f000 fa05 	bl	800cfd0 <_Bfree>
 800cbc6:	9b07      	ldr	r3, [sp, #28]
 800cbc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cbca:	9e00      	ldr	r6, [sp, #0]
 800cbcc:	ea42 0103 	orr.w	r1, r2, r3
 800cbd0:	9b06      	ldr	r3, [sp, #24]
 800cbd2:	4319      	orrs	r1, r3
 800cbd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd6:	d10d      	bne.n	800cbf4 <_dtoa_r+0xa44>
 800cbd8:	2b39      	cmp	r3, #57	@ 0x39
 800cbda:	d027      	beq.n	800cc2c <_dtoa_r+0xa7c>
 800cbdc:	9a04      	ldr	r2, [sp, #16]
 800cbde:	2a00      	cmp	r2, #0
 800cbe0:	dd01      	ble.n	800cbe6 <_dtoa_r+0xa36>
 800cbe2:	9b03      	ldr	r3, [sp, #12]
 800cbe4:	3331      	adds	r3, #49	@ 0x31
 800cbe6:	f88b 3000 	strb.w	r3, [fp]
 800cbea:	e52e      	b.n	800c64a <_dtoa_r+0x49a>
 800cbec:	4628      	mov	r0, r5
 800cbee:	e7b9      	b.n	800cb64 <_dtoa_r+0x9b4>
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	e7e2      	b.n	800cbba <_dtoa_r+0xa0a>
 800cbf4:	9904      	ldr	r1, [sp, #16]
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	db04      	blt.n	800cc04 <_dtoa_r+0xa54>
 800cbfa:	9807      	ldr	r0, [sp, #28]
 800cbfc:	4301      	orrs	r1, r0
 800cbfe:	9806      	ldr	r0, [sp, #24]
 800cc00:	4301      	orrs	r1, r0
 800cc02:	d120      	bne.n	800cc46 <_dtoa_r+0xa96>
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	ddee      	ble.n	800cbe6 <_dtoa_r+0xa36>
 800cc08:	9902      	ldr	r1, [sp, #8]
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	4648      	mov	r0, r9
 800cc10:	f000 fba4 	bl	800d35c <__lshift>
 800cc14:	4621      	mov	r1, r4
 800cc16:	9002      	str	r0, [sp, #8]
 800cc18:	f000 fc0c 	bl	800d434 <__mcmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	9b00      	ldr	r3, [sp, #0]
 800cc20:	dc02      	bgt.n	800cc28 <_dtoa_r+0xa78>
 800cc22:	d1e0      	bne.n	800cbe6 <_dtoa_r+0xa36>
 800cc24:	07da      	lsls	r2, r3, #31
 800cc26:	d5de      	bpl.n	800cbe6 <_dtoa_r+0xa36>
 800cc28:	2b39      	cmp	r3, #57	@ 0x39
 800cc2a:	d1da      	bne.n	800cbe2 <_dtoa_r+0xa32>
 800cc2c:	2339      	movs	r3, #57	@ 0x39
 800cc2e:	f88b 3000 	strb.w	r3, [fp]
 800cc32:	4633      	mov	r3, r6
 800cc34:	461e      	mov	r6, r3
 800cc36:	3b01      	subs	r3, #1
 800cc38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc3c:	2a39      	cmp	r2, #57	@ 0x39
 800cc3e:	d04e      	beq.n	800ccde <_dtoa_r+0xb2e>
 800cc40:	3201      	adds	r2, #1
 800cc42:	701a      	strb	r2, [r3, #0]
 800cc44:	e501      	b.n	800c64a <_dtoa_r+0x49a>
 800cc46:	2a00      	cmp	r2, #0
 800cc48:	dd03      	ble.n	800cc52 <_dtoa_r+0xaa2>
 800cc4a:	2b39      	cmp	r3, #57	@ 0x39
 800cc4c:	d0ee      	beq.n	800cc2c <_dtoa_r+0xa7c>
 800cc4e:	3301      	adds	r3, #1
 800cc50:	e7c9      	b.n	800cbe6 <_dtoa_r+0xa36>
 800cc52:	9a00      	ldr	r2, [sp, #0]
 800cc54:	9908      	ldr	r1, [sp, #32]
 800cc56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc5a:	428a      	cmp	r2, r1
 800cc5c:	d028      	beq.n	800ccb0 <_dtoa_r+0xb00>
 800cc5e:	9902      	ldr	r1, [sp, #8]
 800cc60:	2300      	movs	r3, #0
 800cc62:	220a      	movs	r2, #10
 800cc64:	4648      	mov	r0, r9
 800cc66:	f000 f9d5 	bl	800d014 <__multadd>
 800cc6a:	42af      	cmp	r7, r5
 800cc6c:	9002      	str	r0, [sp, #8]
 800cc6e:	f04f 0300 	mov.w	r3, #0
 800cc72:	f04f 020a 	mov.w	r2, #10
 800cc76:	4639      	mov	r1, r7
 800cc78:	4648      	mov	r0, r9
 800cc7a:	d107      	bne.n	800cc8c <_dtoa_r+0xadc>
 800cc7c:	f000 f9ca 	bl	800d014 <__multadd>
 800cc80:	4607      	mov	r7, r0
 800cc82:	4605      	mov	r5, r0
 800cc84:	9b00      	ldr	r3, [sp, #0]
 800cc86:	3301      	adds	r3, #1
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	e777      	b.n	800cb7c <_dtoa_r+0x9cc>
 800cc8c:	f000 f9c2 	bl	800d014 <__multadd>
 800cc90:	4629      	mov	r1, r5
 800cc92:	4607      	mov	r7, r0
 800cc94:	2300      	movs	r3, #0
 800cc96:	220a      	movs	r2, #10
 800cc98:	4648      	mov	r0, r9
 800cc9a:	f000 f9bb 	bl	800d014 <__multadd>
 800cc9e:	4605      	mov	r5, r0
 800cca0:	e7f0      	b.n	800cc84 <_dtoa_r+0xad4>
 800cca2:	f1bb 0f00 	cmp.w	fp, #0
 800cca6:	bfcc      	ite	gt
 800cca8:	465e      	movgt	r6, fp
 800ccaa:	2601      	movle	r6, #1
 800ccac:	4456      	add	r6, sl
 800ccae:	2700      	movs	r7, #0
 800ccb0:	9902      	ldr	r1, [sp, #8]
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	4648      	mov	r0, r9
 800ccb8:	f000 fb50 	bl	800d35c <__lshift>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	9002      	str	r0, [sp, #8]
 800ccc0:	f000 fbb8 	bl	800d434 <__mcmp>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	dcb4      	bgt.n	800cc32 <_dtoa_r+0xa82>
 800ccc8:	d102      	bne.n	800ccd0 <_dtoa_r+0xb20>
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	07db      	lsls	r3, r3, #31
 800ccce:	d4b0      	bmi.n	800cc32 <_dtoa_r+0xa82>
 800ccd0:	4633      	mov	r3, r6
 800ccd2:	461e      	mov	r6, r3
 800ccd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd8:	2a30      	cmp	r2, #48	@ 0x30
 800ccda:	d0fa      	beq.n	800ccd2 <_dtoa_r+0xb22>
 800ccdc:	e4b5      	b.n	800c64a <_dtoa_r+0x49a>
 800ccde:	459a      	cmp	sl, r3
 800cce0:	d1a8      	bne.n	800cc34 <_dtoa_r+0xa84>
 800cce2:	2331      	movs	r3, #49	@ 0x31
 800cce4:	f108 0801 	add.w	r8, r8, #1
 800cce8:	f88a 3000 	strb.w	r3, [sl]
 800ccec:	e4ad      	b.n	800c64a <_dtoa_r+0x49a>
 800ccee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cd4c <_dtoa_r+0xb9c>
 800ccf4:	b11b      	cbz	r3, 800ccfe <_dtoa_r+0xb4e>
 800ccf6:	f10a 0308 	add.w	r3, sl, #8
 800ccfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	4650      	mov	r0, sl
 800cd00:	b017      	add	sp, #92	@ 0x5c
 800cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd06:	9b07      	ldr	r3, [sp, #28]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	f77f ae2e 	ble.w	800c96a <_dtoa_r+0x7ba>
 800cd0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd10:	9308      	str	r3, [sp, #32]
 800cd12:	2001      	movs	r0, #1
 800cd14:	e64d      	b.n	800c9b2 <_dtoa_r+0x802>
 800cd16:	f1bb 0f00 	cmp.w	fp, #0
 800cd1a:	f77f aed9 	ble.w	800cad0 <_dtoa_r+0x920>
 800cd1e:	4656      	mov	r6, sl
 800cd20:	9802      	ldr	r0, [sp, #8]
 800cd22:	4621      	mov	r1, r4
 800cd24:	f7ff f9bc 	bl	800c0a0 <quorem>
 800cd28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cd2c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd30:	eba6 020a 	sub.w	r2, r6, sl
 800cd34:	4593      	cmp	fp, r2
 800cd36:	ddb4      	ble.n	800cca2 <_dtoa_r+0xaf2>
 800cd38:	9902      	ldr	r1, [sp, #8]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	220a      	movs	r2, #10
 800cd3e:	4648      	mov	r0, r9
 800cd40:	f000 f968 	bl	800d014 <__multadd>
 800cd44:	9002      	str	r0, [sp, #8]
 800cd46:	e7eb      	b.n	800cd20 <_dtoa_r+0xb70>
 800cd48:	0800e184 	.word	0x0800e184
 800cd4c:	0800e11f 	.word	0x0800e11f

0800cd50 <_free_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4605      	mov	r5, r0
 800cd54:	2900      	cmp	r1, #0
 800cd56:	d041      	beq.n	800cddc <_free_r+0x8c>
 800cd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5c:	1f0c      	subs	r4, r1, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfb8      	it	lt
 800cd62:	18e4      	addlt	r4, r4, r3
 800cd64:	f000 f8e8 	bl	800cf38 <__malloc_lock>
 800cd68:	4a1d      	ldr	r2, [pc, #116]	@ (800cde0 <_free_r+0x90>)
 800cd6a:	6813      	ldr	r3, [r2, #0]
 800cd6c:	b933      	cbnz	r3, 800cd7c <_free_r+0x2c>
 800cd6e:	6063      	str	r3, [r4, #4]
 800cd70:	6014      	str	r4, [r2, #0]
 800cd72:	4628      	mov	r0, r5
 800cd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd78:	f000 b8e4 	b.w	800cf44 <__malloc_unlock>
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	d908      	bls.n	800cd92 <_free_r+0x42>
 800cd80:	6820      	ldr	r0, [r4, #0]
 800cd82:	1821      	adds	r1, r4, r0
 800cd84:	428b      	cmp	r3, r1
 800cd86:	bf01      	itttt	eq
 800cd88:	6819      	ldreq	r1, [r3, #0]
 800cd8a:	685b      	ldreq	r3, [r3, #4]
 800cd8c:	1809      	addeq	r1, r1, r0
 800cd8e:	6021      	streq	r1, [r4, #0]
 800cd90:	e7ed      	b.n	800cd6e <_free_r+0x1e>
 800cd92:	461a      	mov	r2, r3
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	b10b      	cbz	r3, 800cd9c <_free_r+0x4c>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d9fa      	bls.n	800cd92 <_free_r+0x42>
 800cd9c:	6811      	ldr	r1, [r2, #0]
 800cd9e:	1850      	adds	r0, r2, r1
 800cda0:	42a0      	cmp	r0, r4
 800cda2:	d10b      	bne.n	800cdbc <_free_r+0x6c>
 800cda4:	6820      	ldr	r0, [r4, #0]
 800cda6:	4401      	add	r1, r0
 800cda8:	1850      	adds	r0, r2, r1
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	d1e0      	bne.n	800cd72 <_free_r+0x22>
 800cdb0:	6818      	ldr	r0, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	6053      	str	r3, [r2, #4]
 800cdb6:	4408      	add	r0, r1
 800cdb8:	6010      	str	r0, [r2, #0]
 800cdba:	e7da      	b.n	800cd72 <_free_r+0x22>
 800cdbc:	d902      	bls.n	800cdc4 <_free_r+0x74>
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	602b      	str	r3, [r5, #0]
 800cdc2:	e7d6      	b.n	800cd72 <_free_r+0x22>
 800cdc4:	6820      	ldr	r0, [r4, #0]
 800cdc6:	1821      	adds	r1, r4, r0
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf04      	itt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	6063      	str	r3, [r4, #4]
 800cdd2:	bf04      	itt	eq
 800cdd4:	1809      	addeq	r1, r1, r0
 800cdd6:	6021      	streq	r1, [r4, #0]
 800cdd8:	6054      	str	r4, [r2, #4]
 800cdda:	e7ca      	b.n	800cd72 <_free_r+0x22>
 800cddc:	bd38      	pop	{r3, r4, r5, pc}
 800cdde:	bf00      	nop
 800cde0:	20000bdc 	.word	0x20000bdc

0800cde4 <malloc>:
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <malloc+0xc>)
 800cde6:	4601      	mov	r1, r0
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	f000 b825 	b.w	800ce38 <_malloc_r>
 800cdee:	bf00      	nop
 800cdf0:	20000030 	.word	0x20000030

0800cdf4 <sbrk_aligned>:
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ce34 <sbrk_aligned+0x40>)
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	6831      	ldr	r1, [r6, #0]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	b911      	cbnz	r1, 800ce06 <sbrk_aligned+0x12>
 800ce00:	f000 feb4 	bl	800db6c <_sbrk_r>
 800ce04:	6030      	str	r0, [r6, #0]
 800ce06:	4621      	mov	r1, r4
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f000 feaf 	bl	800db6c <_sbrk_r>
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d103      	bne.n	800ce1a <sbrk_aligned+0x26>
 800ce12:	f04f 34ff 	mov.w	r4, #4294967295
 800ce16:	4620      	mov	r0, r4
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
 800ce1a:	1cc4      	adds	r4, r0, #3
 800ce1c:	f024 0403 	bic.w	r4, r4, #3
 800ce20:	42a0      	cmp	r0, r4
 800ce22:	d0f8      	beq.n	800ce16 <sbrk_aligned+0x22>
 800ce24:	1a21      	subs	r1, r4, r0
 800ce26:	4628      	mov	r0, r5
 800ce28:	f000 fea0 	bl	800db6c <_sbrk_r>
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d1f2      	bne.n	800ce16 <sbrk_aligned+0x22>
 800ce30:	e7ef      	b.n	800ce12 <sbrk_aligned+0x1e>
 800ce32:	bf00      	nop
 800ce34:	20000bd8 	.word	0x20000bd8

0800ce38 <_malloc_r>:
 800ce38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce3c:	1ccd      	adds	r5, r1, #3
 800ce3e:	f025 0503 	bic.w	r5, r5, #3
 800ce42:	3508      	adds	r5, #8
 800ce44:	2d0c      	cmp	r5, #12
 800ce46:	bf38      	it	cc
 800ce48:	250c      	movcc	r5, #12
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	db01      	blt.n	800ce54 <_malloc_r+0x1c>
 800ce50:	42a9      	cmp	r1, r5
 800ce52:	d904      	bls.n	800ce5e <_malloc_r+0x26>
 800ce54:	230c      	movs	r3, #12
 800ce56:	6033      	str	r3, [r6, #0]
 800ce58:	2000      	movs	r0, #0
 800ce5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf34 <_malloc_r+0xfc>
 800ce62:	f000 f869 	bl	800cf38 <__malloc_lock>
 800ce66:	f8d8 3000 	ldr.w	r3, [r8]
 800ce6a:	461c      	mov	r4, r3
 800ce6c:	bb44      	cbnz	r4, 800cec0 <_malloc_r+0x88>
 800ce6e:	4629      	mov	r1, r5
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7ff ffbf 	bl	800cdf4 <sbrk_aligned>
 800ce76:	1c43      	adds	r3, r0, #1
 800ce78:	4604      	mov	r4, r0
 800ce7a:	d158      	bne.n	800cf2e <_malloc_r+0xf6>
 800ce7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ce80:	4627      	mov	r7, r4
 800ce82:	2f00      	cmp	r7, #0
 800ce84:	d143      	bne.n	800cf0e <_malloc_r+0xd6>
 800ce86:	2c00      	cmp	r4, #0
 800ce88:	d04b      	beq.n	800cf22 <_malloc_r+0xea>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4630      	mov	r0, r6
 800ce90:	eb04 0903 	add.w	r9, r4, r3
 800ce94:	f000 fe6a 	bl	800db6c <_sbrk_r>
 800ce98:	4581      	cmp	r9, r0
 800ce9a:	d142      	bne.n	800cf22 <_malloc_r+0xea>
 800ce9c:	6821      	ldr	r1, [r4, #0]
 800ce9e:	1a6d      	subs	r5, r5, r1
 800cea0:	4629      	mov	r1, r5
 800cea2:	4630      	mov	r0, r6
 800cea4:	f7ff ffa6 	bl	800cdf4 <sbrk_aligned>
 800cea8:	3001      	adds	r0, #1
 800ceaa:	d03a      	beq.n	800cf22 <_malloc_r+0xea>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	442b      	add	r3, r5
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	bb62      	cbnz	r2, 800cf14 <_malloc_r+0xdc>
 800ceba:	f8c8 7000 	str.w	r7, [r8]
 800cebe:	e00f      	b.n	800cee0 <_malloc_r+0xa8>
 800cec0:	6822      	ldr	r2, [r4, #0]
 800cec2:	1b52      	subs	r2, r2, r5
 800cec4:	d420      	bmi.n	800cf08 <_malloc_r+0xd0>
 800cec6:	2a0b      	cmp	r2, #11
 800cec8:	d917      	bls.n	800cefa <_malloc_r+0xc2>
 800ceca:	1961      	adds	r1, r4, r5
 800cecc:	42a3      	cmp	r3, r4
 800cece:	6025      	str	r5, [r4, #0]
 800ced0:	bf18      	it	ne
 800ced2:	6059      	strne	r1, [r3, #4]
 800ced4:	6863      	ldr	r3, [r4, #4]
 800ced6:	bf08      	it	eq
 800ced8:	f8c8 1000 	streq.w	r1, [r8]
 800cedc:	5162      	str	r2, [r4, r5]
 800cede:	604b      	str	r3, [r1, #4]
 800cee0:	4630      	mov	r0, r6
 800cee2:	f000 f82f 	bl	800cf44 <__malloc_unlock>
 800cee6:	f104 000b 	add.w	r0, r4, #11
 800ceea:	1d23      	adds	r3, r4, #4
 800ceec:	f020 0007 	bic.w	r0, r0, #7
 800cef0:	1ac2      	subs	r2, r0, r3
 800cef2:	bf1c      	itt	ne
 800cef4:	1a1b      	subne	r3, r3, r0
 800cef6:	50a3      	strne	r3, [r4, r2]
 800cef8:	e7af      	b.n	800ce5a <_malloc_r+0x22>
 800cefa:	6862      	ldr	r2, [r4, #4]
 800cefc:	42a3      	cmp	r3, r4
 800cefe:	bf0c      	ite	eq
 800cf00:	f8c8 2000 	streq.w	r2, [r8]
 800cf04:	605a      	strne	r2, [r3, #4]
 800cf06:	e7eb      	b.n	800cee0 <_malloc_r+0xa8>
 800cf08:	4623      	mov	r3, r4
 800cf0a:	6864      	ldr	r4, [r4, #4]
 800cf0c:	e7ae      	b.n	800ce6c <_malloc_r+0x34>
 800cf0e:	463c      	mov	r4, r7
 800cf10:	687f      	ldr	r7, [r7, #4]
 800cf12:	e7b6      	b.n	800ce82 <_malloc_r+0x4a>
 800cf14:	461a      	mov	r2, r3
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	42a3      	cmp	r3, r4
 800cf1a:	d1fb      	bne.n	800cf14 <_malloc_r+0xdc>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	6053      	str	r3, [r2, #4]
 800cf20:	e7de      	b.n	800cee0 <_malloc_r+0xa8>
 800cf22:	230c      	movs	r3, #12
 800cf24:	6033      	str	r3, [r6, #0]
 800cf26:	4630      	mov	r0, r6
 800cf28:	f000 f80c 	bl	800cf44 <__malloc_unlock>
 800cf2c:	e794      	b.n	800ce58 <_malloc_r+0x20>
 800cf2e:	6005      	str	r5, [r0, #0]
 800cf30:	e7d6      	b.n	800cee0 <_malloc_r+0xa8>
 800cf32:	bf00      	nop
 800cf34:	20000bdc 	.word	0x20000bdc

0800cf38 <__malloc_lock>:
 800cf38:	4801      	ldr	r0, [pc, #4]	@ (800cf40 <__malloc_lock+0x8>)
 800cf3a:	f7ff b882 	b.w	800c042 <__retarget_lock_acquire_recursive>
 800cf3e:	bf00      	nop
 800cf40:	20000bd4 	.word	0x20000bd4

0800cf44 <__malloc_unlock>:
 800cf44:	4801      	ldr	r0, [pc, #4]	@ (800cf4c <__malloc_unlock+0x8>)
 800cf46:	f7ff b87d 	b.w	800c044 <__retarget_lock_release_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	20000bd4 	.word	0x20000bd4

0800cf50 <_Balloc>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	69c6      	ldr	r6, [r0, #28]
 800cf54:	4604      	mov	r4, r0
 800cf56:	460d      	mov	r5, r1
 800cf58:	b976      	cbnz	r6, 800cf78 <_Balloc+0x28>
 800cf5a:	2010      	movs	r0, #16
 800cf5c:	f7ff ff42 	bl	800cde4 <malloc>
 800cf60:	4602      	mov	r2, r0
 800cf62:	61e0      	str	r0, [r4, #28]
 800cf64:	b920      	cbnz	r0, 800cf70 <_Balloc+0x20>
 800cf66:	4b18      	ldr	r3, [pc, #96]	@ (800cfc8 <_Balloc+0x78>)
 800cf68:	4818      	ldr	r0, [pc, #96]	@ (800cfcc <_Balloc+0x7c>)
 800cf6a:	216b      	movs	r1, #107	@ 0x6b
 800cf6c:	f7ff f87a 	bl	800c064 <__assert_func>
 800cf70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf74:	6006      	str	r6, [r0, #0]
 800cf76:	60c6      	str	r6, [r0, #12]
 800cf78:	69e6      	ldr	r6, [r4, #28]
 800cf7a:	68f3      	ldr	r3, [r6, #12]
 800cf7c:	b183      	cbz	r3, 800cfa0 <_Balloc+0x50>
 800cf7e:	69e3      	ldr	r3, [r4, #28]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf86:	b9b8      	cbnz	r0, 800cfb8 <_Balloc+0x68>
 800cf88:	2101      	movs	r1, #1
 800cf8a:	fa01 f605 	lsl.w	r6, r1, r5
 800cf8e:	1d72      	adds	r2, r6, #5
 800cf90:	0092      	lsls	r2, r2, #2
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fe01 	bl	800db9a <_calloc_r>
 800cf98:	b160      	cbz	r0, 800cfb4 <_Balloc+0x64>
 800cf9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf9e:	e00e      	b.n	800cfbe <_Balloc+0x6e>
 800cfa0:	2221      	movs	r2, #33	@ 0x21
 800cfa2:	2104      	movs	r1, #4
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fdf8 	bl	800db9a <_calloc_r>
 800cfaa:	69e3      	ldr	r3, [r4, #28]
 800cfac:	60f0      	str	r0, [r6, #12]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1e4      	bne.n	800cf7e <_Balloc+0x2e>
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	bd70      	pop	{r4, r5, r6, pc}
 800cfb8:	6802      	ldr	r2, [r0, #0]
 800cfba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfc4:	e7f7      	b.n	800cfb6 <_Balloc+0x66>
 800cfc6:	bf00      	nop
 800cfc8:	0800e040 	.word	0x0800e040
 800cfcc:	0800e195 	.word	0x0800e195

0800cfd0 <_Bfree>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	69c6      	ldr	r6, [r0, #28]
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	b976      	cbnz	r6, 800cff8 <_Bfree+0x28>
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f7ff ff02 	bl	800cde4 <malloc>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	61e8      	str	r0, [r5, #28]
 800cfe4:	b920      	cbnz	r0, 800cff0 <_Bfree+0x20>
 800cfe6:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <_Bfree+0x3c>)
 800cfe8:	4809      	ldr	r0, [pc, #36]	@ (800d010 <_Bfree+0x40>)
 800cfea:	218f      	movs	r1, #143	@ 0x8f
 800cfec:	f7ff f83a 	bl	800c064 <__assert_func>
 800cff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cff4:	6006      	str	r6, [r0, #0]
 800cff6:	60c6      	str	r6, [r0, #12]
 800cff8:	b13c      	cbz	r4, 800d00a <_Bfree+0x3a>
 800cffa:	69eb      	ldr	r3, [r5, #28]
 800cffc:	6862      	ldr	r2, [r4, #4]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d004:	6021      	str	r1, [r4, #0]
 800d006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	0800e040 	.word	0x0800e040
 800d010:	0800e195 	.word	0x0800e195

0800d014 <__multadd>:
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	690d      	ldr	r5, [r1, #16]
 800d01a:	4607      	mov	r7, r0
 800d01c:	460c      	mov	r4, r1
 800d01e:	461e      	mov	r6, r3
 800d020:	f101 0c14 	add.w	ip, r1, #20
 800d024:	2000      	movs	r0, #0
 800d026:	f8dc 3000 	ldr.w	r3, [ip]
 800d02a:	b299      	uxth	r1, r3
 800d02c:	fb02 6101 	mla	r1, r2, r1, r6
 800d030:	0c1e      	lsrs	r6, r3, #16
 800d032:	0c0b      	lsrs	r3, r1, #16
 800d034:	fb02 3306 	mla	r3, r2, r6, r3
 800d038:	b289      	uxth	r1, r1
 800d03a:	3001      	adds	r0, #1
 800d03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d040:	4285      	cmp	r5, r0
 800d042:	f84c 1b04 	str.w	r1, [ip], #4
 800d046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d04a:	dcec      	bgt.n	800d026 <__multadd+0x12>
 800d04c:	b30e      	cbz	r6, 800d092 <__multadd+0x7e>
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	42ab      	cmp	r3, r5
 800d052:	dc19      	bgt.n	800d088 <__multadd+0x74>
 800d054:	6861      	ldr	r1, [r4, #4]
 800d056:	4638      	mov	r0, r7
 800d058:	3101      	adds	r1, #1
 800d05a:	f7ff ff79 	bl	800cf50 <_Balloc>
 800d05e:	4680      	mov	r8, r0
 800d060:	b928      	cbnz	r0, 800d06e <__multadd+0x5a>
 800d062:	4602      	mov	r2, r0
 800d064:	4b0c      	ldr	r3, [pc, #48]	@ (800d098 <__multadd+0x84>)
 800d066:	480d      	ldr	r0, [pc, #52]	@ (800d09c <__multadd+0x88>)
 800d068:	21ba      	movs	r1, #186	@ 0xba
 800d06a:	f7fe fffb 	bl	800c064 <__assert_func>
 800d06e:	6922      	ldr	r2, [r4, #16]
 800d070:	3202      	adds	r2, #2
 800d072:	f104 010c 	add.w	r1, r4, #12
 800d076:	0092      	lsls	r2, r2, #2
 800d078:	300c      	adds	r0, #12
 800d07a:	f7fe ffe4 	bl	800c046 <memcpy>
 800d07e:	4621      	mov	r1, r4
 800d080:	4638      	mov	r0, r7
 800d082:	f7ff ffa5 	bl	800cfd0 <_Bfree>
 800d086:	4644      	mov	r4, r8
 800d088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d08c:	3501      	adds	r5, #1
 800d08e:	615e      	str	r6, [r3, #20]
 800d090:	6125      	str	r5, [r4, #16]
 800d092:	4620      	mov	r0, r4
 800d094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d098:	0800e184 	.word	0x0800e184
 800d09c:	0800e195 	.word	0x0800e195

0800d0a0 <__hi0bits>:
 800d0a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	bf36      	itet	cc
 800d0a8:	0403      	lslcc	r3, r0, #16
 800d0aa:	2000      	movcs	r0, #0
 800d0ac:	2010      	movcc	r0, #16
 800d0ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0b2:	bf3c      	itt	cc
 800d0b4:	021b      	lslcc	r3, r3, #8
 800d0b6:	3008      	addcc	r0, #8
 800d0b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0bc:	bf3c      	itt	cc
 800d0be:	011b      	lslcc	r3, r3, #4
 800d0c0:	3004      	addcc	r0, #4
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0c6:	bf3c      	itt	cc
 800d0c8:	009b      	lslcc	r3, r3, #2
 800d0ca:	3002      	addcc	r0, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	db05      	blt.n	800d0dc <__hi0bits+0x3c>
 800d0d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0d4:	f100 0001 	add.w	r0, r0, #1
 800d0d8:	bf08      	it	eq
 800d0da:	2020      	moveq	r0, #32
 800d0dc:	4770      	bx	lr

0800d0de <__lo0bits>:
 800d0de:	6803      	ldr	r3, [r0, #0]
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	f013 0007 	ands.w	r0, r3, #7
 800d0e6:	d00b      	beq.n	800d100 <__lo0bits+0x22>
 800d0e8:	07d9      	lsls	r1, r3, #31
 800d0ea:	d421      	bmi.n	800d130 <__lo0bits+0x52>
 800d0ec:	0798      	lsls	r0, r3, #30
 800d0ee:	bf49      	itett	mi
 800d0f0:	085b      	lsrmi	r3, r3, #1
 800d0f2:	089b      	lsrpl	r3, r3, #2
 800d0f4:	2001      	movmi	r0, #1
 800d0f6:	6013      	strmi	r3, [r2, #0]
 800d0f8:	bf5c      	itt	pl
 800d0fa:	6013      	strpl	r3, [r2, #0]
 800d0fc:	2002      	movpl	r0, #2
 800d0fe:	4770      	bx	lr
 800d100:	b299      	uxth	r1, r3
 800d102:	b909      	cbnz	r1, 800d108 <__lo0bits+0x2a>
 800d104:	0c1b      	lsrs	r3, r3, #16
 800d106:	2010      	movs	r0, #16
 800d108:	b2d9      	uxtb	r1, r3
 800d10a:	b909      	cbnz	r1, 800d110 <__lo0bits+0x32>
 800d10c:	3008      	adds	r0, #8
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	0719      	lsls	r1, r3, #28
 800d112:	bf04      	itt	eq
 800d114:	091b      	lsreq	r3, r3, #4
 800d116:	3004      	addeq	r0, #4
 800d118:	0799      	lsls	r1, r3, #30
 800d11a:	bf04      	itt	eq
 800d11c:	089b      	lsreq	r3, r3, #2
 800d11e:	3002      	addeq	r0, #2
 800d120:	07d9      	lsls	r1, r3, #31
 800d122:	d403      	bmi.n	800d12c <__lo0bits+0x4e>
 800d124:	085b      	lsrs	r3, r3, #1
 800d126:	f100 0001 	add.w	r0, r0, #1
 800d12a:	d003      	beq.n	800d134 <__lo0bits+0x56>
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	4770      	bx	lr
 800d130:	2000      	movs	r0, #0
 800d132:	4770      	bx	lr
 800d134:	2020      	movs	r0, #32
 800d136:	4770      	bx	lr

0800d138 <__i2b>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	460c      	mov	r4, r1
 800d13c:	2101      	movs	r1, #1
 800d13e:	f7ff ff07 	bl	800cf50 <_Balloc>
 800d142:	4602      	mov	r2, r0
 800d144:	b928      	cbnz	r0, 800d152 <__i2b+0x1a>
 800d146:	4b05      	ldr	r3, [pc, #20]	@ (800d15c <__i2b+0x24>)
 800d148:	4805      	ldr	r0, [pc, #20]	@ (800d160 <__i2b+0x28>)
 800d14a:	f240 1145 	movw	r1, #325	@ 0x145
 800d14e:	f7fe ff89 	bl	800c064 <__assert_func>
 800d152:	2301      	movs	r3, #1
 800d154:	6144      	str	r4, [r0, #20]
 800d156:	6103      	str	r3, [r0, #16]
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	bf00      	nop
 800d15c:	0800e184 	.word	0x0800e184
 800d160:	0800e195 	.word	0x0800e195

0800d164 <__multiply>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	4617      	mov	r7, r2
 800d16a:	690a      	ldr	r2, [r1, #16]
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	429a      	cmp	r2, r3
 800d170:	bfa8      	it	ge
 800d172:	463b      	movge	r3, r7
 800d174:	4689      	mov	r9, r1
 800d176:	bfa4      	itt	ge
 800d178:	460f      	movge	r7, r1
 800d17a:	4699      	movge	r9, r3
 800d17c:	693d      	ldr	r5, [r7, #16]
 800d17e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	eb05 060a 	add.w	r6, r5, sl
 800d18a:	42b3      	cmp	r3, r6
 800d18c:	b085      	sub	sp, #20
 800d18e:	bfb8      	it	lt
 800d190:	3101      	addlt	r1, #1
 800d192:	f7ff fedd 	bl	800cf50 <_Balloc>
 800d196:	b930      	cbnz	r0, 800d1a6 <__multiply+0x42>
 800d198:	4602      	mov	r2, r0
 800d19a:	4b41      	ldr	r3, [pc, #260]	@ (800d2a0 <__multiply+0x13c>)
 800d19c:	4841      	ldr	r0, [pc, #260]	@ (800d2a4 <__multiply+0x140>)
 800d19e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d1a2:	f7fe ff5f 	bl	800c064 <__assert_func>
 800d1a6:	f100 0414 	add.w	r4, r0, #20
 800d1aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d1ae:	4623      	mov	r3, r4
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4573      	cmp	r3, lr
 800d1b4:	d320      	bcc.n	800d1f8 <__multiply+0x94>
 800d1b6:	f107 0814 	add.w	r8, r7, #20
 800d1ba:	f109 0114 	add.w	r1, r9, #20
 800d1be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d1c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d1c6:	9302      	str	r3, [sp, #8]
 800d1c8:	1beb      	subs	r3, r5, r7
 800d1ca:	3b15      	subs	r3, #21
 800d1cc:	f023 0303 	bic.w	r3, r3, #3
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	3715      	adds	r7, #21
 800d1d4:	42bd      	cmp	r5, r7
 800d1d6:	bf38      	it	cc
 800d1d8:	2304      	movcc	r3, #4
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	9b02      	ldr	r3, [sp, #8]
 800d1de:	9103      	str	r1, [sp, #12]
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	d80c      	bhi.n	800d1fe <__multiply+0x9a>
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	dd03      	ble.n	800d1f0 <__multiply+0x8c>
 800d1e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d055      	beq.n	800d29c <__multiply+0x138>
 800d1f0:	6106      	str	r6, [r0, #16]
 800d1f2:	b005      	add	sp, #20
 800d1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f8:	f843 2b04 	str.w	r2, [r3], #4
 800d1fc:	e7d9      	b.n	800d1b2 <__multiply+0x4e>
 800d1fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800d202:	f1ba 0f00 	cmp.w	sl, #0
 800d206:	d01f      	beq.n	800d248 <__multiply+0xe4>
 800d208:	46c4      	mov	ip, r8
 800d20a:	46a1      	mov	r9, r4
 800d20c:	2700      	movs	r7, #0
 800d20e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d212:	f8d9 3000 	ldr.w	r3, [r9]
 800d216:	fa1f fb82 	uxth.w	fp, r2
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d220:	443b      	add	r3, r7
 800d222:	f8d9 7000 	ldr.w	r7, [r9]
 800d226:	0c12      	lsrs	r2, r2, #16
 800d228:	0c3f      	lsrs	r7, r7, #16
 800d22a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d22e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d232:	b29b      	uxth	r3, r3
 800d234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d238:	4565      	cmp	r5, ip
 800d23a:	f849 3b04 	str.w	r3, [r9], #4
 800d23e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d242:	d8e4      	bhi.n	800d20e <__multiply+0xaa>
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	50e7      	str	r7, [r4, r3]
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d24e:	3104      	adds	r1, #4
 800d250:	f1b9 0f00 	cmp.w	r9, #0
 800d254:	d020      	beq.n	800d298 <__multiply+0x134>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4647      	mov	r7, r8
 800d25a:	46a4      	mov	ip, r4
 800d25c:	f04f 0a00 	mov.w	sl, #0
 800d260:	f8b7 b000 	ldrh.w	fp, [r7]
 800d264:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d268:	fb09 220b 	mla	r2, r9, fp, r2
 800d26c:	4452      	add	r2, sl
 800d26e:	b29b      	uxth	r3, r3
 800d270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d274:	f84c 3b04 	str.w	r3, [ip], #4
 800d278:	f857 3b04 	ldr.w	r3, [r7], #4
 800d27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d280:	f8bc 3000 	ldrh.w	r3, [ip]
 800d284:	fb09 330a 	mla	r3, r9, sl, r3
 800d288:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d28c:	42bd      	cmp	r5, r7
 800d28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d292:	d8e5      	bhi.n	800d260 <__multiply+0xfc>
 800d294:	9a01      	ldr	r2, [sp, #4]
 800d296:	50a3      	str	r3, [r4, r2]
 800d298:	3404      	adds	r4, #4
 800d29a:	e79f      	b.n	800d1dc <__multiply+0x78>
 800d29c:	3e01      	subs	r6, #1
 800d29e:	e7a1      	b.n	800d1e4 <__multiply+0x80>
 800d2a0:	0800e184 	.word	0x0800e184
 800d2a4:	0800e195 	.word	0x0800e195

0800d2a8 <__pow5mult>:
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	f012 0203 	ands.w	r2, r2, #3
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	460e      	mov	r6, r1
 800d2b6:	d007      	beq.n	800d2c8 <__pow5mult+0x20>
 800d2b8:	4c25      	ldr	r4, [pc, #148]	@ (800d350 <__pow5mult+0xa8>)
 800d2ba:	3a01      	subs	r2, #1
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2c2:	f7ff fea7 	bl	800d014 <__multadd>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	10ad      	asrs	r5, r5, #2
 800d2ca:	d03d      	beq.n	800d348 <__pow5mult+0xa0>
 800d2cc:	69fc      	ldr	r4, [r7, #28]
 800d2ce:	b97c      	cbnz	r4, 800d2f0 <__pow5mult+0x48>
 800d2d0:	2010      	movs	r0, #16
 800d2d2:	f7ff fd87 	bl	800cde4 <malloc>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	61f8      	str	r0, [r7, #28]
 800d2da:	b928      	cbnz	r0, 800d2e8 <__pow5mult+0x40>
 800d2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d354 <__pow5mult+0xac>)
 800d2de:	481e      	ldr	r0, [pc, #120]	@ (800d358 <__pow5mult+0xb0>)
 800d2e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2e4:	f7fe febe 	bl	800c064 <__assert_func>
 800d2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2ec:	6004      	str	r4, [r0, #0]
 800d2ee:	60c4      	str	r4, [r0, #12]
 800d2f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2f8:	b94c      	cbnz	r4, 800d30e <__pow5mult+0x66>
 800d2fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d2fe:	4638      	mov	r0, r7
 800d300:	f7ff ff1a 	bl	800d138 <__i2b>
 800d304:	2300      	movs	r3, #0
 800d306:	f8c8 0008 	str.w	r0, [r8, #8]
 800d30a:	4604      	mov	r4, r0
 800d30c:	6003      	str	r3, [r0, #0]
 800d30e:	f04f 0900 	mov.w	r9, #0
 800d312:	07eb      	lsls	r3, r5, #31
 800d314:	d50a      	bpl.n	800d32c <__pow5mult+0x84>
 800d316:	4631      	mov	r1, r6
 800d318:	4622      	mov	r2, r4
 800d31a:	4638      	mov	r0, r7
 800d31c:	f7ff ff22 	bl	800d164 <__multiply>
 800d320:	4631      	mov	r1, r6
 800d322:	4680      	mov	r8, r0
 800d324:	4638      	mov	r0, r7
 800d326:	f7ff fe53 	bl	800cfd0 <_Bfree>
 800d32a:	4646      	mov	r6, r8
 800d32c:	106d      	asrs	r5, r5, #1
 800d32e:	d00b      	beq.n	800d348 <__pow5mult+0xa0>
 800d330:	6820      	ldr	r0, [r4, #0]
 800d332:	b938      	cbnz	r0, 800d344 <__pow5mult+0x9c>
 800d334:	4622      	mov	r2, r4
 800d336:	4621      	mov	r1, r4
 800d338:	4638      	mov	r0, r7
 800d33a:	f7ff ff13 	bl	800d164 <__multiply>
 800d33e:	6020      	str	r0, [r4, #0]
 800d340:	f8c0 9000 	str.w	r9, [r0]
 800d344:	4604      	mov	r4, r0
 800d346:	e7e4      	b.n	800d312 <__pow5mult+0x6a>
 800d348:	4630      	mov	r0, r6
 800d34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d34e:	bf00      	nop
 800d350:	0800e20c 	.word	0x0800e20c
 800d354:	0800e040 	.word	0x0800e040
 800d358:	0800e195 	.word	0x0800e195

0800d35c <__lshift>:
 800d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d360:	460c      	mov	r4, r1
 800d362:	6849      	ldr	r1, [r1, #4]
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d36a:	68a3      	ldr	r3, [r4, #8]
 800d36c:	4607      	mov	r7, r0
 800d36e:	4691      	mov	r9, r2
 800d370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d374:	f108 0601 	add.w	r6, r8, #1
 800d378:	42b3      	cmp	r3, r6
 800d37a:	db0b      	blt.n	800d394 <__lshift+0x38>
 800d37c:	4638      	mov	r0, r7
 800d37e:	f7ff fde7 	bl	800cf50 <_Balloc>
 800d382:	4605      	mov	r5, r0
 800d384:	b948      	cbnz	r0, 800d39a <__lshift+0x3e>
 800d386:	4602      	mov	r2, r0
 800d388:	4b28      	ldr	r3, [pc, #160]	@ (800d42c <__lshift+0xd0>)
 800d38a:	4829      	ldr	r0, [pc, #164]	@ (800d430 <__lshift+0xd4>)
 800d38c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d390:	f7fe fe68 	bl	800c064 <__assert_func>
 800d394:	3101      	adds	r1, #1
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	e7ee      	b.n	800d378 <__lshift+0x1c>
 800d39a:	2300      	movs	r3, #0
 800d39c:	f100 0114 	add.w	r1, r0, #20
 800d3a0:	f100 0210 	add.w	r2, r0, #16
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	4553      	cmp	r3, sl
 800d3a8:	db33      	blt.n	800d412 <__lshift+0xb6>
 800d3aa:	6920      	ldr	r0, [r4, #16]
 800d3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3b0:	f104 0314 	add.w	r3, r4, #20
 800d3b4:	f019 091f 	ands.w	r9, r9, #31
 800d3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3c0:	d02b      	beq.n	800d41a <__lshift+0xbe>
 800d3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d3c6:	468a      	mov	sl, r1
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	6818      	ldr	r0, [r3, #0]
 800d3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d3d0:	4310      	orrs	r0, r2
 800d3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3da:	459c      	cmp	ip, r3
 800d3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3e0:	d8f3      	bhi.n	800d3ca <__lshift+0x6e>
 800d3e2:	ebac 0304 	sub.w	r3, ip, r4
 800d3e6:	3b15      	subs	r3, #21
 800d3e8:	f023 0303 	bic.w	r3, r3, #3
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	f104 0015 	add.w	r0, r4, #21
 800d3f2:	4560      	cmp	r0, ip
 800d3f4:	bf88      	it	hi
 800d3f6:	2304      	movhi	r3, #4
 800d3f8:	50ca      	str	r2, [r1, r3]
 800d3fa:	b10a      	cbz	r2, 800d400 <__lshift+0xa4>
 800d3fc:	f108 0602 	add.w	r6, r8, #2
 800d400:	3e01      	subs	r6, #1
 800d402:	4638      	mov	r0, r7
 800d404:	612e      	str	r6, [r5, #16]
 800d406:	4621      	mov	r1, r4
 800d408:	f7ff fde2 	bl	800cfd0 <_Bfree>
 800d40c:	4628      	mov	r0, r5
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	f842 0f04 	str.w	r0, [r2, #4]!
 800d416:	3301      	adds	r3, #1
 800d418:	e7c5      	b.n	800d3a6 <__lshift+0x4a>
 800d41a:	3904      	subs	r1, #4
 800d41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d420:	f841 2f04 	str.w	r2, [r1, #4]!
 800d424:	459c      	cmp	ip, r3
 800d426:	d8f9      	bhi.n	800d41c <__lshift+0xc0>
 800d428:	e7ea      	b.n	800d400 <__lshift+0xa4>
 800d42a:	bf00      	nop
 800d42c:	0800e184 	.word	0x0800e184
 800d430:	0800e195 	.word	0x0800e195

0800d434 <__mcmp>:
 800d434:	690a      	ldr	r2, [r1, #16]
 800d436:	4603      	mov	r3, r0
 800d438:	6900      	ldr	r0, [r0, #16]
 800d43a:	1a80      	subs	r0, r0, r2
 800d43c:	b530      	push	{r4, r5, lr}
 800d43e:	d10e      	bne.n	800d45e <__mcmp+0x2a>
 800d440:	3314      	adds	r3, #20
 800d442:	3114      	adds	r1, #20
 800d444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d454:	4295      	cmp	r5, r2
 800d456:	d003      	beq.n	800d460 <__mcmp+0x2c>
 800d458:	d205      	bcs.n	800d466 <__mcmp+0x32>
 800d45a:	f04f 30ff 	mov.w	r0, #4294967295
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	42a3      	cmp	r3, r4
 800d462:	d3f3      	bcc.n	800d44c <__mcmp+0x18>
 800d464:	e7fb      	b.n	800d45e <__mcmp+0x2a>
 800d466:	2001      	movs	r0, #1
 800d468:	e7f9      	b.n	800d45e <__mcmp+0x2a>
	...

0800d46c <__mdiff>:
 800d46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	4689      	mov	r9, r1
 800d472:	4606      	mov	r6, r0
 800d474:	4611      	mov	r1, r2
 800d476:	4648      	mov	r0, r9
 800d478:	4614      	mov	r4, r2
 800d47a:	f7ff ffdb 	bl	800d434 <__mcmp>
 800d47e:	1e05      	subs	r5, r0, #0
 800d480:	d112      	bne.n	800d4a8 <__mdiff+0x3c>
 800d482:	4629      	mov	r1, r5
 800d484:	4630      	mov	r0, r6
 800d486:	f7ff fd63 	bl	800cf50 <_Balloc>
 800d48a:	4602      	mov	r2, r0
 800d48c:	b928      	cbnz	r0, 800d49a <__mdiff+0x2e>
 800d48e:	4b3f      	ldr	r3, [pc, #252]	@ (800d58c <__mdiff+0x120>)
 800d490:	f240 2137 	movw	r1, #567	@ 0x237
 800d494:	483e      	ldr	r0, [pc, #248]	@ (800d590 <__mdiff+0x124>)
 800d496:	f7fe fde5 	bl	800c064 <__assert_func>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	b003      	add	sp, #12
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a8:	bfbc      	itt	lt
 800d4aa:	464b      	movlt	r3, r9
 800d4ac:	46a1      	movlt	r9, r4
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d4b4:	bfba      	itte	lt
 800d4b6:	461c      	movlt	r4, r3
 800d4b8:	2501      	movlt	r5, #1
 800d4ba:	2500      	movge	r5, #0
 800d4bc:	f7ff fd48 	bl	800cf50 <_Balloc>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	b918      	cbnz	r0, 800d4cc <__mdiff+0x60>
 800d4c4:	4b31      	ldr	r3, [pc, #196]	@ (800d58c <__mdiff+0x120>)
 800d4c6:	f240 2145 	movw	r1, #581	@ 0x245
 800d4ca:	e7e3      	b.n	800d494 <__mdiff+0x28>
 800d4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4d0:	6926      	ldr	r6, [r4, #16]
 800d4d2:	60c5      	str	r5, [r0, #12]
 800d4d4:	f109 0310 	add.w	r3, r9, #16
 800d4d8:	f109 0514 	add.w	r5, r9, #20
 800d4dc:	f104 0e14 	add.w	lr, r4, #20
 800d4e0:	f100 0b14 	add.w	fp, r0, #20
 800d4e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	46d9      	mov	r9, fp
 800d4f0:	f04f 0c00 	mov.w	ip, #0
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	fa1f f38a 	uxth.w	r3, sl
 800d504:	4619      	mov	r1, r3
 800d506:	b283      	uxth	r3, r0
 800d508:	1acb      	subs	r3, r1, r3
 800d50a:	0c00      	lsrs	r0, r0, #16
 800d50c:	4463      	add	r3, ip
 800d50e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d516:	b29b      	uxth	r3, r3
 800d518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d51c:	4576      	cmp	r6, lr
 800d51e:	f849 3b04 	str.w	r3, [r9], #4
 800d522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d526:	d8e5      	bhi.n	800d4f4 <__mdiff+0x88>
 800d528:	1b33      	subs	r3, r6, r4
 800d52a:	3b15      	subs	r3, #21
 800d52c:	f023 0303 	bic.w	r3, r3, #3
 800d530:	3415      	adds	r4, #21
 800d532:	3304      	adds	r3, #4
 800d534:	42a6      	cmp	r6, r4
 800d536:	bf38      	it	cc
 800d538:	2304      	movcc	r3, #4
 800d53a:	441d      	add	r5, r3
 800d53c:	445b      	add	r3, fp
 800d53e:	461e      	mov	r6, r3
 800d540:	462c      	mov	r4, r5
 800d542:	4544      	cmp	r4, r8
 800d544:	d30e      	bcc.n	800d564 <__mdiff+0xf8>
 800d546:	f108 0103 	add.w	r1, r8, #3
 800d54a:	1b49      	subs	r1, r1, r5
 800d54c:	f021 0103 	bic.w	r1, r1, #3
 800d550:	3d03      	subs	r5, #3
 800d552:	45a8      	cmp	r8, r5
 800d554:	bf38      	it	cc
 800d556:	2100      	movcc	r1, #0
 800d558:	440b      	add	r3, r1
 800d55a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d55e:	b191      	cbz	r1, 800d586 <__mdiff+0x11a>
 800d560:	6117      	str	r7, [r2, #16]
 800d562:	e79d      	b.n	800d4a0 <__mdiff+0x34>
 800d564:	f854 1b04 	ldr.w	r1, [r4], #4
 800d568:	46e6      	mov	lr, ip
 800d56a:	0c08      	lsrs	r0, r1, #16
 800d56c:	fa1c fc81 	uxtah	ip, ip, r1
 800d570:	4471      	add	r1, lr
 800d572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d576:	b289      	uxth	r1, r1
 800d578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d57c:	f846 1b04 	str.w	r1, [r6], #4
 800d580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d584:	e7dd      	b.n	800d542 <__mdiff+0xd6>
 800d586:	3f01      	subs	r7, #1
 800d588:	e7e7      	b.n	800d55a <__mdiff+0xee>
 800d58a:	bf00      	nop
 800d58c:	0800e184 	.word	0x0800e184
 800d590:	0800e195 	.word	0x0800e195

0800d594 <__d2b>:
 800d594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d598:	460f      	mov	r7, r1
 800d59a:	2101      	movs	r1, #1
 800d59c:	ec59 8b10 	vmov	r8, r9, d0
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	f7ff fcd5 	bl	800cf50 <_Balloc>
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	b930      	cbnz	r0, 800d5b8 <__d2b+0x24>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	4b23      	ldr	r3, [pc, #140]	@ (800d63c <__d2b+0xa8>)
 800d5ae:	4824      	ldr	r0, [pc, #144]	@ (800d640 <__d2b+0xac>)
 800d5b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d5b4:	f7fe fd56 	bl	800c064 <__assert_func>
 800d5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5c0:	b10d      	cbz	r5, 800d5c6 <__d2b+0x32>
 800d5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800d5cc:	d023      	beq.n	800d616 <__d2b+0x82>
 800d5ce:	4668      	mov	r0, sp
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	f7ff fd84 	bl	800d0de <__lo0bits>
 800d5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5da:	b1d0      	cbz	r0, 800d612 <__d2b+0x7e>
 800d5dc:	f1c0 0320 	rsb	r3, r0, #32
 800d5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e4:	430b      	orrs	r3, r1
 800d5e6:	40c2      	lsrs	r2, r0
 800d5e8:	6163      	str	r3, [r4, #20]
 800d5ea:	9201      	str	r2, [sp, #4]
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	61a3      	str	r3, [r4, #24]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bf0c      	ite	eq
 800d5f4:	2201      	moveq	r2, #1
 800d5f6:	2202      	movne	r2, #2
 800d5f8:	6122      	str	r2, [r4, #16]
 800d5fa:	b1a5      	cbz	r5, 800d626 <__d2b+0x92>
 800d5fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d600:	4405      	add	r5, r0
 800d602:	603d      	str	r5, [r7, #0]
 800d604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d608:	6030      	str	r0, [r6, #0]
 800d60a:	4620      	mov	r0, r4
 800d60c:	b003      	add	sp, #12
 800d60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d612:	6161      	str	r1, [r4, #20]
 800d614:	e7ea      	b.n	800d5ec <__d2b+0x58>
 800d616:	a801      	add	r0, sp, #4
 800d618:	f7ff fd61 	bl	800d0de <__lo0bits>
 800d61c:	9b01      	ldr	r3, [sp, #4]
 800d61e:	6163      	str	r3, [r4, #20]
 800d620:	3020      	adds	r0, #32
 800d622:	2201      	movs	r2, #1
 800d624:	e7e8      	b.n	800d5f8 <__d2b+0x64>
 800d626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d62e:	6038      	str	r0, [r7, #0]
 800d630:	6918      	ldr	r0, [r3, #16]
 800d632:	f7ff fd35 	bl	800d0a0 <__hi0bits>
 800d636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d63a:	e7e5      	b.n	800d608 <__d2b+0x74>
 800d63c:	0800e184 	.word	0x0800e184
 800d640:	0800e195 	.word	0x0800e195

0800d644 <__sfputc_r>:
 800d644:	6893      	ldr	r3, [r2, #8]
 800d646:	3b01      	subs	r3, #1
 800d648:	2b00      	cmp	r3, #0
 800d64a:	b410      	push	{r4}
 800d64c:	6093      	str	r3, [r2, #8]
 800d64e:	da08      	bge.n	800d662 <__sfputc_r+0x1e>
 800d650:	6994      	ldr	r4, [r2, #24]
 800d652:	42a3      	cmp	r3, r4
 800d654:	db01      	blt.n	800d65a <__sfputc_r+0x16>
 800d656:	290a      	cmp	r1, #10
 800d658:	d103      	bne.n	800d662 <__sfputc_r+0x1e>
 800d65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d65e:	f000 b9f1 	b.w	800da44 <__swbuf_r>
 800d662:	6813      	ldr	r3, [r2, #0]
 800d664:	1c58      	adds	r0, r3, #1
 800d666:	6010      	str	r0, [r2, #0]
 800d668:	7019      	strb	r1, [r3, #0]
 800d66a:	4608      	mov	r0, r1
 800d66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <__sfputs_r>:
 800d672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d674:	4606      	mov	r6, r0
 800d676:	460f      	mov	r7, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	18d5      	adds	r5, r2, r3
 800d67c:	42ac      	cmp	r4, r5
 800d67e:	d101      	bne.n	800d684 <__sfputs_r+0x12>
 800d680:	2000      	movs	r0, #0
 800d682:	e007      	b.n	800d694 <__sfputs_r+0x22>
 800d684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d688:	463a      	mov	r2, r7
 800d68a:	4630      	mov	r0, r6
 800d68c:	f7ff ffda 	bl	800d644 <__sfputc_r>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	d1f3      	bne.n	800d67c <__sfputs_r+0xa>
 800d694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d698 <_vfiprintf_r>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	460d      	mov	r5, r1
 800d69e:	b09d      	sub	sp, #116	@ 0x74
 800d6a0:	4614      	mov	r4, r2
 800d6a2:	4698      	mov	r8, r3
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	b118      	cbz	r0, 800d6b0 <_vfiprintf_r+0x18>
 800d6a8:	6a03      	ldr	r3, [r0, #32]
 800d6aa:	b90b      	cbnz	r3, 800d6b0 <_vfiprintf_r+0x18>
 800d6ac:	f7fe fbc0 	bl	800be30 <__sinit>
 800d6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6b2:	07d9      	lsls	r1, r3, #31
 800d6b4:	d405      	bmi.n	800d6c2 <_vfiprintf_r+0x2a>
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	059a      	lsls	r2, r3, #22
 800d6ba:	d402      	bmi.n	800d6c2 <_vfiprintf_r+0x2a>
 800d6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6be:	f7fe fcc0 	bl	800c042 <__retarget_lock_acquire_recursive>
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	071b      	lsls	r3, r3, #28
 800d6c6:	d501      	bpl.n	800d6cc <_vfiprintf_r+0x34>
 800d6c8:	692b      	ldr	r3, [r5, #16]
 800d6ca:	b99b      	cbnz	r3, 800d6f4 <_vfiprintf_r+0x5c>
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f000 f9f6 	bl	800dac0 <__swsetup_r>
 800d6d4:	b170      	cbz	r0, 800d6f4 <_vfiprintf_r+0x5c>
 800d6d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6d8:	07dc      	lsls	r4, r3, #31
 800d6da:	d504      	bpl.n	800d6e6 <_vfiprintf_r+0x4e>
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e0:	b01d      	add	sp, #116	@ 0x74
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	89ab      	ldrh	r3, [r5, #12]
 800d6e8:	0598      	lsls	r0, r3, #22
 800d6ea:	d4f7      	bmi.n	800d6dc <_vfiprintf_r+0x44>
 800d6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ee:	f7fe fca9 	bl	800c044 <__retarget_lock_release_recursive>
 800d6f2:	e7f3      	b.n	800d6dc <_vfiprintf_r+0x44>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d702:	2330      	movs	r3, #48	@ 0x30
 800d704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d8b4 <_vfiprintf_r+0x21c>
 800d708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d70c:	f04f 0901 	mov.w	r9, #1
 800d710:	4623      	mov	r3, r4
 800d712:	469a      	mov	sl, r3
 800d714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d718:	b10a      	cbz	r2, 800d71e <_vfiprintf_r+0x86>
 800d71a:	2a25      	cmp	r2, #37	@ 0x25
 800d71c:	d1f9      	bne.n	800d712 <_vfiprintf_r+0x7a>
 800d71e:	ebba 0b04 	subs.w	fp, sl, r4
 800d722:	d00b      	beq.n	800d73c <_vfiprintf_r+0xa4>
 800d724:	465b      	mov	r3, fp
 800d726:	4622      	mov	r2, r4
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ffa1 	bl	800d672 <__sfputs_r>
 800d730:	3001      	adds	r0, #1
 800d732:	f000 80a7 	beq.w	800d884 <_vfiprintf_r+0x1ec>
 800d736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d738:	445a      	add	r2, fp
 800d73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d73c:	f89a 3000 	ldrb.w	r3, [sl]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 809f 	beq.w	800d884 <_vfiprintf_r+0x1ec>
 800d746:	2300      	movs	r3, #0
 800d748:	f04f 32ff 	mov.w	r2, #4294967295
 800d74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d750:	f10a 0a01 	add.w	sl, sl, #1
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	9307      	str	r3, [sp, #28]
 800d758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d75c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d75e:	4654      	mov	r4, sl
 800d760:	2205      	movs	r2, #5
 800d762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d766:	4853      	ldr	r0, [pc, #332]	@ (800d8b4 <_vfiprintf_r+0x21c>)
 800d768:	f7f2 fd32 	bl	80001d0 <memchr>
 800d76c:	9a04      	ldr	r2, [sp, #16]
 800d76e:	b9d8      	cbnz	r0, 800d7a8 <_vfiprintf_r+0x110>
 800d770:	06d1      	lsls	r1, r2, #27
 800d772:	bf44      	itt	mi
 800d774:	2320      	movmi	r3, #32
 800d776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d77a:	0713      	lsls	r3, r2, #28
 800d77c:	bf44      	itt	mi
 800d77e:	232b      	movmi	r3, #43	@ 0x2b
 800d780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d784:	f89a 3000 	ldrb.w	r3, [sl]
 800d788:	2b2a      	cmp	r3, #42	@ 0x2a
 800d78a:	d015      	beq.n	800d7b8 <_vfiprintf_r+0x120>
 800d78c:	9a07      	ldr	r2, [sp, #28]
 800d78e:	4654      	mov	r4, sl
 800d790:	2000      	movs	r0, #0
 800d792:	f04f 0c0a 	mov.w	ip, #10
 800d796:	4621      	mov	r1, r4
 800d798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d79c:	3b30      	subs	r3, #48	@ 0x30
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d94b      	bls.n	800d83a <_vfiprintf_r+0x1a2>
 800d7a2:	b1b0      	cbz	r0, 800d7d2 <_vfiprintf_r+0x13a>
 800d7a4:	9207      	str	r2, [sp, #28]
 800d7a6:	e014      	b.n	800d7d2 <_vfiprintf_r+0x13a>
 800d7a8:	eba0 0308 	sub.w	r3, r0, r8
 800d7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	46a2      	mov	sl, r4
 800d7b6:	e7d2      	b.n	800d75e <_vfiprintf_r+0xc6>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	1d19      	adds	r1, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	9103      	str	r1, [sp, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bfbb      	ittet	lt
 800d7c4:	425b      	neglt	r3, r3
 800d7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ca:	9307      	strge	r3, [sp, #28]
 800d7cc:	9307      	strlt	r3, [sp, #28]
 800d7ce:	bfb8      	it	lt
 800d7d0:	9204      	strlt	r2, [sp, #16]
 800d7d2:	7823      	ldrb	r3, [r4, #0]
 800d7d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7d6:	d10a      	bne.n	800d7ee <_vfiprintf_r+0x156>
 800d7d8:	7863      	ldrb	r3, [r4, #1]
 800d7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7dc:	d132      	bne.n	800d844 <_vfiprintf_r+0x1ac>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	1d1a      	adds	r2, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	9203      	str	r2, [sp, #12]
 800d7e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7ea:	3402      	adds	r4, #2
 800d7ec:	9305      	str	r3, [sp, #20]
 800d7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8c4 <_vfiprintf_r+0x22c>
 800d7f2:	7821      	ldrb	r1, [r4, #0]
 800d7f4:	2203      	movs	r2, #3
 800d7f6:	4650      	mov	r0, sl
 800d7f8:	f7f2 fcea 	bl	80001d0 <memchr>
 800d7fc:	b138      	cbz	r0, 800d80e <_vfiprintf_r+0x176>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	eba0 000a 	sub.w	r0, r0, sl
 800d804:	2240      	movs	r2, #64	@ 0x40
 800d806:	4082      	lsls	r2, r0
 800d808:	4313      	orrs	r3, r2
 800d80a:	3401      	adds	r4, #1
 800d80c:	9304      	str	r3, [sp, #16]
 800d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d812:	4829      	ldr	r0, [pc, #164]	@ (800d8b8 <_vfiprintf_r+0x220>)
 800d814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d818:	2206      	movs	r2, #6
 800d81a:	f7f2 fcd9 	bl	80001d0 <memchr>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d03f      	beq.n	800d8a2 <_vfiprintf_r+0x20a>
 800d822:	4b26      	ldr	r3, [pc, #152]	@ (800d8bc <_vfiprintf_r+0x224>)
 800d824:	bb1b      	cbnz	r3, 800d86e <_vfiprintf_r+0x1d6>
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	3307      	adds	r3, #7
 800d82a:	f023 0307 	bic.w	r3, r3, #7
 800d82e:	3308      	adds	r3, #8
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d834:	443b      	add	r3, r7
 800d836:	9309      	str	r3, [sp, #36]	@ 0x24
 800d838:	e76a      	b.n	800d710 <_vfiprintf_r+0x78>
 800d83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d83e:	460c      	mov	r4, r1
 800d840:	2001      	movs	r0, #1
 800d842:	e7a8      	b.n	800d796 <_vfiprintf_r+0xfe>
 800d844:	2300      	movs	r3, #0
 800d846:	3401      	adds	r4, #1
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	4619      	mov	r1, r3
 800d84c:	f04f 0c0a 	mov.w	ip, #10
 800d850:	4620      	mov	r0, r4
 800d852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d856:	3a30      	subs	r2, #48	@ 0x30
 800d858:	2a09      	cmp	r2, #9
 800d85a:	d903      	bls.n	800d864 <_vfiprintf_r+0x1cc>
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0c6      	beq.n	800d7ee <_vfiprintf_r+0x156>
 800d860:	9105      	str	r1, [sp, #20]
 800d862:	e7c4      	b.n	800d7ee <_vfiprintf_r+0x156>
 800d864:	fb0c 2101 	mla	r1, ip, r1, r2
 800d868:	4604      	mov	r4, r0
 800d86a:	2301      	movs	r3, #1
 800d86c:	e7f0      	b.n	800d850 <_vfiprintf_r+0x1b8>
 800d86e:	ab03      	add	r3, sp, #12
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	462a      	mov	r2, r5
 800d874:	4b12      	ldr	r3, [pc, #72]	@ (800d8c0 <_vfiprintf_r+0x228>)
 800d876:	a904      	add	r1, sp, #16
 800d878:	4630      	mov	r0, r6
 800d87a:	f7fd fe97 	bl	800b5ac <_printf_float>
 800d87e:	4607      	mov	r7, r0
 800d880:	1c78      	adds	r0, r7, #1
 800d882:	d1d6      	bne.n	800d832 <_vfiprintf_r+0x19a>
 800d884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d886:	07d9      	lsls	r1, r3, #31
 800d888:	d405      	bmi.n	800d896 <_vfiprintf_r+0x1fe>
 800d88a:	89ab      	ldrh	r3, [r5, #12]
 800d88c:	059a      	lsls	r2, r3, #22
 800d88e:	d402      	bmi.n	800d896 <_vfiprintf_r+0x1fe>
 800d890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d892:	f7fe fbd7 	bl	800c044 <__retarget_lock_release_recursive>
 800d896:	89ab      	ldrh	r3, [r5, #12]
 800d898:	065b      	lsls	r3, r3, #25
 800d89a:	f53f af1f 	bmi.w	800d6dc <_vfiprintf_r+0x44>
 800d89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8a0:	e71e      	b.n	800d6e0 <_vfiprintf_r+0x48>
 800d8a2:	ab03      	add	r3, sp, #12
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	462a      	mov	r2, r5
 800d8a8:	4b05      	ldr	r3, [pc, #20]	@ (800d8c0 <_vfiprintf_r+0x228>)
 800d8aa:	a904      	add	r1, sp, #16
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f7fe f915 	bl	800badc <_printf_i>
 800d8b2:	e7e4      	b.n	800d87e <_vfiprintf_r+0x1e6>
 800d8b4:	0800e1ee 	.word	0x0800e1ee
 800d8b8:	0800e1f8 	.word	0x0800e1f8
 800d8bc:	0800b5ad 	.word	0x0800b5ad
 800d8c0:	0800d673 	.word	0x0800d673
 800d8c4:	0800e1f4 	.word	0x0800e1f4

0800d8c8 <__sflush_r>:
 800d8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d0:	0716      	lsls	r6, r2, #28
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	d454      	bmi.n	800d982 <__sflush_r+0xba>
 800d8d8:	684b      	ldr	r3, [r1, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	dc02      	bgt.n	800d8e4 <__sflush_r+0x1c>
 800d8de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	dd48      	ble.n	800d976 <__sflush_r+0xae>
 800d8e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	d045      	beq.n	800d976 <__sflush_r+0xae>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8f0:	682f      	ldr	r7, [r5, #0]
 800d8f2:	6a21      	ldr	r1, [r4, #32]
 800d8f4:	602b      	str	r3, [r5, #0]
 800d8f6:	d030      	beq.n	800d95a <__sflush_r+0x92>
 800d8f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	0759      	lsls	r1, r3, #29
 800d8fe:	d505      	bpl.n	800d90c <__sflush_r+0x44>
 800d900:	6863      	ldr	r3, [r4, #4]
 800d902:	1ad2      	subs	r2, r2, r3
 800d904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d906:	b10b      	cbz	r3, 800d90c <__sflush_r+0x44>
 800d908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d90a:	1ad2      	subs	r2, r2, r3
 800d90c:	2300      	movs	r3, #0
 800d90e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d910:	6a21      	ldr	r1, [r4, #32]
 800d912:	4628      	mov	r0, r5
 800d914:	47b0      	blx	r6
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	d106      	bne.n	800d92a <__sflush_r+0x62>
 800d91c:	6829      	ldr	r1, [r5, #0]
 800d91e:	291d      	cmp	r1, #29
 800d920:	d82b      	bhi.n	800d97a <__sflush_r+0xb2>
 800d922:	4a2a      	ldr	r2, [pc, #168]	@ (800d9cc <__sflush_r+0x104>)
 800d924:	40ca      	lsrs	r2, r1
 800d926:	07d6      	lsls	r6, r2, #31
 800d928:	d527      	bpl.n	800d97a <__sflush_r+0xb2>
 800d92a:	2200      	movs	r2, #0
 800d92c:	6062      	str	r2, [r4, #4]
 800d92e:	04d9      	lsls	r1, r3, #19
 800d930:	6922      	ldr	r2, [r4, #16]
 800d932:	6022      	str	r2, [r4, #0]
 800d934:	d504      	bpl.n	800d940 <__sflush_r+0x78>
 800d936:	1c42      	adds	r2, r0, #1
 800d938:	d101      	bne.n	800d93e <__sflush_r+0x76>
 800d93a:	682b      	ldr	r3, [r5, #0]
 800d93c:	b903      	cbnz	r3, 800d940 <__sflush_r+0x78>
 800d93e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d942:	602f      	str	r7, [r5, #0]
 800d944:	b1b9      	cbz	r1, 800d976 <__sflush_r+0xae>
 800d946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d94a:	4299      	cmp	r1, r3
 800d94c:	d002      	beq.n	800d954 <__sflush_r+0x8c>
 800d94e:	4628      	mov	r0, r5
 800d950:	f7ff f9fe 	bl	800cd50 <_free_r>
 800d954:	2300      	movs	r3, #0
 800d956:	6363      	str	r3, [r4, #52]	@ 0x34
 800d958:	e00d      	b.n	800d976 <__sflush_r+0xae>
 800d95a:	2301      	movs	r3, #1
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b0      	blx	r6
 800d960:	4602      	mov	r2, r0
 800d962:	1c50      	adds	r0, r2, #1
 800d964:	d1c9      	bne.n	800d8fa <__sflush_r+0x32>
 800d966:	682b      	ldr	r3, [r5, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0c6      	beq.n	800d8fa <__sflush_r+0x32>
 800d96c:	2b1d      	cmp	r3, #29
 800d96e:	d001      	beq.n	800d974 <__sflush_r+0xac>
 800d970:	2b16      	cmp	r3, #22
 800d972:	d11e      	bne.n	800d9b2 <__sflush_r+0xea>
 800d974:	602f      	str	r7, [r5, #0]
 800d976:	2000      	movs	r0, #0
 800d978:	e022      	b.n	800d9c0 <__sflush_r+0xf8>
 800d97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97e:	b21b      	sxth	r3, r3
 800d980:	e01b      	b.n	800d9ba <__sflush_r+0xf2>
 800d982:	690f      	ldr	r7, [r1, #16]
 800d984:	2f00      	cmp	r7, #0
 800d986:	d0f6      	beq.n	800d976 <__sflush_r+0xae>
 800d988:	0793      	lsls	r3, r2, #30
 800d98a:	680e      	ldr	r6, [r1, #0]
 800d98c:	bf08      	it	eq
 800d98e:	694b      	ldreq	r3, [r1, #20]
 800d990:	600f      	str	r7, [r1, #0]
 800d992:	bf18      	it	ne
 800d994:	2300      	movne	r3, #0
 800d996:	eba6 0807 	sub.w	r8, r6, r7
 800d99a:	608b      	str	r3, [r1, #8]
 800d99c:	f1b8 0f00 	cmp.w	r8, #0
 800d9a0:	dde9      	ble.n	800d976 <__sflush_r+0xae>
 800d9a2:	6a21      	ldr	r1, [r4, #32]
 800d9a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d9a6:	4643      	mov	r3, r8
 800d9a8:	463a      	mov	r2, r7
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	47b0      	blx	r6
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	dc08      	bgt.n	800d9c4 <__sflush_r+0xfc>
 800d9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9ba:	81a3      	strh	r3, [r4, #12]
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c4:	4407      	add	r7, r0
 800d9c6:	eba8 0800 	sub.w	r8, r8, r0
 800d9ca:	e7e7      	b.n	800d99c <__sflush_r+0xd4>
 800d9cc:	20400001 	.word	0x20400001

0800d9d0 <_fflush_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	690b      	ldr	r3, [r1, #16]
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	b913      	cbnz	r3, 800d9e0 <_fflush_r+0x10>
 800d9da:	2500      	movs	r5, #0
 800d9dc:	4628      	mov	r0, r5
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	b118      	cbz	r0, 800d9ea <_fflush_r+0x1a>
 800d9e2:	6a03      	ldr	r3, [r0, #32]
 800d9e4:	b90b      	cbnz	r3, 800d9ea <_fflush_r+0x1a>
 800d9e6:	f7fe fa23 	bl	800be30 <__sinit>
 800d9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0f3      	beq.n	800d9da <_fflush_r+0xa>
 800d9f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9f4:	07d0      	lsls	r0, r2, #31
 800d9f6:	d404      	bmi.n	800da02 <_fflush_r+0x32>
 800d9f8:	0599      	lsls	r1, r3, #22
 800d9fa:	d402      	bmi.n	800da02 <_fflush_r+0x32>
 800d9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9fe:	f7fe fb20 	bl	800c042 <__retarget_lock_acquire_recursive>
 800da02:	4628      	mov	r0, r5
 800da04:	4621      	mov	r1, r4
 800da06:	f7ff ff5f 	bl	800d8c8 <__sflush_r>
 800da0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da0c:	07da      	lsls	r2, r3, #31
 800da0e:	4605      	mov	r5, r0
 800da10:	d4e4      	bmi.n	800d9dc <_fflush_r+0xc>
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	059b      	lsls	r3, r3, #22
 800da16:	d4e1      	bmi.n	800d9dc <_fflush_r+0xc>
 800da18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da1a:	f7fe fb13 	bl	800c044 <__retarget_lock_release_recursive>
 800da1e:	e7dd      	b.n	800d9dc <_fflush_r+0xc>

0800da20 <fiprintf>:
 800da20:	b40e      	push	{r1, r2, r3}
 800da22:	b503      	push	{r0, r1, lr}
 800da24:	4601      	mov	r1, r0
 800da26:	ab03      	add	r3, sp, #12
 800da28:	4805      	ldr	r0, [pc, #20]	@ (800da40 <fiprintf+0x20>)
 800da2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da2e:	6800      	ldr	r0, [r0, #0]
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	f7ff fe31 	bl	800d698 <_vfiprintf_r>
 800da36:	b002      	add	sp, #8
 800da38:	f85d eb04 	ldr.w	lr, [sp], #4
 800da3c:	b003      	add	sp, #12
 800da3e:	4770      	bx	lr
 800da40:	20000030 	.word	0x20000030

0800da44 <__swbuf_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	460e      	mov	r6, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	4605      	mov	r5, r0
 800da4c:	b118      	cbz	r0, 800da56 <__swbuf_r+0x12>
 800da4e:	6a03      	ldr	r3, [r0, #32]
 800da50:	b90b      	cbnz	r3, 800da56 <__swbuf_r+0x12>
 800da52:	f7fe f9ed 	bl	800be30 <__sinit>
 800da56:	69a3      	ldr	r3, [r4, #24]
 800da58:	60a3      	str	r3, [r4, #8]
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	071a      	lsls	r2, r3, #28
 800da5e:	d501      	bpl.n	800da64 <__swbuf_r+0x20>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b943      	cbnz	r3, 800da76 <__swbuf_r+0x32>
 800da64:	4621      	mov	r1, r4
 800da66:	4628      	mov	r0, r5
 800da68:	f000 f82a 	bl	800dac0 <__swsetup_r>
 800da6c:	b118      	cbz	r0, 800da76 <__swbuf_r+0x32>
 800da6e:	f04f 37ff 	mov.w	r7, #4294967295
 800da72:	4638      	mov	r0, r7
 800da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	6922      	ldr	r2, [r4, #16]
 800da7a:	1a98      	subs	r0, r3, r2
 800da7c:	6963      	ldr	r3, [r4, #20]
 800da7e:	b2f6      	uxtb	r6, r6
 800da80:	4283      	cmp	r3, r0
 800da82:	4637      	mov	r7, r6
 800da84:	dc05      	bgt.n	800da92 <__swbuf_r+0x4e>
 800da86:	4621      	mov	r1, r4
 800da88:	4628      	mov	r0, r5
 800da8a:	f7ff ffa1 	bl	800d9d0 <_fflush_r>
 800da8e:	2800      	cmp	r0, #0
 800da90:	d1ed      	bne.n	800da6e <__swbuf_r+0x2a>
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	3b01      	subs	r3, #1
 800da96:	60a3      	str	r3, [r4, #8]
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	6022      	str	r2, [r4, #0]
 800da9e:	701e      	strb	r6, [r3, #0]
 800daa0:	6962      	ldr	r2, [r4, #20]
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d004      	beq.n	800dab2 <__swbuf_r+0x6e>
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	07db      	lsls	r3, r3, #31
 800daac:	d5e1      	bpl.n	800da72 <__swbuf_r+0x2e>
 800daae:	2e0a      	cmp	r6, #10
 800dab0:	d1df      	bne.n	800da72 <__swbuf_r+0x2e>
 800dab2:	4621      	mov	r1, r4
 800dab4:	4628      	mov	r0, r5
 800dab6:	f7ff ff8b 	bl	800d9d0 <_fflush_r>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d0d9      	beq.n	800da72 <__swbuf_r+0x2e>
 800dabe:	e7d6      	b.n	800da6e <__swbuf_r+0x2a>

0800dac0 <__swsetup_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4b29      	ldr	r3, [pc, #164]	@ (800db68 <__swsetup_r+0xa8>)
 800dac4:	4605      	mov	r5, r0
 800dac6:	6818      	ldr	r0, [r3, #0]
 800dac8:	460c      	mov	r4, r1
 800daca:	b118      	cbz	r0, 800dad4 <__swsetup_r+0x14>
 800dacc:	6a03      	ldr	r3, [r0, #32]
 800dace:	b90b      	cbnz	r3, 800dad4 <__swsetup_r+0x14>
 800dad0:	f7fe f9ae 	bl	800be30 <__sinit>
 800dad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad8:	0719      	lsls	r1, r3, #28
 800dada:	d422      	bmi.n	800db22 <__swsetup_r+0x62>
 800dadc:	06da      	lsls	r2, r3, #27
 800dade:	d407      	bmi.n	800daf0 <__swsetup_r+0x30>
 800dae0:	2209      	movs	r2, #9
 800dae2:	602a      	str	r2, [r5, #0]
 800dae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dae8:	81a3      	strh	r3, [r4, #12]
 800daea:	f04f 30ff 	mov.w	r0, #4294967295
 800daee:	e033      	b.n	800db58 <__swsetup_r+0x98>
 800daf0:	0758      	lsls	r0, r3, #29
 800daf2:	d512      	bpl.n	800db1a <__swsetup_r+0x5a>
 800daf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daf6:	b141      	cbz	r1, 800db0a <__swsetup_r+0x4a>
 800daf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dafc:	4299      	cmp	r1, r3
 800dafe:	d002      	beq.n	800db06 <__swsetup_r+0x46>
 800db00:	4628      	mov	r0, r5
 800db02:	f7ff f925 	bl	800cd50 <_free_r>
 800db06:	2300      	movs	r3, #0
 800db08:	6363      	str	r3, [r4, #52]	@ 0x34
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	2300      	movs	r3, #0
 800db14:	6063      	str	r3, [r4, #4]
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	f043 0308 	orr.w	r3, r3, #8
 800db20:	81a3      	strh	r3, [r4, #12]
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	b94b      	cbnz	r3, 800db3a <__swsetup_r+0x7a>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db30:	d003      	beq.n	800db3a <__swsetup_r+0x7a>
 800db32:	4621      	mov	r1, r4
 800db34:	4628      	mov	r0, r5
 800db36:	f000 f889 	bl	800dc4c <__smakebuf_r>
 800db3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3e:	f013 0201 	ands.w	r2, r3, #1
 800db42:	d00a      	beq.n	800db5a <__swsetup_r+0x9a>
 800db44:	2200      	movs	r2, #0
 800db46:	60a2      	str	r2, [r4, #8]
 800db48:	6962      	ldr	r2, [r4, #20]
 800db4a:	4252      	negs	r2, r2
 800db4c:	61a2      	str	r2, [r4, #24]
 800db4e:	6922      	ldr	r2, [r4, #16]
 800db50:	b942      	cbnz	r2, 800db64 <__swsetup_r+0xa4>
 800db52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db56:	d1c5      	bne.n	800dae4 <__swsetup_r+0x24>
 800db58:	bd38      	pop	{r3, r4, r5, pc}
 800db5a:	0799      	lsls	r1, r3, #30
 800db5c:	bf58      	it	pl
 800db5e:	6962      	ldrpl	r2, [r4, #20]
 800db60:	60a2      	str	r2, [r4, #8]
 800db62:	e7f4      	b.n	800db4e <__swsetup_r+0x8e>
 800db64:	2000      	movs	r0, #0
 800db66:	e7f7      	b.n	800db58 <__swsetup_r+0x98>
 800db68:	20000030 	.word	0x20000030

0800db6c <_sbrk_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d06      	ldr	r5, [pc, #24]	@ (800db88 <_sbrk_r+0x1c>)
 800db70:	2300      	movs	r3, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	f7f6 f8c2 	bl	8003d00 <_sbrk>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_sbrk_r+0x1a>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_sbrk_r+0x1a>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	20000bd0 	.word	0x20000bd0

0800db8c <abort>:
 800db8c:	b508      	push	{r3, lr}
 800db8e:	2006      	movs	r0, #6
 800db90:	f000 f8c0 	bl	800dd14 <raise>
 800db94:	2001      	movs	r0, #1
 800db96:	f7f6 f83b 	bl	8003c10 <_exit>

0800db9a <_calloc_r>:
 800db9a:	b570      	push	{r4, r5, r6, lr}
 800db9c:	fba1 5402 	umull	r5, r4, r1, r2
 800dba0:	b934      	cbnz	r4, 800dbb0 <_calloc_r+0x16>
 800dba2:	4629      	mov	r1, r5
 800dba4:	f7ff f948 	bl	800ce38 <_malloc_r>
 800dba8:	4606      	mov	r6, r0
 800dbaa:	b928      	cbnz	r0, 800dbb8 <_calloc_r+0x1e>
 800dbac:	4630      	mov	r0, r6
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	220c      	movs	r2, #12
 800dbb2:	6002      	str	r2, [r0, #0]
 800dbb4:	2600      	movs	r6, #0
 800dbb6:	e7f9      	b.n	800dbac <_calloc_r+0x12>
 800dbb8:	462a      	mov	r2, r5
 800dbba:	4621      	mov	r1, r4
 800dbbc:	f7fe f9c3 	bl	800bf46 <memset>
 800dbc0:	e7f4      	b.n	800dbac <_calloc_r+0x12>

0800dbc2 <__ascii_mbtowc>:
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	b901      	cbnz	r1, 800dbc8 <__ascii_mbtowc+0x6>
 800dbc6:	a901      	add	r1, sp, #4
 800dbc8:	b142      	cbz	r2, 800dbdc <__ascii_mbtowc+0x1a>
 800dbca:	b14b      	cbz	r3, 800dbe0 <__ascii_mbtowc+0x1e>
 800dbcc:	7813      	ldrb	r3, [r2, #0]
 800dbce:	600b      	str	r3, [r1, #0]
 800dbd0:	7812      	ldrb	r2, [r2, #0]
 800dbd2:	1e10      	subs	r0, r2, #0
 800dbd4:	bf18      	it	ne
 800dbd6:	2001      	movne	r0, #1
 800dbd8:	b002      	add	sp, #8
 800dbda:	4770      	bx	lr
 800dbdc:	4610      	mov	r0, r2
 800dbde:	e7fb      	b.n	800dbd8 <__ascii_mbtowc+0x16>
 800dbe0:	f06f 0001 	mvn.w	r0, #1
 800dbe4:	e7f8      	b.n	800dbd8 <__ascii_mbtowc+0x16>

0800dbe6 <__ascii_wctomb>:
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4608      	mov	r0, r1
 800dbea:	b141      	cbz	r1, 800dbfe <__ascii_wctomb+0x18>
 800dbec:	2aff      	cmp	r2, #255	@ 0xff
 800dbee:	d904      	bls.n	800dbfa <__ascii_wctomb+0x14>
 800dbf0:	228a      	movs	r2, #138	@ 0x8a
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	4770      	bx	lr
 800dbfa:	700a      	strb	r2, [r1, #0]
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	4770      	bx	lr

0800dc00 <__swhatbuf_r>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	460c      	mov	r4, r1
 800dc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc08:	2900      	cmp	r1, #0
 800dc0a:	b096      	sub	sp, #88	@ 0x58
 800dc0c:	4615      	mov	r5, r2
 800dc0e:	461e      	mov	r6, r3
 800dc10:	da0d      	bge.n	800dc2e <__swhatbuf_r+0x2e>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc18:	f04f 0100 	mov.w	r1, #0
 800dc1c:	bf14      	ite	ne
 800dc1e:	2340      	movne	r3, #64	@ 0x40
 800dc20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc24:	2000      	movs	r0, #0
 800dc26:	6031      	str	r1, [r6, #0]
 800dc28:	602b      	str	r3, [r5, #0]
 800dc2a:	b016      	add	sp, #88	@ 0x58
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	466a      	mov	r2, sp
 800dc30:	f000 f878 	bl	800dd24 <_fstat_r>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	dbec      	blt.n	800dc12 <__swhatbuf_r+0x12>
 800dc38:	9901      	ldr	r1, [sp, #4]
 800dc3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc42:	4259      	negs	r1, r3
 800dc44:	4159      	adcs	r1, r3
 800dc46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc4a:	e7eb      	b.n	800dc24 <__swhatbuf_r+0x24>

0800dc4c <__smakebuf_r>:
 800dc4c:	898b      	ldrh	r3, [r1, #12]
 800dc4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc50:	079d      	lsls	r5, r3, #30
 800dc52:	4606      	mov	r6, r0
 800dc54:	460c      	mov	r4, r1
 800dc56:	d507      	bpl.n	800dc68 <__smakebuf_r+0x1c>
 800dc58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	6123      	str	r3, [r4, #16]
 800dc60:	2301      	movs	r3, #1
 800dc62:	6163      	str	r3, [r4, #20]
 800dc64:	b003      	add	sp, #12
 800dc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc68:	ab01      	add	r3, sp, #4
 800dc6a:	466a      	mov	r2, sp
 800dc6c:	f7ff ffc8 	bl	800dc00 <__swhatbuf_r>
 800dc70:	9f00      	ldr	r7, [sp, #0]
 800dc72:	4605      	mov	r5, r0
 800dc74:	4639      	mov	r1, r7
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7ff f8de 	bl	800ce38 <_malloc_r>
 800dc7c:	b948      	cbnz	r0, 800dc92 <__smakebuf_r+0x46>
 800dc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc82:	059a      	lsls	r2, r3, #22
 800dc84:	d4ee      	bmi.n	800dc64 <__smakebuf_r+0x18>
 800dc86:	f023 0303 	bic.w	r3, r3, #3
 800dc8a:	f043 0302 	orr.w	r3, r3, #2
 800dc8e:	81a3      	strh	r3, [r4, #12]
 800dc90:	e7e2      	b.n	800dc58 <__smakebuf_r+0xc>
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	6020      	str	r0, [r4, #0]
 800dc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc9a:	81a3      	strh	r3, [r4, #12]
 800dc9c:	9b01      	ldr	r3, [sp, #4]
 800dc9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dca2:	b15b      	cbz	r3, 800dcbc <__smakebuf_r+0x70>
 800dca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f000 f84d 	bl	800dd48 <_isatty_r>
 800dcae:	b128      	cbz	r0, 800dcbc <__smakebuf_r+0x70>
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	f023 0303 	bic.w	r3, r3, #3
 800dcb6:	f043 0301 	orr.w	r3, r3, #1
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	431d      	orrs	r5, r3
 800dcc0:	81a5      	strh	r5, [r4, #12]
 800dcc2:	e7cf      	b.n	800dc64 <__smakebuf_r+0x18>

0800dcc4 <_raise_r>:
 800dcc4:	291f      	cmp	r1, #31
 800dcc6:	b538      	push	{r3, r4, r5, lr}
 800dcc8:	4605      	mov	r5, r0
 800dcca:	460c      	mov	r4, r1
 800dccc:	d904      	bls.n	800dcd8 <_raise_r+0x14>
 800dcce:	2316      	movs	r3, #22
 800dcd0:	6003      	str	r3, [r0, #0]
 800dcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcda:	b112      	cbz	r2, 800dce2 <_raise_r+0x1e>
 800dcdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dce0:	b94b      	cbnz	r3, 800dcf6 <_raise_r+0x32>
 800dce2:	4628      	mov	r0, r5
 800dce4:	f000 f852 	bl	800dd8c <_getpid_r>
 800dce8:	4622      	mov	r2, r4
 800dcea:	4601      	mov	r1, r0
 800dcec:	4628      	mov	r0, r5
 800dcee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf2:	f000 b839 	b.w	800dd68 <_kill_r>
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d00a      	beq.n	800dd10 <_raise_r+0x4c>
 800dcfa:	1c59      	adds	r1, r3, #1
 800dcfc:	d103      	bne.n	800dd06 <_raise_r+0x42>
 800dcfe:	2316      	movs	r3, #22
 800dd00:	6003      	str	r3, [r0, #0]
 800dd02:	2001      	movs	r0, #1
 800dd04:	e7e7      	b.n	800dcd6 <_raise_r+0x12>
 800dd06:	2100      	movs	r1, #0
 800dd08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4798      	blx	r3
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7e0      	b.n	800dcd6 <_raise_r+0x12>

0800dd14 <raise>:
 800dd14:	4b02      	ldr	r3, [pc, #8]	@ (800dd20 <raise+0xc>)
 800dd16:	4601      	mov	r1, r0
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f7ff bfd3 	b.w	800dcc4 <_raise_r>
 800dd1e:	bf00      	nop
 800dd20:	20000030 	.word	0x20000030

0800dd24 <_fstat_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	@ (800dd44 <_fstat_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f5 ffbd 	bl	8003cb0 <_fstat>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_fstat_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_fstat_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	20000bd0 	.word	0x20000bd0

0800dd48 <_isatty_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	@ (800dd64 <_isatty_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f5 ffbc 	bl	8003cd0 <_isatty>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_isatty_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_isatty_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	20000bd0 	.word	0x20000bd0

0800dd68 <_kill_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d07      	ldr	r5, [pc, #28]	@ (800dd88 <_kill_r+0x20>)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4608      	mov	r0, r1
 800dd72:	4611      	mov	r1, r2
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	f7f5 ff3b 	bl	8003bf0 <_kill>
 800dd7a:	1c43      	adds	r3, r0, #1
 800dd7c:	d102      	bne.n	800dd84 <_kill_r+0x1c>
 800dd7e:	682b      	ldr	r3, [r5, #0]
 800dd80:	b103      	cbz	r3, 800dd84 <_kill_r+0x1c>
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	20000bd0 	.word	0x20000bd0

0800dd8c <_getpid_r>:
 800dd8c:	f7f5 bf28 	b.w	8003be0 <_getpid>

0800dd90 <_init>:
 800dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd92:	bf00      	nop
 800dd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd96:	bc08      	pop	{r3}
 800dd98:	469e      	mov	lr, r3
 800dd9a:	4770      	bx	lr

0800dd9c <_fini>:
 800dd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9e:	bf00      	nop
 800dda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dda2:	bc08      	pop	{r3}
 800dda4:	469e      	mov	lr, r3
 800dda6:	4770      	bx	lr
